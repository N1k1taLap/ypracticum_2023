{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4c1c4d48",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Анализ и предсказание оттока клиентов оператора связи 'ТелеДом'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f011caf8",
   "metadata": {
    "hidden": true
   },
   "source": [
    "В целях борьбы с оттоком клиентов оператор связи \"ТелеДом\" разрабатывает модель, предсказывающую разорвет ли абонент договор"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97970356",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Исходя из ТЗ, для заказчика наиболее важным является качество модели. Про скорость обучения модели и время предсказания указаний дано не было."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5baec02d",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Описание услуг"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1793605d",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Оператор предоставляет два основных типа услуг:** \n",
    "\n",
    "* Стационарную телефонную связь. Телефон можно подключить к нескольким линиям одновременно.\n",
    "\n",
    "* Интернет. Подключение может быть двух типов: через телефонную линию (DSL, от англ. digital subscriber line — «цифровая абонентская линия») или оптоволоконный кабель (Fiber optic).\n",
    "\n",
    "**Также доступны такие услуги:**\n",
    "\n",
    "* Интернет-безопасность: антивирус (DeviceProtection) и блокировка небезопасных сайтов (OnlineSecurity);\n",
    "\n",
    "* Выделенная линия технической поддержки (TechSupport);\n",
    "\n",
    "* Облачное хранилище файлов для резервного копирования данных (OnlineBackup);\n",
    "\n",
    "* Стриминговое телевидение (StreamingTV) и каталог фильмов (StreamingMovies).\n",
    "\n",
    "**Клиенты могут платить за услуги каждый месяц или заключить договор на 1–2 года. Возможно оплатить счёт разными способами, а также получить электронный чек.**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2156323a",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# Описание данных"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b6da478",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Данные состоят из нескольких файлов, полученных из разных источников:**<br>\n",
    "* contract_new.csv — информация о договоре;<br>\n",
    "* personal_new.csv — персональные данные клиента;<br>\n",
    "* internet_new.csv — информация об интернет-услугах;<br>\n",
    "* phone_new.csv — информация об услугах телефонии.\n",
    "\n",
    "**Файл contract_new.csv**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ba11bdf",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* customerID — идентификатор абонента;\n",
    "* BeginDate — дата начала действия договора;\n",
    "* EndDate — дата окончания действия договора;\n",
    "* Type — тип оплаты: раз в год-два или ежемесячно;\n",
    "* PaperlessBilling — электронный расчётный лист;\n",
    "* PaymentMethod — тип платежа;\n",
    "* MonthlyCharges — расходы за месяц;\n",
    "* TotalCharges — общие расходы абонента.\n",
    "\n",
    "**Файл personal_new.csv**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f40f8196",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* customerID — идентификатор пользователя;\n",
    "* gender — пол;\n",
    "* SeniorCitizen — является ли абонент пенсионером;\n",
    "* Partner — есть ли у абонента супруг или супруга;\n",
    "* Dependents — есть ли у абонента дети.\n",
    "\n",
    "**Файл internet_new.csv**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "97131488",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* customerID — идентификатор пользователя;\n",
    "* InternetService — тип подключения;\n",
    "* OnlineSecurity — блокировка опасных сайтов;\n",
    "* OnlineBackup — облачное хранилище файлов для резервного копирования данных;\n",
    "* DeviceProtection — антивирус;\n",
    "* TechSupport — выделенная линия технической поддержки;\n",
    "* StreamingTV — стриминговое телевидение;\n",
    "* StreamingMovies — каталог фильмов.\n",
    "\n",
    "**Файл phone_new.csv**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7133b0d9",
   "metadata": {
    "hidden": true
   },
   "source": [
    "* customerID — идентификатор пользователя;\n",
    "* MultipleLines — подключение телефона к нескольким линиям одновременно.\n",
    "\n",
    "Во всех файлах столбец customerID содержит код клиента. Информация о договорах актуальна на 1 февраля 2020 года."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0625815",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "# План работы"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81f2b0af",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Шаг 1. Загрузка данных**<br>\n",
    "Загрузить данные и выполнить первичный осмотр<br>\n",
    "**Шаг 2. Объеденение, исследовательский анализ и предобработка данных**<br>\n",
    "Объеденить выбранные признаки в один датафрейм, выполнить исследовательский анализ и предобработку по необходимости, визуализировать распределения признаков, провести корреляционный анализ, сделать выводы об имеющихся признаках: понадобятся ли они для обучения модели. <br>\n",
    "**Шаг 3. Подготовка данных**<br>\n",
    "Выполнить подготовку данных для обучения модели. Разделить данные на две выборки.<br>\n",
    "**Шаг 4. Обучение моделей машинного обучения**<br>\n",
    "Обучить модели и подобрать гиперпараметры<br>\n",
    "**Шаг 5. Выбор лучшей модели**<br>\n",
    "Выбрать лучшую модель и проверить ее на тестовой выборке<br>\n",
    "**Шаг 6. Общий вывод** <br>\n",
    "Сделать общий вывод по проделанной работе"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6827718b",
   "metadata": {},
   "source": [
    "# Ход работы"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8b4dc66",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Загрузка данных и первичный осмотр."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e70738ad",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Импортирование необходимых библиотек"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "b45fa1bc",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: phik in /opt/conda/lib/python3.9/site-packages (0.12.3)\n",
      "Requirement already satisfied: joblib>=0.14.1 in /opt/conda/lib/python3.9/site-packages (from phik) (1.1.0)\n",
      "Requirement already satisfied: matplotlib>=2.2.3 in /opt/conda/lib/python3.9/site-packages (from phik) (3.3.4)\n",
      "Requirement already satisfied: pandas>=0.25.1 in /opt/conda/lib/python3.9/site-packages (from phik) (1.2.4)\n",
      "Requirement already satisfied: scipy>=1.5.2 in /opt/conda/lib/python3.9/site-packages (from phik) (1.9.1)\n",
      "Requirement already satisfied: numpy>=1.18.0 in /opt/conda/lib/python3.9/site-packages (from phik) (1.21.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.2.3->phik) (8.4.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.3 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.2.3->phik) (2.4.7)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.2.3->phik) (1.4.4)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.2.3->phik) (2.8.1)\n",
      "Requirement already satisfied: cycler>=0.10 in /opt/conda/lib/python3.9/site-packages (from matplotlib>=2.2.3->phik) (0.11.0)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.9/site-packages (from pandas>=0.25.1->phik) (2021.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.9/site-packages (from python-dateutil>=2.1->matplotlib>=2.2.3->phik) (1.16.0)\n",
      "Requirement already satisfied: shap in /opt/conda/lib/python3.9/site-packages (0.44.0)\n",
      "Requirement already satisfied: slicer==0.0.7 in /opt/conda/lib/python3.9/site-packages (from shap) (0.0.7)\n",
      "Requirement already satisfied: tqdm>=4.27.0 in /opt/conda/lib/python3.9/site-packages (from shap) (4.61.2)\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.9/site-packages (from shap) (1.9.1)\n",
      "Requirement already satisfied: numba in /opt/conda/lib/python3.9/site-packages (from shap) (0.56.0)\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.9/site-packages (from shap) (1.21.1)\n",
      "Requirement already satisfied: cloudpickle in /opt/conda/lib/python3.9/site-packages (from shap) (3.0.0)\n",
      "Requirement already satisfied: packaging>20.9 in /opt/conda/lib/python3.9/site-packages (from shap) (21.3)\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.9/site-packages (from shap) (0.24.1)\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.9/site-packages (from shap) (1.2.4)\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.9/site-packages (from packaging>20.9->shap) (2.4.7)\n",
      "Requirement already satisfied: llvmlite<0.40,>=0.39.0dev0 in /opt/conda/lib/python3.9/site-packages (from numba->shap) (0.39.0)\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.9/site-packages (from numba->shap) (49.6.0.post20210108)\n",
      "Requirement already satisfied: python-dateutil>=2.7.3 in /opt/conda/lib/python3.9/site-packages (from pandas->shap) (2.8.1)\n",
      "Requirement already satisfied: pytz>=2017.3 in /opt/conda/lib/python3.9/site-packages (from pandas->shap) (2021.1)\n",
      "Requirement already satisfied: six>=1.5 in /opt/conda/lib/python3.9/site-packages (from python-dateutil>=2.7.3->pandas->shap) (1.16.0)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.9/site-packages (from scikit-learn->shap) (3.1.0)\n",
      "Requirement already satisfied: joblib>=0.11 in /opt/conda/lib/python3.9/site-packages (from scikit-learn->shap) (1.1.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install phik\n",
    "!pip install shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "0c0c436f",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from phik import phik_matrix\n",
    "from catboost import Pool, CatBoostRegressor,CatBoostClassifier, CatBoost\n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "import numpy as np\n",
    "from sklearn.metrics import confusion_matrix\n",
    "import shap"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "2e450e68",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "RS = 111223"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "61227eb1",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Загрузка данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "347413c8",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "contract = pd.read_csv('/datasets/contract_new.csv')\n",
    "personal = pd.read_csv('/datasets/personal_new.csv')\n",
    "internet = pd.read_csv('/datasets/internet_new.csv')\n",
    "phone = pd.read_csv('/datasets/phone_new.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "5e2c6cfa",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>31.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>2017-04-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>2071.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>226.17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>2016-05-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1960.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>2019-09-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>353.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID   BeginDate EndDate            Type PaperlessBilling  \\\n",
       "0  7590-VHVEG  2020-01-01      No  Month-to-month              Yes   \n",
       "1  5575-GNVDE  2017-04-01      No        One year               No   \n",
       "2  3668-QPYBK  2019-10-01      No  Month-to-month              Yes   \n",
       "3  7795-CFOCW  2016-05-01      No        One year               No   \n",
       "4  9237-HQITU  2019-09-01      No  Month-to-month              Yes   \n",
       "\n",
       "               PaymentMethod  MonthlyCharges TotalCharges  \n",
       "0           Electronic check           29.85        31.04  \n",
       "1               Mailed check           56.95      2071.84  \n",
       "2               Mailed check           53.85       226.17  \n",
       "3  Bank transfer (automatic)           42.30       1960.6  \n",
       "4           Electronic check           70.70        353.5  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID  gender  SeniorCitizen Partner Dependents\n",
       "0  7590-VHVEG  Female              0     Yes         No\n",
       "1  5575-GNVDE    Male              0      No         No\n",
       "2  3668-QPYBK    Male              0      No         No\n",
       "3  7795-CFOCW    Male              0      No         No\n",
       "4  9237-HQITU  Female              0      No         No"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID InternetService OnlineSecurity OnlineBackup DeviceProtection  \\\n",
       "0  7590-VHVEG             DSL             No          Yes               No   \n",
       "1  5575-GNVDE             DSL            Yes           No              Yes   \n",
       "2  3668-QPYBK             DSL            Yes          Yes               No   \n",
       "3  7795-CFOCW             DSL            Yes           No              Yes   \n",
       "4  9237-HQITU     Fiber optic             No           No               No   \n",
       "\n",
       "  TechSupport StreamingTV StreamingMovies  \n",
       "0          No          No              No  \n",
       "1          No          No              No  \n",
       "2          No          No              No  \n",
       "3         Yes          No              No  \n",
       "4          No          No              No  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9305-CDSKC</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1452-KIOVK</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID MultipleLines\n",
       "0  5575-GNVDE            No\n",
       "1  3668-QPYBK            No\n",
       "2  9237-HQITU            No\n",
       "3  9305-CDSKC           Yes\n",
       "4  1452-KIOVK           Yes"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(\n",
    "    contract.head(),\n",
    "    personal.head(),\n",
    "    internet.head(),\n",
    "    phone.head()\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "6b0bb89f",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 8 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   customerID        7043 non-null   object \n",
      " 1   BeginDate         7043 non-null   object \n",
      " 2   EndDate           7043 non-null   object \n",
      " 3   Type              7043 non-null   object \n",
      " 4   PaperlessBilling  7043 non-null   object \n",
      " 5   PaymentMethod     7043 non-null   object \n",
      " 6   MonthlyCharges    7043 non-null   float64\n",
      " 7   TotalCharges      7043 non-null   object \n",
      "dtypes: float64(1), object(7)\n",
      "memory usage: 440.3+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7043 entries, 0 to 7042\n",
      "Data columns (total 5 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   customerID     7043 non-null   object\n",
      " 1   gender         7043 non-null   object\n",
      " 2   SeniorCitizen  7043 non-null   int64 \n",
      " 3   Partner        7043 non-null   object\n",
      " 4   Dependents     7043 non-null   object\n",
      "dtypes: int64(1), object(4)\n",
      "memory usage: 275.2+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 5517 entries, 0 to 5516\n",
      "Data columns (total 8 columns):\n",
      " #   Column            Non-Null Count  Dtype \n",
      "---  ------            --------------  ----- \n",
      " 0   customerID        5517 non-null   object\n",
      " 1   InternetService   5517 non-null   object\n",
      " 2   OnlineSecurity    5517 non-null   object\n",
      " 3   OnlineBackup      5517 non-null   object\n",
      " 4   DeviceProtection  5517 non-null   object\n",
      " 5   TechSupport       5517 non-null   object\n",
      " 6   StreamingTV       5517 non-null   object\n",
      " 7   StreamingMovies   5517 non-null   object\n",
      "dtypes: object(8)\n",
      "memory usage: 344.9+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6361 entries, 0 to 6360\n",
      "Data columns (total 2 columns):\n",
      " #   Column         Non-Null Count  Dtype \n",
      "---  ------         --------------  ----- \n",
      " 0   customerID     6361 non-null   object\n",
      " 1   MultipleLines  6361 non-null   object\n",
      "dtypes: object(2)\n",
      "memory usage: 99.5+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(\n",
    "    contract.info(),\n",
    "    personal.info(),\n",
    "    internet.info(),\n",
    "    phone.info()\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b6c0935",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Промежуточный вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2ce6a4b",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Данные были загружены успешно. Был произведен первичный осмотр.<br>\n",
    "Интернетом пользуются примерно 78% клиентов<br>\n",
    "Домашним телефоном примерно 90%<br>\n",
    "**Пропусков в данных нет**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51a5c9f9",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Объеденение, исследовательский анализ и предобработка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e824a78a",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Объединение датафреймов "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "838026cc",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data = contract.merge(personal, on='customerID', how='left')\n",
    "data = data.merge(internet, on='customerID', how='left')\n",
    "data = data.merge(phone, on='customerID', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "ec1829b6",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>31.04</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5575-GNVDE</td>\n",
       "      <td>2017-04-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>56.95</td>\n",
       "      <td>2071.84</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3668-QPYBK</td>\n",
       "      <td>2019-10-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>53.85</td>\n",
       "      <td>226.17</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7795-CFOCW</td>\n",
       "      <td>2016-05-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>No</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>42.30</td>\n",
       "      <td>1960.6</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9237-HQITU</td>\n",
       "      <td>2019-09-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>70.70</td>\n",
       "      <td>353.5</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   customerID   BeginDate EndDate            Type PaperlessBilling  \\\n",
       "0  7590-VHVEG  2020-01-01      No  Month-to-month              Yes   \n",
       "1  5575-GNVDE  2017-04-01      No        One year               No   \n",
       "2  3668-QPYBK  2019-10-01      No  Month-to-month              Yes   \n",
       "3  7795-CFOCW  2016-05-01      No        One year               No   \n",
       "4  9237-HQITU  2019-09-01      No  Month-to-month              Yes   \n",
       "\n",
       "               PaymentMethod  MonthlyCharges TotalCharges  gender  \\\n",
       "0           Electronic check           29.85        31.04  Female   \n",
       "1               Mailed check           56.95      2071.84    Male   \n",
       "2               Mailed check           53.85       226.17    Male   \n",
       "3  Bank transfer (automatic)           42.30       1960.6    Male   \n",
       "4           Electronic check           70.70        353.5  Female   \n",
       "\n",
       "   SeniorCitizen Partner Dependents InternetService OnlineSecurity  \\\n",
       "0              0     Yes         No             DSL             No   \n",
       "1              0      No         No             DSL            Yes   \n",
       "2              0      No         No             DSL            Yes   \n",
       "3              0      No         No             DSL            Yes   \n",
       "4              0      No         No     Fiber optic             No   \n",
       "\n",
       "  OnlineBackup DeviceProtection TechSupport StreamingTV StreamingMovies  \\\n",
       "0          Yes               No          No          No              No   \n",
       "1           No              Yes          No          No              No   \n",
       "2          Yes               No          No          No              No   \n",
       "3           No              Yes         Yes          No              No   \n",
       "4           No               No          No          No              No   \n",
       "\n",
       "  MultipleLines  \n",
       "0           NaN  \n",
       "1            No  \n",
       "2            No  \n",
       "3           NaN  \n",
       "4            No  "
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0150e99",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Таблицы были успешно объединены"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdcd0bcf",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Предобработка и исследовательский анализ"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "922d2411",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7043 entries, 0 to 7042\n",
      "Data columns (total 20 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   customerID        7043 non-null   object \n",
      " 1   BeginDate         7043 non-null   object \n",
      " 2   EndDate           7043 non-null   object \n",
      " 3   Type              7043 non-null   object \n",
      " 4   PaperlessBilling  7043 non-null   object \n",
      " 5   PaymentMethod     7043 non-null   object \n",
      " 6   MonthlyCharges    7043 non-null   float64\n",
      " 7   TotalCharges      7043 non-null   object \n",
      " 8   gender            7043 non-null   object \n",
      " 9   SeniorCitizen     7043 non-null   int64  \n",
      " 10  Partner           7043 non-null   object \n",
      " 11  Dependents        7043 non-null   object \n",
      " 12  InternetService   5517 non-null   object \n",
      " 13  OnlineSecurity    5517 non-null   object \n",
      " 14  OnlineBackup      5517 non-null   object \n",
      " 15  DeviceProtection  5517 non-null   object \n",
      " 16  TechSupport       5517 non-null   object \n",
      " 17  StreamingTV       5517 non-null   object \n",
      " 18  StreamingMovies   5517 non-null   object \n",
      " 19  MultipleLines     6361 non-null   object \n",
      "dtypes: float64(1), int64(1), object(18)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "40275f79",
   "metadata": {
    "hidden": true
   },
   "source": [
    "ТК не все клиенты пользуются интернетом или домашней телефонией при объединении таблиц образовались пропуски.<br>\n",
    "Они будут обработаны в первую очередь"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6839fe4",
   "metadata": {
    "hidden": true
   },
   "source": [
    "В изначальных таблицах пропусков не было, следовательно они образовались после объединения<br>\n",
    "При объединении дтаблиц данные потеряны не были о чем говорит кол-во ненулевых строк, равное изначальному кол-ву ненулеввых строк в датафреймах"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fed2ccbe",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Пропуски в столбцах с категориальными признаками, так что решил заполнить их \"not_used\"**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "27942adc",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data.fillna('No', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "bb5c2e89",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 7043 entries, 0 to 7042\n",
      "Data columns (total 20 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   customerID        7043 non-null   object \n",
      " 1   BeginDate         7043 non-null   object \n",
      " 2   EndDate           7043 non-null   object \n",
      " 3   Type              7043 non-null   object \n",
      " 4   PaperlessBilling  7043 non-null   object \n",
      " 5   PaymentMethod     7043 non-null   object \n",
      " 6   MonthlyCharges    7043 non-null   float64\n",
      " 7   TotalCharges      7043 non-null   object \n",
      " 8   gender            7043 non-null   object \n",
      " 9   SeniorCitizen     7043 non-null   int64  \n",
      " 10  Partner           7043 non-null   object \n",
      " 11  Dependents        7043 non-null   object \n",
      " 12  InternetService   7043 non-null   object \n",
      " 13  OnlineSecurity    7043 non-null   object \n",
      " 14  OnlineBackup      7043 non-null   object \n",
      " 15  DeviceProtection  7043 non-null   object \n",
      " 16  TechSupport       7043 non-null   object \n",
      " 17  StreamingTV       7043 non-null   object \n",
      " 18  StreamingMovies   7043 non-null   object \n",
      " 19  MultipleLines     7043 non-null   object \n",
      "dtypes: float64(1), int64(1), object(18)\n",
      "memory usage: 1.1+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db7a1724",
   "metadata": {
    "hidden": true
   },
   "source": [
    "В столбце TotalCharges хранится общая сумма трат каждого пользователя, следовательно там долен быть тип float64(числа с плавабщей точкой), а не object(строка)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "f783e7b8",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "           11\n",
       "20.45       6\n",
       "101.0       5\n",
       "1007.5      4\n",
       "732.6       4\n",
       "           ..\n",
       "4102.2      1\n",
       "428.59      1\n",
       "1358.4      1\n",
       "1398.75     1\n",
       "4403.85     1\n",
       "Name: TotalCharges, Length: 6658, dtype: int64"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['TotalCharges'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "206b8949",
   "metadata": {
    "hidden": true
   },
   "source": [
    "В некоторых строках значение TotalCharges равно пустой строке"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "201071d9",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "customerID           0\n",
      "BeginDate            0\n",
      "EndDate              0\n",
      "Type                 0\n",
      "PaperlessBilling     0\n",
      "PaymentMethod        0\n",
      "TotalCharges        11\n",
      "gender               0\n",
      "Partner              0\n",
      "Dependents           0\n",
      "InternetService      0\n",
      "OnlineSecurity       0\n",
      "OnlineBackup         0\n",
      "DeviceProtection     0\n",
      "TechSupport          0\n",
      "StreamingTV          0\n",
      "StreamingMovies      0\n",
      "MultipleLines        0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(data.select_dtypes(include=['object']).apply(lambda x: x.str.strip().eq('')).sum())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "09fa4b73",
   "metadata": {
    "hidden": true
   },
   "source": [
    "в остальных столбцах с типом object такой проблемы обнаружено не было"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "9195ffb3",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>488</th>\n",
       "      <td>4472-LVYGI</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>52.55</td>\n",
       "      <td></td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>753</th>\n",
       "      <td>3115-CZMZD</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>20.25</td>\n",
       "      <td></td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>936</th>\n",
       "      <td>5709-LVOEQ</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>80.85</td>\n",
       "      <td></td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1082</th>\n",
       "      <td>4367-NUYAO</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>25.75</td>\n",
       "      <td></td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>1371-DWPAZ</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>56.05</td>\n",
       "      <td></td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3331</th>\n",
       "      <td>7644-OMVMY</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>19.85</td>\n",
       "      <td></td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3826</th>\n",
       "      <td>3213-VVOLG</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>25.35</td>\n",
       "      <td></td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4380</th>\n",
       "      <td>2520-SGTTA</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>20.00</td>\n",
       "      <td></td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5218</th>\n",
       "      <td>2923-ARZLG</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>19.70</td>\n",
       "      <td></td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6670</th>\n",
       "      <td>4075-WKNIU</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>73.35</td>\n",
       "      <td></td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6754</th>\n",
       "      <td>2775-SEFEE</td>\n",
       "      <td>2020-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>61.90</td>\n",
       "      <td></td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID   BeginDate EndDate      Type PaperlessBilling  \\\n",
       "488   4472-LVYGI  2020-02-01      No  Two year              Yes   \n",
       "753   3115-CZMZD  2020-02-01      No  Two year               No   \n",
       "936   5709-LVOEQ  2020-02-01      No  Two year               No   \n",
       "1082  4367-NUYAO  2020-02-01      No  Two year               No   \n",
       "1340  1371-DWPAZ  2020-02-01      No  Two year               No   \n",
       "3331  7644-OMVMY  2020-02-01      No  Two year               No   \n",
       "3826  3213-VVOLG  2020-02-01      No  Two year               No   \n",
       "4380  2520-SGTTA  2020-02-01      No  Two year               No   \n",
       "5218  2923-ARZLG  2020-02-01      No  One year              Yes   \n",
       "6670  4075-WKNIU  2020-02-01      No  Two year               No   \n",
       "6754  2775-SEFEE  2020-02-01      No  Two year              Yes   \n",
       "\n",
       "                  PaymentMethod  MonthlyCharges TotalCharges  gender  \\\n",
       "488   Bank transfer (automatic)           52.55               Female   \n",
       "753                Mailed check           20.25                 Male   \n",
       "936                Mailed check           80.85               Female   \n",
       "1082               Mailed check           25.75                 Male   \n",
       "1340    Credit card (automatic)           56.05               Female   \n",
       "3331               Mailed check           19.85                 Male   \n",
       "3826               Mailed check           25.35                 Male   \n",
       "4380               Mailed check           20.00               Female   \n",
       "5218               Mailed check           19.70                 Male   \n",
       "6670               Mailed check           73.35               Female   \n",
       "6754  Bank transfer (automatic)           61.90                 Male   \n",
       "\n",
       "      SeniorCitizen Partner Dependents InternetService OnlineSecurity  \\\n",
       "488               0     Yes        Yes             DSL            Yes   \n",
       "753               0      No        Yes              No             No   \n",
       "936               0     Yes        Yes             DSL            Yes   \n",
       "1082              0     Yes        Yes              No             No   \n",
       "1340              0     Yes        Yes             DSL            Yes   \n",
       "3331              0     Yes        Yes              No             No   \n",
       "3826              0     Yes        Yes              No             No   \n",
       "4380              0     Yes        Yes              No             No   \n",
       "5218              0     Yes        Yes              No             No   \n",
       "6670              0     Yes        Yes             DSL             No   \n",
       "6754              0      No        Yes             DSL            Yes   \n",
       "\n",
       "     OnlineBackup DeviceProtection TechSupport StreamingTV StreamingMovies  \\\n",
       "488            No              Yes         Yes         Yes              No   \n",
       "753            No               No          No          No              No   \n",
       "936           Yes              Yes          No         Yes             Yes   \n",
       "1082           No               No          No          No              No   \n",
       "1340          Yes              Yes         Yes         Yes              No   \n",
       "3331           No               No          No          No              No   \n",
       "3826           No               No          No          No              No   \n",
       "4380           No               No          No          No              No   \n",
       "5218           No               No          No          No              No   \n",
       "6670          Yes              Yes         Yes         Yes              No   \n",
       "6754          Yes               No         Yes          No              No   \n",
       "\n",
       "     MultipleLines  \n",
       "488             No  \n",
       "753             No  \n",
       "936             No  \n",
       "1082           Yes  \n",
       "1340            No  \n",
       "3331            No  \n",
       "3826           Yes  \n",
       "4380            No  \n",
       "5218            No  \n",
       "6670           Yes  \n",
       "6754           Yes  "
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.query('TotalCharges == \" \"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "49e7b96d",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7590-VHVEG</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>29.85</td>\n",
       "      <td>31.04</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4325</th>\n",
       "      <td>2700-LUEVA</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>No</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>20.75</td>\n",
       "      <td>22.0</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>6469-MRVET</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>20.20</td>\n",
       "      <td>20.2</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1813</th>\n",
       "      <td>0817-HSUSE</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>75.50</td>\n",
       "      <td>75.5</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3065</th>\n",
       "      <td>5133-POWUA</td>\n",
       "      <td>2020-01-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>45.80</td>\n",
       "      <td>47.63</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>DSL</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID   BeginDate EndDate            Type PaperlessBilling  \\\n",
       "0     7590-VHVEG  2020-01-01      No  Month-to-month              Yes   \n",
       "4325  2700-LUEVA  2020-01-01      No  Month-to-month               No   \n",
       "222   6469-MRVET  2020-01-01      No        One year              Yes   \n",
       "1813  0817-HSUSE  2020-01-01      No  Month-to-month              Yes   \n",
       "3065  5133-POWUA  2020-01-01      No  Month-to-month              Yes   \n",
       "\n",
       "                PaymentMethod  MonthlyCharges TotalCharges  gender  \\\n",
       "0            Electronic check           29.85        31.04  Female   \n",
       "4325  Credit card (automatic)           20.75         22.0    Male   \n",
       "222          Electronic check           20.20         20.2    Male   \n",
       "1813         Electronic check           75.50         75.5    Male   \n",
       "3065             Mailed check           45.80        47.63    Male   \n",
       "\n",
       "      SeniorCitizen Partner Dependents InternetService OnlineSecurity  \\\n",
       "0                 0     Yes         No             DSL             No   \n",
       "4325              0      No         No              No             No   \n",
       "222               0     Yes        Yes              No             No   \n",
       "1813              0      No         No             DSL             No   \n",
       "3065              0      No         No             DSL             No   \n",
       "\n",
       "     OnlineBackup DeviceProtection TechSupport StreamingTV StreamingMovies  \\\n",
       "0             Yes               No          No          No              No   \n",
       "4325           No               No          No          No              No   \n",
       "222            No               No          No          No              No   \n",
       "1813           No              Yes         Yes         Yes             Yes   \n",
       "3065           No               No          No          No              No   \n",
       "\n",
       "     MultipleLines  \n",
       "0               No  \n",
       "4325            No  \n",
       "222             No  \n",
       "1813            No  \n",
       "3065            No  "
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.query('TotalCharges != \" \"').sort_values(by = 'BeginDate', ascending = False).head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f2207f5",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Пустой строкой решили обозначить тех, кто оформил договор в дату выгрузки данных и еще ничего не заплатил<br>\n",
    "В итоге можно заменить на 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "df899879",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data.replace(' ', 0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "01df402c",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0          11\n",
       "20.45       6\n",
       "101.0       5\n",
       "21.53       4\n",
       "255.0       4\n",
       "           ..\n",
       "1358.4      1\n",
       "1398.75     1\n",
       "1572.93     1\n",
       "4742.24     1\n",
       "4403.85     1\n",
       "Name: TotalCharges, Length: 6658, dtype: int64"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['TotalCharges'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "ca13cbbc",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data['TotalCharges'] = data['TotalCharges'].astype('float')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "9c30b328",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 186,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "93d3b615",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customerID          0\n",
       "BeginDate           0\n",
       "EndDate             0\n",
       "Type                0\n",
       "PaperlessBilling    0\n",
       "PaymentMethod       0\n",
       "MonthlyCharges      0\n",
       "TotalCharges        0\n",
       "gender              0\n",
       "SeniorCitizen       0\n",
       "Partner             0\n",
       "Dependents          0\n",
       "InternetService     0\n",
       "OnlineSecurity      0\n",
       "OnlineBackup        0\n",
       "DeviceProtection    0\n",
       "TechSupport         0\n",
       "StreamingTV         0\n",
       "StreamingMovies     0\n",
       "MultipleLines       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 187,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8afa02d",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Пропусков и дубликатов в данных нет. Пустые строки были ликвидированы"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "928bbf03",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Поиск аномалий**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "983ac0c8",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "даты в диапазоне от 2013-10-01 до 2020-02-01\n"
     ]
    }
   ],
   "source": [
    "print(f'даты в диапазоне от {data[\"BeginDate\"].min()} до {data[\"BeginDate\"].max()}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d005bc5c",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Аномалий в датах нет"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "268fe222",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Выбросов в ежемесячной оплате:  0\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "boxplot = plt.boxplot(data['MonthlyCharges'].values)\n",
    "outliers = list(boxplot[\"fliers\"][0].get_data()[1])\n",
    "print(\"Выбросов в ежемесячной оплате: \", len(outliers)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "34831961",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Выбросов в общих тратах:  195\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "boxplot = plt.boxplot(data.query('TotalCharges > 0')['TotalCharges'].values)\n",
    "outliers = list(boxplot[\"fliers\"][0].get_data()[1])\n",
    "print(\"Выбросов в общих тратах: \", len(outliers)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "358e9a97",
   "metadata": {
    "hidden": true,
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4610</th>\n",
       "      <td>2889-FPWRM</td>\n",
       "      <td>2013-10-01</td>\n",
       "      <td>No</td>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>117.80</td>\n",
       "      <td>9221.38</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5558</th>\n",
       "      <td>0675-NCDYU</td>\n",
       "      <td>2014-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>116.40</td>\n",
       "      <td>9218.88</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2559</th>\n",
       "      <td>8263-QMNTJ</td>\n",
       "      <td>2014-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>115.55</td>\n",
       "      <td>9068.36</td>\n",
       "      <td>Male</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4206</th>\n",
       "      <td>0017-IUDMW</td>\n",
       "      <td>2014-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>116.80</td>\n",
       "      <td>8998.27</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>540</th>\n",
       "      <td>6859-QNXIQ</td>\n",
       "      <td>2014-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>113.10</td>\n",
       "      <td>8957.52</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID   BeginDate EndDate      Type PaperlessBilling  \\\n",
       "4610  2889-FPWRM  2013-10-01      No  One year              Yes   \n",
       "5558  0675-NCDYU  2014-02-01      No  Two year              Yes   \n",
       "2559  8263-QMNTJ  2014-02-01      No  Two year              Yes   \n",
       "4206  0017-IUDMW  2014-02-01      No  Two year              Yes   \n",
       "540   6859-QNXIQ  2014-02-01      No  Two year              Yes   \n",
       "\n",
       "                  PaymentMethod  MonthlyCharges  TotalCharges  gender  \\\n",
       "4610  Bank transfer (automatic)          117.80       9221.38    Male   \n",
       "5558    Credit card (automatic)          116.40       9218.88  Female   \n",
       "2559           Electronic check          115.55       9068.36    Male   \n",
       "4206    Credit card (automatic)          116.80       8998.27  Female   \n",
       "540   Bank transfer (automatic)          113.10       8957.52  Female   \n",
       "\n",
       "      SeniorCitizen Partner Dependents InternetService OnlineSecurity  \\\n",
       "4610              0     Yes         No     Fiber optic            Yes   \n",
       "5558              0     Yes        Yes     Fiber optic            Yes   \n",
       "2559              0     Yes         No     Fiber optic            Yes   \n",
       "4206              0     Yes        Yes     Fiber optic            Yes   \n",
       "540               0     Yes        Yes     Fiber optic            Yes   \n",
       "\n",
       "     OnlineBackup DeviceProtection TechSupport StreamingTV StreamingMovies  \\\n",
       "4610          Yes              Yes         Yes         Yes             Yes   \n",
       "5558          Yes              Yes         Yes         Yes             Yes   \n",
       "2559          Yes              Yes         Yes         Yes             Yes   \n",
       "4206          Yes              Yes         Yes         Yes             Yes   \n",
       "540           Yes              Yes         Yes         Yes             Yes   \n",
       "\n",
       "     MultipleLines  \n",
       "4610           Yes  \n",
       "5558           Yes  \n",
       "2559           Yes  \n",
       "4206           Yes  \n",
       "540            Yes  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sort_values(by = 'TotalCharges', ascending = False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "4565f0bf",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customerID</th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3912</th>\n",
       "      <td>3882-IYOIJ</td>\n",
       "      <td>2015-02-01</td>\n",
       "      <td>No</td>\n",
       "      <td>Two year</td>\n",
       "      <td>No</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>115.25</td>\n",
       "      <td>7537.35</td>\n",
       "      <td>Female</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      customerID   BeginDate EndDate      Type PaperlessBilling  \\\n",
       "3912  3882-IYOIJ  2015-02-01      No  Two year               No   \n",
       "\n",
       "                PaymentMethod  MonthlyCharges  TotalCharges  gender  \\\n",
       "3912  Credit card (automatic)          115.25       7537.35  Female   \n",
       "\n",
       "      SeniorCitizen Partner Dependents InternetService OnlineSecurity  \\\n",
       "3912              0     Yes        Yes     Fiber optic            Yes   \n",
       "\n",
       "     OnlineBackup DeviceProtection TechSupport StreamingTV StreamingMovies  \\\n",
       "3912          Yes              Yes         Yes         Yes             Yes   \n",
       "\n",
       "     MultipleLines  \n",
       "3912           Yes  "
      ]
     },
     "execution_count": 192,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(\n",
    "    data.loc[\n",
    "        data['BeginDate'] ==\n",
    "        data.\n",
    "        sort_values(by = 'TotalCharges', ascending = False).\n",
    "        head(195)\n",
    "        ['BeginDate'].max()\n",
    "    ].sort_values(by = 'TotalCharges', ascending = False)\n",
    "    .head(1)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50ce3341",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Аномалий в TotalCharges нет. Высокие значения обусловлены тем, что люди крайне долго являются абонентами"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "a5b9a7b1",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "def ended(row):\n",
    "    end_d = row['EndDate']\n",
    "    if end_d == 'No':\n",
    "        return 0\n",
    "    else:\n",
    "        return 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "09ebd385",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data['end'] = data.apply(ended,axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "a1873aa4",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 144x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data['end'].hist(figsize= (2,5), bins = 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "d49fa52a",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ТелеДом покинули 15.63% клиентов\n"
     ]
    }
   ],
   "source": [
    "print(f'ТелеДом покинули {(data.query(\"end == 1\")[\"end\"].count() / data[\"end\"].count() * 100).round(2)}% клиентов')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "50e32e2a",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - Type:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - PaperlessBilling:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - PaymentMethod:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - gender:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - SeniorCitizen:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - Partner:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - Dependents:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - InternetService:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - OnlineSecurity:\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAPjElEQVR4nO3dbYylZX3H8e9PFoUsVkDshO5il8ZNGiwVzARo7IsRUlhs45JWCYboSjfdNKHGNjQVa1IsSAMvEAtR003ZuCiKxGoWlUg34KQ1DfIgdJeHEqYIYTco0UXa8QFd+++LuUaPsMOceTpL9vp+ksnc93Vf576v8+Z7zt5zZjZVhSSpD6842AuQJI2O0Zekjhh9SeqI0Zekjhh9SerIqoO9gJdy3HHH1bp16xb9+B/+8IesXr16+RYkSSOylH7dd99936uq1x3o2Ms6+uvWrePee+9d9OMnJyeZmJhYvgVJ0ogspV9JnpzrmLd3JKkjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjQ0U/yRNJdid5IMm9bezYJDuTPNa+H9PGk+S6JFNJdiV588B5NrX5jyXZtDJPSZI0l4W8039rVZ1SVeNt/1LgjqpaD9zR9gHOBda3ry3AJ2HmRQK4DDgdOA24bPaFQpI0Gkv5jdyNwETb3g5MAh9o4zfWzP/OcleSo5Mc3+burKp9AEl2AhuAzy1hDS9p997neO+lX12p08/piav+cOTXlKRhDBv9Av41SQH/VFVbgbGqerod/w4w1rbXAE8NPHZPG5tr/Fck2cLMvxAYGxtjcnJyyCW+2NiRcMnJ+xf9+MVaypolCWB6enpFWjJs9H+/qvYm+XVgZ5L/GjxYVdVeEJasvaBsBRgfH6+l/O2c62/awTW7R//nhZ64cGLk15R0aFmpvx021D39qtrbvj8DfImZe/LfbbdtaN+fadP3AicMPHxtG5trXJI0IvNGP8nqJK+e3QbOBh4EbgVmP4GzCdjRtm8F3tM+xXMG8Fy7DXQ7cHaSY9oPcM9uY5KkERnm3scY8KUks/M/W1VfS3IPcEuSzcCTwPlt/m3A24Ap4EfARQBVtS/JFcA9bd7lsz/UlSSNxrzRr6rHgTcdYPz7wFkHGC/g4jnOtQ3YtvBlSpKWg7+RK0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1JGho5/ksCT3J/lK2z8xyTeTTCX5fJJXtvFXtf2pdnzdwDk+2MYfTXLOsj8bSdJLWsg7/fcDjwzsXw1cW1VvAJ4FNrfxzcCzbfzaNo8kJwEXAG8ENgCfSHLY0pYvSVqIoaKfZC3wh8A/t/0AZwJfaFO2A+e17Y1tn3b8rDZ/I3BzVT1fVd8GpoDTluE5SJKGtGrIeR8D/gZ4ddt/LfCDqtrf9vcAa9r2GuApgKran+S5Nn8NcNfAOQcf8wtJtgBbAMbGxpicnBxyiS82diRccvL++Scus6WsWZIApqenV6Ql80Y/yR8Bz1TVfUkmln0FL1BVW4GtAOPj4zUxsfhLXn/TDq7ZPezr2vJ54sKJkV9T0qFlcnKSpfRvLsMU8S3A25O8DTgC+DXgH4Gjk6xq7/bXAnvb/L3ACcCeJKuA1wDfHxifNfgYSdIIzHtPv6o+WFVrq2odMz+IvbOqLgS+DryjTdsE7Gjbt7Z92vE7q6ra+AXt0z0nAuuBu5ftmUiS5rWUex8fAG5O8hHgfuCGNn4D8OkkU8A+Zl4oqKqHktwCPAzsBy6uqp8v4fqSpAVaUPSrahKYbNuPc4BP31TVT4B3zvH4K4ErF7pISdLy8DdyJakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOmL0JakjRl+SOjJv9JMckeTuJP+Z5KEkf9/GT0zyzSRTST6f5JVt/FVtf6odXzdwrg+28UeTnLNiz0qSdEDDvNN/Hjizqt4EnAJsSHIGcDVwbVW9AXgW2NzmbwaebePXtnkkOQm4AHgjsAH4RJLDlvG5SJLmMW/0a8Z02z28fRVwJvCFNr4dOK9tb2z7tONnJUkbv7mqnq+qbwNTwGnL8SQkScNZNcyk9o78PuANwMeB/wZ+UFX725Q9wJq2vQZ4CqCq9id5DnhtG79r4LSDjxm81hZgC8DY2BiTk5MLe0YDxo6ES07eP//EZbaUNUsSwPT09Iq0ZKjoV9XPgVOSHA18CfjtZV/JL6+1FdgKMD4+XhMTE4s+1/U37eCa3UM9xWX1xIUTI7+mpEPL5OQkS+nfXBb06Z2q+gHwdeD3gKOTzBZ1LbC3be8FTgBox18DfH9w/ACPkSSNwDCf3nlde4dPkiOBPwAeYSb+72jTNgE72vatbZ92/M6qqjZ+Qft0z4nAeuDuZXoekqQhDHPv43hge7uv/wrglqr6SpKHgZuTfAS4H7ihzb8B+HSSKWAfM5/YoaoeSnIL8DCwH7i43TaSJI3IvNGvql3AqQcYf5wDfPqmqn4CvHOOc10JXLnwZUqSloO/kStJHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktSReaOf5IQkX0/ycJKHkry/jR+bZGeSx9r3Y9p4klyXZCrJriRvHjjXpjb/sSSbVu5pSZIOZJh3+vuBS6rqJOAM4OIkJwGXAndU1XrgjrYPcC6wvn1tAT4JMy8SwGXA6cBpwGWzLxSSpNGYN/pV9XRVfatt/y/wCLAG2Ahsb9O2A+e17Y3AjTXjLuDoJMcD5wA7q2pfVT0L7AQ2LOeTkSS9tFULmZxkHXAq8E1grKqeboe+A4y17TXAUwMP29PG5hp/4TW2MPMvBMbGxpicnFzIEn/F2JFwycn7F/34xVrKmiW9fOze+9xBu/aJrzlsRVoydPSTHAX8C/CXVfU/SX5xrKoqSS3HgqpqK7AVYHx8vCYmJhZ9rutv2sE1uxf0urYsnrhwYuTXlLT83nvpVw/atT+1YTVL6d9chvr0TpLDmQn+TVX1xTb83Xbbhvb9mTa+Fzhh4OFr29hc45KkERnm0zsBbgAeqaqPDhy6FZj9BM4mYMfA+Hvap3jOAJ5rt4FuB85Ockz7Ae7ZbUySNCLD3Pt4C/BuYHeSB9rY3wJXAbck2Qw8CZzfjt0GvA2YAn4EXARQVfuSXAHc0+ZdXlX7luNJSJKGM2/0q+obQOY4fNYB5hdw8Rzn2gZsW8gCJUnLx9/IlaSOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6si80U+yLckzSR4cGDs2yc4kj7Xvx7TxJLkuyVSSXUnePPCYTW3+Y0k2rczTkSS9lGHe6X8K2PCCsUuBO6pqPXBH2wc4F1jfvrYAn4SZFwngMuB04DTgstkXCknS6Mwb/ar6N2DfC4Y3Atvb9nbgvIHxG2vGXcDRSY4HzgF2VtW+qnoW2MmLX0gkSStssff0x6rq6bb9HWCsba8BnhqYt6eNzTUuSRqhVUs9QVVVklqOxQAk2cLMrSHGxsaYnJxc9LnGjoRLTt6/TCsb3lLWLOnl42D0Y9b09PSKtGSx0f9ukuOr6ul2++aZNr4XOGFg3to2theYeMH45IFOXFVbga0A4+PjNTExcaBpQ7n+ph1cs3vJr2sL9sSFEyO/pqTl995Lv3rQrv2pDatZSv/mstjbO7cCs5/A2QTsGBh/T/sUzxnAc+020O3A2UmOaT/APbuNSZJGaN63wUk+x8y79OOS7GHmUzhXAbck2Qw8CZzfpt8GvA2YAn4EXARQVfuSXAHc0+ZdXlUv/OGwJGmFzRv9qnrXHIfOOsDcAi6e4zzbgG0LWp0kaVn5G7mS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1BGjL0kdMfqS1JGRRz/JhiSPJplKcumory9JPRtp9JMcBnwcOBc4CXhXkpNGuQZJ6tmo3+mfBkxV1eNV9VPgZmDjiNcgSd1aNeLrrQGeGtjfA5w+OCHJFmBL251O8ugSrncc8L0lPH5RcvWoryjpUPPWq5fUr9+c68Cooz+vqtoKbF2OcyW5t6rGl+NckjRKK9WvUd/e2QucMLC/to1JkkZg1NG/B1if5MQkrwQuAG4d8RokqVsjvb1TVfuT/AVwO3AYsK2qHlrBSy7LbSJJOghWpF+pqpU4ryTpZcjfyJWkjhh9SerIIRH9JJXkmoH9v07y4YO4JEl6SZnxjSTnDoy9M8nXVvK6h0T0geeBP05y3MFeiCQNo2Z+oPrnwEeTHJHkKOAfgItX8rqHSvT3M/OT7r964YEk65LcmWRXkjuSvH70y5OkF6uqB4EvAx8A/g74DPChJHcnuT/JRoAkb2xjD7SWrV/sNQ+JT+8kmQZ+A9gFvAn4M+Coqvpwki8DX6iq7Un+FHh7VZ138FYrSb+UZDXwLeCnwFeAh6rqM0mOBu4GTgWuAu6qqpva7zgdVlU/XtT1DpXoV9VRSS4Hfgb8mF9G/3vA8VX1sySHA09XlbeBJL1stHZNA+cDRzBz9wLgWOAcZsL/IeBG4ItV9dhir3Wo3N6Z9TFgM7D6IK9Dkhbi/9pXgD+pqlPa1+ur6pGq+izwdmbe0N6W5MzFXuiQin5V7QNuYSb8s/6DmT/3AHAh8O+jXpckDel24H1JApDk1Pb9t4DHq+o6YAfwu4u9wCEV/eYaZv6k8qz3ARcl2QW8G3j/QVmVJM3vCuBwYFeSh9o+zNz2eTDJA8DvMHObZ1EOiXv6kqThHIrv9CVJczD6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHfl/Htfq6HztzcMAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - OnlineBackup:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - DeviceProtection:\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAN7UlEQVR4nO3df4xlZX3H8fdHFoQsqaCYCd3FLg2bNFiqmAnS+M8UUliwcUmrBkN0tZtumlBjG5oKNSkWpIE/ECtRk00hropFYm0WhZQQcNKaBhHELi6EMEUMu0GJLtAOKrr67R/3WbjFHebXnTtknvcrmcw9zzn3nOf8856zZ87dSVUhSerDq1Z7ApKk8TH6ktQRoy9JHTH6ktQRoy9JHVm32hN4OSeccEJt2rRpye9/7rnnWL9+/egmJEljspx+3X///T+qqtcfbt0rOvqbNm3ivvvuW/L7p6enmZqaGt2EJGlMltOvJN+fa523dySpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI6/oT+Qu14P7n+X9l9429uM+fvXbx35MSVoIr/QlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSMLjn6SI5I8kORrbfnkJN9MMpPkS0mOauOvbsszbf2moX1c1sYfSXLuyM9GkvSyFnOl/yHg4aHla4DrquoU4GlgexvfDjzdxq9r25HkVOBC4I3AFuDTSY5Y3vQlSYuxoOgn2Qi8HfinthzgLODLbZNdwAXt9da2TFt/dtt+K3BzVT1fVd8DZoAzRnAOkqQFWuiV/ieAvwF+1ZZfBzxTVQfb8j5gQ3u9AXgCoK1/tm3/wvhh3iNJGoN1822Q5I+Ap6rq/iRTKz2hJDuAHQATExNMT08veV8Tx8Alpx2cf8MRW86cJQlgdnZ2RVoyb/SBtwHvSHI+cDTwG8A/AsclWdeu5jcC+9v2+4GTgH1J1gGvAX48NH7I8HteUFU7gZ0Ak5OTNTU1tYTTGrj+pt1c++BCTnG0Hr9oauzHlLS2TE9Ps5z+zWXe2ztVdVlVbayqTQx+EXt3VV0EfB14Z9tsG7C7vb61LdPW311V1cYvbE/3nAxsBu4d2ZlIkua1nMvgDwM3J/kY8ABwQxu/Afh8khngAIMfFFTV3iS3AA8BB4GLq+qXyzi+JGmRFhX9qpoGptvrxzjM0zdV9TPgXXO8/yrgqsVOUpI0Gn4iV5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSPzRj/J0UnuTfJfSfYm+fs2fnKSbyaZSfKlJEe18Ve35Zm2ftPQvi5r448kOXfFzkqSdFgLudJ/Hjirqt4EvBnYkuRM4Brguqo6BXga2N623w483cava9uR5FTgQuCNwBbg00mOGOG5SJLmMW/0a2C2LR7Zvgo4C/hyG98FXNBeb23LtPVnJ0kbv7mqnq+q7wEzwBmjOAlJ0sKsW8hG7Yr8fuAU4FPAfwPPVNXBtsk+YEN7vQF4AqCqDiZ5FnhdG79naLfD7xk+1g5gB8DExATT09OLO6MhE8fAJacdnH/DEVvOnCUJYHZ2dkVasqDoV9UvgTcnOQ74V+B3Rj6TF4+1E9gJMDk5WVNTU0ve1/U37ebaBxd0iiP1+EVTYz+mpLVlenqa5fRvLot6eqeqngG+Dvw+cFySQ0XdCOxvr/cDJwG09a8Bfjw8fpj3SJLGYCFP77y+XeGT5BjgD4GHGcT/nW2zbcDu9vrWtkxbf3dVVRu/sD3dczKwGbh3ROchSVqAhdz7OBHY1e7rvwq4paq+luQh4OYkHwMeAG5o298AfD7JDHCAwRM7VNXeJLcADwEHgYvbbSNJ0pjMG/2q2gOcfpjxxzjM0zdV9TPgXXPs6yrgqsVPU5I0Cn4iV5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSNGX5I6YvQlqSPz/mF0SerVpktvW7Vjf3bL+hXZr1f6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktSReaOf5KQkX0/yUJK9ST7Uxl+b5M4kj7bvx7fxJPlkkpkke5K8ZWhf29r2jybZtnKnJUk6nIVc6R8ELqmqU4EzgYuTnApcCtxVVZuBu9oywHnA5va1A/gMDH5IAJcDbwXOAC4/9INCkjQe80a/qp6sqm+31/8LPAxsALYCu9pmu4AL2uutwOdq4B7guCQnAucCd1bVgap6GrgT2DLKk5EkvbxF/bnEJJuA04FvAhNV9WRb9QNgor3eADwx9LZ9bWyu8ZceYweDfyEwMTHB9PT0Yqb4/0wcA5ecdnDJ71+q5cxZ0ivHavTjkNnZ2RVpyYKjn+RY4F+Av6yq/0nywrqqqiQ1iglV1U5gJ8Dk5GRNTU0teV/X37Sbax8c/58BfvyiqbEfU9LovX+V/0bucvo3lwU9vZPkSAbBv6mqvtKGf9hu29C+P9XG9wMnDb19Yxuba1ySNCYLeXonwA3Aw1X18aFVtwKHnsDZBuweGn9fe4rnTODZdhvoDuCcJMe3X+Ce08YkSWOykHsfbwPeCzyY5Dtt7G+Bq4FbkmwHvg+8u627HTgfmAF+AnwAoKoOJLkS+Fbb7oqqOjCKk5AkLcy80a+qbwCZY/XZh9m+gIvn2NeNwI2LmaAkaXT8RK4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JH5o1+khuTPJXku0Njr01yZ5JH2/fj23iSfDLJTJI9Sd4y9J5tbftHk2xbmdORJL2chVzpfxbY8pKxS4G7qmozcFdbBjgP2Ny+dgCfgcEPCeBy4K3AGcDlh35QSJLGZ97oV9W/AwdeMrwV2NVe7wIuGBr/XA3cAxyX5ETgXODOqjpQVU8Dd/LrP0gkSSts3RLfN1FVT7bXPwAm2usNwBND2+1rY3ON/5okOxj8K4GJiQmmp6eXOEWYOAYuOe3gkt+/VMuZs6RXjtXoxyGzs7Mr0pKlRv8FVVVJahSTafvbCewEmJycrKmpqSXv6/qbdnPtg8s+xUV7/KKpsR9T0ui9/9LbVu3Yn92ynuX0by5LfXrnh+22De37U218P3DS0HYb29hc45KkMVpq9G8FDj2Bsw3YPTT+vvYUz5nAs+020B3AOUmOb7/APaeNSZLGaN57H0n+GZgCTkiyj8FTOFcDtyTZDnwfeHfb/HbgfGAG+AnwAYCqOpDkSuBbbbsrquqlvxyWJK2weaNfVe+ZY9XZh9m2gIvn2M+NwI2Lmp0kaaT8RK4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHjL4kdcToS1JHxh79JFuSPJJkJsml4z6+JPVsrNFPcgTwKeA84FTgPUlOHeccJKln477SPwOYqarHqurnwM3A1jHPQZK6tW7Mx9sAPDG0vA946/AGSXYAO9ribJJHlnG8E4AfLeP9S5Jrxn1ESWvNH1yzrH791lwrxh39eVXVTmDnKPaV5L6qmhzFviRpnFaqX+O+vbMfOGloeWMbkySNwbij/y1gc5KTkxwFXAjcOuY5SFK3xnp7p6oOJvkL4A7gCODGqtq7goccyW0iSVoFK9KvVNVK7FeS9ArkJ3IlqSNGX5I6siain6SSXDu0/NdJPrqKU5Kkl5WBbyQ5b2jsXUn+bSWPuyaiDzwP/HGSE1Z7IpK0EDX4heqfAx9PcnSSY4F/AC5eyeOulegfZPCb7r966Yokm5LcnWRPkruSvGH805OkX1dV3wW+CnwY+DvgC8BHktyb5IEkWwGSvLGNfae1bPNSj7kmnt5JMgv8JrAHeBPwZ8CxVfXRJF8FvlxVu5L8KfCOqrpg9WYrSS9Ksh74NvBz4GvA3qr6QpLjgHuB04GrgXuq6qb2GacjquqnSzreWol+VR2b5ArgF8BPeTH6PwJOrKpfJDkSeLKqvA0k6RWjtWsWeDdwNIO7FwCvBc5lEP6PAJ8DvlJVjy71WGvl9s4hnwC2A+tXeR6StBi/al8B/qSq3ty+3lBVD1fVF4F3MLigvT3JWUs90JqKflUdAG5hEP5D/pPBf/cAcBHwH+OelyQt0B3AB5MEIMnp7ftvA49V1SeB3cDvLfUAayr6zbUM/kvlQz4IfCDJHuC9wIdWZVaSNL8rgSOBPUn2tmUY3Pb5bpLvAL/L4DbPkqyJe/qSpIVZi1f6kqQ5GH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SO/B9PP00M/WEDmQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - TechSupport:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - StreamingTV:\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAN+UlEQVR4nO3db4ylZX2H8evrLgpZWkExE7qLXRo3abBUMROk8c0UUli0cUmrBkN0tZtumlBjG5q61qRYlQZeIFZSTTaFsCoWCbVZFFOyASataRBB6OJCCFPEsBuU6CLt+Add++uLuVdPYYc5M3PmDJ37+iSTOc/9/LufN9ecfeY5s6kqJEl9eMlqT0CSND5GX5I6YvQlqSNGX5I6YvQlqSPrV3sCL+SUU06pzZs3L3n/H/7wh2zYsGF0E5KkMVlOv+67777vVdWrjrXuRR39zZs3c++99y55/+npaaampkY3IUkak+X0K8m351vn7R1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6siL+hO5y/XgoWd4z67bxn7ex698y9jPKUnD8J2+JHXE6EtSR4y+JHXE6EtSR4y+JHXE6EtSR4y+JHXE6EtSR4y+JHXE6EtSR4y+JHXE6EtSR4aOfpJ1Se5P8uW2fHqSryWZSfKFJC9t4y9ryzNt/eaBY3ywjT+S5IKRX40k6QUt5p3++4GHB5avAq6pqtcATwM72vgO4Ok2fk3bjiRnABcDrwW2Ap9Ksm5505ckLcZQ0U+yCXgL8A9tOcC5wC1tkz3ARe31trZMW39e234bcFNVPVtV3wJmgLNHcA2SpCEN+/f0PwH8JfArbfmVwA+q6khbPghsbK83Ak8AVNWRJM+07TcCdw8cc3CfX0iyE9gJMDExwfT09JBTfL6JE+CyM48svOGILWfOkgQwOzu7Ii1ZMPpJfh94qqruSzI18hk8R1XtBnYDTE5O1tTU0k957Y17ufrB8f8/MY9fMjX2c0paW6anp1lO/+YzTBHfBLw1yZuB44FfBf4OOCnJ+vZufxNwqG1/CDgNOJhkPfBy4PsD40cN7iNJGoMF7+lX1QeralNVbWbuF7F3VtUlwF3A29pm24G97fWtbZm2/s6qqjZ+cXu653RgC3DPyK5EkrSg5dz7+ABwU5KPAfcD17Xx64DPJpkBDjP3g4KqOpDkZuAh4AhwaVX9fBnnlyQt0qKiX1XTwHR7/RjHePqmqn4CvH2e/a8ArljsJCVJo+EnciWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0Zfkjpi9CWpI0ZfkjqyYPSTHJ/kniT/keRAkr9p46cn+VqSmSRfSPLSNv6ytjzT1m8eONYH2/gjSS5YsauSJB3TMO/0nwXOrarXAa8HtiY5B7gKuKaqXgM8Dexo2+8Anm7j17TtSHIGcDHwWmAr8Kkk60Z4LZKkBSwY/Zoz2xaPa18FnAvc0sb3ABe119vaMm39eUnSxm+qqmer6lvADHD2KC5CkjScoe7pJ1mX5AHgKWAf8J/AD6rqSNvkILCxvd4IPAHQ1j8DvHJw/Bj7SJLGYP0wG1XVz4HXJzkJ+GfgN1dqQkl2AjsBJiYmmJ6eXvKxJk6Ay848svCGI7acOUsSwOzs7Iq0ZKjoH1VVP0hyF/A7wElJ1rd385uAQ22zQ8BpwMEk64GXA98fGD9qcJ/Bc+wGdgNMTk7W1NTUoi5o0LU37uXqBxd1iSPx+CVTYz+npLVlenqa5fRvPsM8vfOq9g6fJCcAvwc8DNwFvK1tth3Y217f2pZp6++sqmrjF7ene04HtgD3jOg6JElDGOZt8KnAnvakzUuAm6vqy0keAm5K8jHgfuC6tv11wGeTzACHmXtih6o6kORm4CHgCHBpu20kSRqTBaNfVfuBs44x/hjHePqmqn4CvH2eY10BXLH4aUqSRsFP5EpSR4y+JHXE6EtSR4y+JHXE6EtSR4y+JHXE6EtSR4y+JHXE6EtSR8b/18gk6f+JzbtuW7Vz37B1w4oc13f6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktSRBaOf5LQkdyV5KMmBJO9v469Isi/Jo+37yW08ST6ZZCbJ/iRvGDjW9rb9o0m2r9xlSZKOZZh3+keAy6rqDOAc4NIkZwC7gDuqagtwR1sGuBDY0r52Ap+GuR8SwOXAG4GzgcuP/qCQJI3HgtGvqier6hvt9X8DDwMbgW3AnrbZHuCi9nob8JmaczdwUpJTgQuAfVV1uKqeBvYBW0d5MZKkF7Z+MRsn2QycBXwNmKiqJ9uq7wAT7fVG4ImB3Q62sfnGn3uOncz9C4GJiQmmp6cXM8X/Y+IEuOzMI0vef6mWM2dJLx6r0Y+jZmdnV6QlQ0c/yYnAPwF/VlX/leQX66qqktQoJlRVu4HdAJOTkzU1NbXkY117416ufnBRP9dG4vFLpsZ+Tkmj955dt63auW/YuoHl9G8+Qz29k+Q45oJ/Y1V9sQ1/t922oX1/qo0fAk4b2H1TG5tvXJI0JsM8vRPgOuDhqvr4wKpbgaNP4GwH9g6Mv7s9xXMO8Ey7DXQ7cH6Sk9svcM9vY5KkMRnm3sebgHcBDyZ5oI39FXAlcHOSHcC3gXe0dV8B3gzMAD8C3gtQVYeTfBT4etvuI1V1eBQXIUkazoLRr6qvApln9XnH2L6AS+c51vXA9YuZoCRpdPxEriR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1xOhLUkeMviR1ZMHoJ7k+yVNJvjkw9ook+5I82r6f3MaT5JNJZpLsT/KGgX22t+0fTbJ9ZS5HkvRChnmnfwOw9Tlju4A7qmoLcEdbBrgQ2NK+dgKfhrkfEsDlwBuBs4HLj/6gkCSNz4LRr6p/BQ4/Z3gbsKe93gNcNDD+mZpzN3BSklOBC4B9VXW4qp4G9vH8HySSpBW2fon7TVTVk+31d4CJ9noj8MTAdgfb2Hzjz5NkJ3P/SmBiYoLp6eklThEmToDLzjyy5P2XajlzlvTisRr9OGp2dnZFWrLU6P9CVVWSGsVk2vF2A7sBJicna2pqasnHuvbGvVz94LIvcdEev2Rq7OeUNHrv2XXbqp37hq0bWE7/5rPUp3e+227b0L4/1cYPAacNbLepjc03Lkkao6VG/1bg6BM424G9A+Pvbk/xnAM8024D3Q6cn+Tk9gvc89uYJGmMFrz3keQfgSnglCQHmXsK50rg5iQ7gG8D72ibfwV4MzAD/Ah4L0BVHU7yUeDrbbuPVNVzfzksSVphC0a/qt45z6rzjrFtAZfOc5zrgesXNTtJ0kj5iVxJ6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6ojRl6SOGH1J6sjYo59ka5JHkswk2TXu80tSz8Ya/STrgL8HLgTOAN6Z5IxxzkGSejbud/pnAzNV9VhV/RS4Cdg25jlIUrfWj/l8G4EnBpYPAm8c3CDJTmBnW5xN8sgyzncK8L1l7L8kuWrcZ5S01vzuVcvq16/Pt2Lc0V9QVe0Gdo/iWEnurarJURxLksZppfo17ts7h4DTBpY3tTFJ0hiMO/pfB7YkOT3JS4GLgVvHPAdJ6tZYb+9U1ZEkfwrcDqwDrq+qAyt4ypHcJpKkVbAi/UpVrcRxJUkvQn4iV5I6YvQlqSNrIvpJKsnVA8t/keTDqzglSXpBmfPVJBcOjL09yb+s5HnXRPSBZ4E/SHLKak9EkoZRc79Q/RPg40mOT3Ii8LfApSt53rUS/SPM/ab7z5+7IsnmJHcm2Z/kjiSvHv/0JOn5quqbwJeADwB/DXwO+FCSe5Lcn2QbQJLXtrEHWsu2LPWca+LpnSSzwK8B+4HXAX8MnFhVH07yJeCWqtqT5I+At1bVRas3W0n6pSQbgG8APwW+DByoqs8lOQm4BzgLuBK4u6pubJ9xWldVP17S+dZK9KvqxCQfAX4G/JhfRv97wKlV9bMkxwFPVpW3gSS9aLR2zQLvAI5n7u4FwCuAC5gL/4eAzwBfrKpHl3qutXJ756hPADuADas8D0lajP9pXwH+sKpe375eXVUPV9Xngbcy94b2K0nOXeqJ1lT0q+owcDNz4T/q35n7cw8AlwD/Nu55SdKQbgfelyQASc5q338DeKyqPgnsBX57qSdYU9FvrmbuTyof9T7gvUn2A+8C3r8qs5KkhX0UOA7Yn+RAW4a52z7fTPIA8FvM3eZZkjVxT1+SNJy1+E5fkjQPoy9JHTH6ktQRoy9JHTH6ktQRoy9JHTH6ktSR/wVTPlHvVTAIQwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - StreamingMovies:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "столбец - MultipleLines:\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for column in data.columns.drop(['customerID','BeginDate', 'EndDate','MonthlyCharges', 'TotalCharges', 'end']):\n",
    "    print(f'столбец - {column}:')\n",
    "    data[column].hist()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "583b763f",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Баланс классов**<br>\n",
    "* Type: кол-во month-to-month превышает сумму кол-ва остальных классов<br>\n",
    "* PaperlessBilling: большая часть клиентов получает электронный расчетный лист<br>\n",
    "* PaymentMethod: наиболее популярный вариант - Electronic check, остальные варианты встречаются с одиноковой частотой<br>\n",
    "* gender: Мужчин и женщин +- одинаково<br>\n",
    "* SeniorCitizen: Тут самый большой дисбалан. Пенсионеров всего примерно 16%<br>\n",
    "* Partner: абонентов без супруга или супруги немного больше.<br>\n",
    "* Dependents: Лишь у трети абонентов есть дети<br>\n",
    "* InternetService: Среди абонентов наиболее популярный тип подклбчения интернета fiber optic(примерно 60%)<br>\n",
    "* OnlineSecurity: Блокировщик интересует лишь 37%<br>\n",
    "* OnlineBackup: Аналогично с предыдущим<br>\n",
    "* DeviceProtection: Также<br>\n",
    "* TechSupport: Аналогично<br>\n",
    "* StreamingTV: Примерно равны<br>\n",
    "* StreamingMovies: Примерно равны<br>\n",
    "* MultipleLines: Телефон подключен одновременно к несколькоим линиям у чуть меньшего числа пользователей"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "a02a9063",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "interval columns not set, guessing: ['MonthlyCharges', 'TotalCharges', 'SeniorCitizen', 'end']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BeginDate</th>\n",
       "      <th>EndDate</th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>gender</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>end</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>end</th>\n",
       "      <td>0.450254</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.094015</td>\n",
       "      <td>0.083398</td>\n",
       "      <td>0.214832</td>\n",
       "      <td>0.226280</td>\n",
       "      <td>0.302890</td>\n",
       "      <td>0.008581</td>\n",
       "      <td>0.086159</td>\n",
       "      <td>0.226688</td>\n",
       "      <td>0.046871</td>\n",
       "      <td>0.056621</td>\n",
       "      <td>0.132594</td>\n",
       "      <td>0.229482</td>\n",
       "      <td>0.218380</td>\n",
       "      <td>0.103652</td>\n",
       "      <td>0.200198</td>\n",
       "      <td>0.222232</td>\n",
       "      <td>0.261237</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EndDate</th>\n",
       "      <td>0.548313</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.285429</td>\n",
       "      <td>0.062936</td>\n",
       "      <td>0.169262</td>\n",
       "      <td>0.173493</td>\n",
       "      <td>0.217670</td>\n",
       "      <td>0.018274</td>\n",
       "      <td>0.090502</td>\n",
       "      <td>0.177492</td>\n",
       "      <td>0.055518</td>\n",
       "      <td>0.117099</td>\n",
       "      <td>0.129611</td>\n",
       "      <td>0.203659</td>\n",
       "      <td>0.197691</td>\n",
       "      <td>0.112812</td>\n",
       "      <td>0.164794</td>\n",
       "      <td>0.177561</td>\n",
       "      <td>0.209337</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BeginDate</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.548313</td>\n",
       "      <td>0.766249</td>\n",
       "      <td>0.081447</td>\n",
       "      <td>0.456389</td>\n",
       "      <td>0.421886</td>\n",
       "      <td>0.774207</td>\n",
       "      <td>0.011268</td>\n",
       "      <td>0.050862</td>\n",
       "      <td>0.473514</td>\n",
       "      <td>0.208564</td>\n",
       "      <td>0.192197</td>\n",
       "      <td>0.403560</td>\n",
       "      <td>0.445583</td>\n",
       "      <td>0.456002</td>\n",
       "      <td>0.399506</td>\n",
       "      <td>0.359784</td>\n",
       "      <td>0.371863</td>\n",
       "      <td>0.428109</td>\n",
       "      <td>0.450254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TotalCharges</th>\n",
       "      <td>0.774207</td>\n",
       "      <td>0.217670</td>\n",
       "      <td>0.470860</td>\n",
       "      <td>0.201703</td>\n",
       "      <td>0.335666</td>\n",
       "      <td>0.710905</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.135650</td>\n",
       "      <td>0.381958</td>\n",
       "      <td>0.084247</td>\n",
       "      <td>0.490081</td>\n",
       "      <td>0.522090</td>\n",
       "      <td>0.622445</td>\n",
       "      <td>0.640977</td>\n",
       "      <td>0.550065</td>\n",
       "      <td>0.641488</td>\n",
       "      <td>0.643210</td>\n",
       "      <td>0.573191</td>\n",
       "      <td>0.302890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MultipleLines</th>\n",
       "      <td>0.428109</td>\n",
       "      <td>0.209337</td>\n",
       "      <td>0.065498</td>\n",
       "      <td>0.252972</td>\n",
       "      <td>0.339313</td>\n",
       "      <td>0.675883</td>\n",
       "      <td>0.573191</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.221313</td>\n",
       "      <td>0.220101</td>\n",
       "      <td>0.033103</td>\n",
       "      <td>0.225383</td>\n",
       "      <td>0.151886</td>\n",
       "      <td>0.311403</td>\n",
       "      <td>0.309757</td>\n",
       "      <td>0.155739</td>\n",
       "      <td>0.392239</td>\n",
       "      <td>0.394553</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.261237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OnlineBackup</th>\n",
       "      <td>0.445583</td>\n",
       "      <td>0.203659</td>\n",
       "      <td>0.098884</td>\n",
       "      <td>0.196443</td>\n",
       "      <td>0.282475</td>\n",
       "      <td>0.629541</td>\n",
       "      <td>0.622445</td>\n",
       "      <td>0.009882</td>\n",
       "      <td>0.102065</td>\n",
       "      <td>0.219223</td>\n",
       "      <td>0.031533</td>\n",
       "      <td>0.233602</td>\n",
       "      <td>0.430425</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.458211</td>\n",
       "      <td>0.445130</td>\n",
       "      <td>0.428007</td>\n",
       "      <td>0.417170</td>\n",
       "      <td>0.311403</td>\n",
       "      <td>0.229482</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Partner</th>\n",
       "      <td>0.473514</td>\n",
       "      <td>0.177492</td>\n",
       "      <td>0.179736</td>\n",
       "      <td>0.013218</td>\n",
       "      <td>0.243008</td>\n",
       "      <td>0.203545</td>\n",
       "      <td>0.381958</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.016992</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.652122</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.221673</td>\n",
       "      <td>0.219223</td>\n",
       "      <td>0.238079</td>\n",
       "      <td>0.185993</td>\n",
       "      <td>0.193258</td>\n",
       "      <td>0.182011</td>\n",
       "      <td>0.220101</td>\n",
       "      <td>0.226688</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <td>0.421886</td>\n",
       "      <td>0.173493</td>\n",
       "      <td>0.388444</td>\n",
       "      <td>0.467812</td>\n",
       "      <td>0.399526</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.710905</td>\n",
       "      <td>0.008175</td>\n",
       "      <td>0.304985</td>\n",
       "      <td>0.203545</td>\n",
       "      <td>0.184366</td>\n",
       "      <td>0.919002</td>\n",
       "      <td>0.551621</td>\n",
       "      <td>0.629541</td>\n",
       "      <td>0.667481</td>\n",
       "      <td>0.576525</td>\n",
       "      <td>0.835340</td>\n",
       "      <td>0.833307</td>\n",
       "      <td>0.675883</td>\n",
       "      <td>0.226280</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StreamingMovies</th>\n",
       "      <td>0.371863</td>\n",
       "      <td>0.177561</td>\n",
       "      <td>0.069608</td>\n",
       "      <td>0.325551</td>\n",
       "      <td>0.378907</td>\n",
       "      <td>0.833307</td>\n",
       "      <td>0.643210</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.186141</td>\n",
       "      <td>0.182011</td>\n",
       "      <td>0.058999</td>\n",
       "      <td>0.272782</td>\n",
       "      <td>0.289097</td>\n",
       "      <td>0.417170</td>\n",
       "      <td>0.589888</td>\n",
       "      <td>0.424078</td>\n",
       "      <td>0.742479</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.394553</td>\n",
       "      <td>0.222232</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DeviceProtection</th>\n",
       "      <td>0.456002</td>\n",
       "      <td>0.197691</td>\n",
       "      <td>0.137610</td>\n",
       "      <td>0.160796</td>\n",
       "      <td>0.306866</td>\n",
       "      <td>0.667481</td>\n",
       "      <td>0.640977</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.090686</td>\n",
       "      <td>0.238079</td>\n",
       "      <td>0.010416</td>\n",
       "      <td>0.232916</td>\n",
       "      <td>0.418474</td>\n",
       "      <td>0.458211</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.499267</td>\n",
       "      <td>0.575536</td>\n",
       "      <td>0.589888</td>\n",
       "      <td>0.309757</td>\n",
       "      <td>0.218380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PaymentMethod</th>\n",
       "      <td>0.456389</td>\n",
       "      <td>0.169262</td>\n",
       "      <td>0.277462</td>\n",
       "      <td>0.370495</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.399526</td>\n",
       "      <td>0.335666</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.292725</td>\n",
       "      <td>0.243008</td>\n",
       "      <td>0.224903</td>\n",
       "      <td>0.323886</td>\n",
       "      <td>0.262911</td>\n",
       "      <td>0.282475</td>\n",
       "      <td>0.306866</td>\n",
       "      <td>0.272101</td>\n",
       "      <td>0.377209</td>\n",
       "      <td>0.378907</td>\n",
       "      <td>0.339313</td>\n",
       "      <td>0.214832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StreamingTV</th>\n",
       "      <td>0.359784</td>\n",
       "      <td>0.164794</td>\n",
       "      <td>0.066961</td>\n",
       "      <td>0.343524</td>\n",
       "      <td>0.377209</td>\n",
       "      <td>0.835340</td>\n",
       "      <td>0.641488</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.163120</td>\n",
       "      <td>0.193258</td>\n",
       "      <td>0.017331</td>\n",
       "      <td>0.272818</td>\n",
       "      <td>0.272186</td>\n",
       "      <td>0.428007</td>\n",
       "      <td>0.575536</td>\n",
       "      <td>0.422242</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.742479</td>\n",
       "      <td>0.392239</td>\n",
       "      <td>0.200198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <td>0.403560</td>\n",
       "      <td>0.129611</td>\n",
       "      <td>0.152145</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.262911</td>\n",
       "      <td>0.551621</td>\n",
       "      <td>0.522090</td>\n",
       "      <td>0.018397</td>\n",
       "      <td>0.057028</td>\n",
       "      <td>0.221673</td>\n",
       "      <td>0.124945</td>\n",
       "      <td>0.241421</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.430425</td>\n",
       "      <td>0.418474</td>\n",
       "      <td>0.528391</td>\n",
       "      <td>0.272186</td>\n",
       "      <td>0.289097</td>\n",
       "      <td>0.151886</td>\n",
       "      <td>0.132594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TechSupport</th>\n",
       "      <td>0.399506</td>\n",
       "      <td>0.112812</td>\n",
       "      <td>0.179999</td>\n",
       "      <td>0.055929</td>\n",
       "      <td>0.272101</td>\n",
       "      <td>0.576525</td>\n",
       "      <td>0.550065</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.092565</td>\n",
       "      <td>0.185993</td>\n",
       "      <td>0.096912</td>\n",
       "      <td>0.239663</td>\n",
       "      <td>0.528391</td>\n",
       "      <td>0.445130</td>\n",
       "      <td>0.499267</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.422242</td>\n",
       "      <td>0.424078</td>\n",
       "      <td>0.155739</td>\n",
       "      <td>0.103652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Type</th>\n",
       "      <td>0.766249</td>\n",
       "      <td>0.285429</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.106860</td>\n",
       "      <td>0.277462</td>\n",
       "      <td>0.388444</td>\n",
       "      <td>0.470860</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.086231</td>\n",
       "      <td>0.179736</td>\n",
       "      <td>0.147680</td>\n",
       "      <td>0.505187</td>\n",
       "      <td>0.152145</td>\n",
       "      <td>0.098884</td>\n",
       "      <td>0.137610</td>\n",
       "      <td>0.179999</td>\n",
       "      <td>0.066961</td>\n",
       "      <td>0.069608</td>\n",
       "      <td>0.065498</td>\n",
       "      <td>0.094015</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <td>0.050862</td>\n",
       "      <td>0.090502</td>\n",
       "      <td>0.086231</td>\n",
       "      <td>0.242133</td>\n",
       "      <td>0.292725</td>\n",
       "      <td>0.304985</td>\n",
       "      <td>0.135650</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.016992</td>\n",
       "      <td>0.324576</td>\n",
       "      <td>0.160702</td>\n",
       "      <td>0.057028</td>\n",
       "      <td>0.102065</td>\n",
       "      <td>0.090686</td>\n",
       "      <td>0.092565</td>\n",
       "      <td>0.163120</td>\n",
       "      <td>0.186141</td>\n",
       "      <td>0.221313</td>\n",
       "      <td>0.086159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <td>0.081447</td>\n",
       "      <td>0.062936</td>\n",
       "      <td>0.106860</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.370495</td>\n",
       "      <td>0.467812</td>\n",
       "      <td>0.201703</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.242133</td>\n",
       "      <td>0.013218</td>\n",
       "      <td>0.172593</td>\n",
       "      <td>0.231438</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.196443</td>\n",
       "      <td>0.160796</td>\n",
       "      <td>0.055929</td>\n",
       "      <td>0.343524</td>\n",
       "      <td>0.325551</td>\n",
       "      <td>0.252972</td>\n",
       "      <td>0.083398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>InternetService</th>\n",
       "      <td>0.192197</td>\n",
       "      <td>0.117099</td>\n",
       "      <td>0.505187</td>\n",
       "      <td>0.231438</td>\n",
       "      <td>0.323886</td>\n",
       "      <td>0.919002</td>\n",
       "      <td>0.490081</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.160702</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.108463</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.241421</td>\n",
       "      <td>0.233602</td>\n",
       "      <td>0.232916</td>\n",
       "      <td>0.239663</td>\n",
       "      <td>0.272818</td>\n",
       "      <td>0.272782</td>\n",
       "      <td>0.225383</td>\n",
       "      <td>0.056621</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dependents</th>\n",
       "      <td>0.208564</td>\n",
       "      <td>0.055518</td>\n",
       "      <td>0.147680</td>\n",
       "      <td>0.172593</td>\n",
       "      <td>0.224903</td>\n",
       "      <td>0.184366</td>\n",
       "      <td>0.084247</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.324576</td>\n",
       "      <td>0.652122</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.108463</td>\n",
       "      <td>0.124945</td>\n",
       "      <td>0.031533</td>\n",
       "      <td>0.010416</td>\n",
       "      <td>0.096912</td>\n",
       "      <td>0.017331</td>\n",
       "      <td>0.058999</td>\n",
       "      <td>0.033103</td>\n",
       "      <td>0.046871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender</th>\n",
       "      <td>0.011268</td>\n",
       "      <td>0.018274</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.008175</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.018397</td>\n",
       "      <td>0.009882</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.008581</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                  BeginDate   EndDate      Type  PaperlessBilling  \\\n",
       "end                0.450254  1.000000  0.094015          0.083398   \n",
       "EndDate            0.548313  1.000000  0.285429          0.062936   \n",
       "BeginDate          1.000000  0.548313  0.766249          0.081447   \n",
       "TotalCharges       0.774207  0.217670  0.470860          0.201703   \n",
       "MultipleLines      0.428109  0.209337  0.065498          0.252972   \n",
       "OnlineBackup       0.445583  0.203659  0.098884          0.196443   \n",
       "Partner            0.473514  0.177492  0.179736          0.013218   \n",
       "MonthlyCharges     0.421886  0.173493  0.388444          0.467812   \n",
       "StreamingMovies    0.371863  0.177561  0.069608          0.325551   \n",
       "DeviceProtection   0.456002  0.197691  0.137610          0.160796   \n",
       "PaymentMethod      0.456389  0.169262  0.277462          0.370495   \n",
       "StreamingTV        0.359784  0.164794  0.066961          0.343524   \n",
       "OnlineSecurity     0.403560  0.129611  0.152145          0.000000   \n",
       "TechSupport        0.399506  0.112812  0.179999          0.055929   \n",
       "Type               0.766249  0.285429  1.000000          0.106860   \n",
       "SeniorCitizen      0.050862  0.090502  0.086231          0.242133   \n",
       "PaperlessBilling   0.081447  0.062936  0.106860          1.000000   \n",
       "InternetService    0.192197  0.117099  0.505187          0.231438   \n",
       "Dependents         0.208564  0.055518  0.147680          0.172593   \n",
       "gender             0.011268  0.018274  0.000000          0.000000   \n",
       "\n",
       "                  PaymentMethod  MonthlyCharges  TotalCharges    gender  \\\n",
       "end                    0.214832        0.226280      0.302890  0.008581   \n",
       "EndDate                0.169262        0.173493      0.217670  0.018274   \n",
       "BeginDate              0.456389        0.421886      0.774207  0.011268   \n",
       "TotalCharges           0.335666        0.710905      1.000000  0.000000   \n",
       "MultipleLines          0.339313        0.675883      0.573191  0.000000   \n",
       "OnlineBackup           0.282475        0.629541      0.622445  0.009882   \n",
       "Partner                0.243008        0.203545      0.381958  0.000000   \n",
       "MonthlyCharges         0.399526        1.000000      0.710905  0.008175   \n",
       "StreamingMovies        0.378907        0.833307      0.643210  0.000000   \n",
       "DeviceProtection       0.306866        0.667481      0.640977  0.000000   \n",
       "PaymentMethod          1.000000        0.399526      0.335666  0.000000   \n",
       "StreamingTV            0.377209        0.835340      0.641488  0.000000   \n",
       "OnlineSecurity         0.262911        0.551621      0.522090  0.018397   \n",
       "TechSupport            0.272101        0.576525      0.550065  0.000000   \n",
       "Type                   0.277462        0.388444      0.470860  0.000000   \n",
       "SeniorCitizen          0.292725        0.304985      0.135650  0.000000   \n",
       "PaperlessBilling       0.370495        0.467812      0.201703  0.000000   \n",
       "InternetService        0.323886        0.919002      0.490081  0.000000   \n",
       "Dependents             0.224903        0.184366      0.084247  0.000000   \n",
       "gender                 0.000000        0.008175      0.000000  1.000000   \n",
       "\n",
       "                  SeniorCitizen   Partner  Dependents  InternetService  \\\n",
       "end                    0.086159  0.226688    0.046871         0.056621   \n",
       "EndDate                0.090502  0.177492    0.055518         0.117099   \n",
       "BeginDate              0.050862  0.473514    0.208564         0.192197   \n",
       "TotalCharges           0.135650  0.381958    0.084247         0.490081   \n",
       "MultipleLines          0.221313  0.220101    0.033103         0.225383   \n",
       "OnlineBackup           0.102065  0.219223    0.031533         0.233602   \n",
       "Partner                0.016992  1.000000    0.652122         0.000000   \n",
       "MonthlyCharges         0.304985  0.203545    0.184366         0.919002   \n",
       "StreamingMovies        0.186141  0.182011    0.058999         0.272782   \n",
       "DeviceProtection       0.090686  0.238079    0.010416         0.232916   \n",
       "PaymentMethod          0.292725  0.243008    0.224903         0.323886   \n",
       "StreamingTV            0.163120  0.193258    0.017331         0.272818   \n",
       "OnlineSecurity         0.057028  0.221673    0.124945         0.241421   \n",
       "TechSupport            0.092565  0.185993    0.096912         0.239663   \n",
       "Type                   0.086231  0.179736    0.147680         0.505187   \n",
       "SeniorCitizen          1.000000  0.016992    0.324576         0.160702   \n",
       "PaperlessBilling       0.242133  0.013218    0.172593         0.231438   \n",
       "InternetService        0.160702  0.000000    0.108463         1.000000   \n",
       "Dependents             0.324576  0.652122    1.000000         0.108463   \n",
       "gender                 0.000000  0.000000    0.000000         0.000000   \n",
       "\n",
       "                  OnlineSecurity  OnlineBackup  DeviceProtection  TechSupport  \\\n",
       "end                     0.132594      0.229482          0.218380     0.103652   \n",
       "EndDate                 0.129611      0.203659          0.197691     0.112812   \n",
       "BeginDate               0.403560      0.445583          0.456002     0.399506   \n",
       "TotalCharges            0.522090      0.622445          0.640977     0.550065   \n",
       "MultipleLines           0.151886      0.311403          0.309757     0.155739   \n",
       "OnlineBackup            0.430425      1.000000          0.458211     0.445130   \n",
       "Partner                 0.221673      0.219223          0.238079     0.185993   \n",
       "MonthlyCharges          0.551621      0.629541          0.667481     0.576525   \n",
       "StreamingMovies         0.289097      0.417170          0.589888     0.424078   \n",
       "DeviceProtection        0.418474      0.458211          1.000000     0.499267   \n",
       "PaymentMethod           0.262911      0.282475          0.306866     0.272101   \n",
       "StreamingTV             0.272186      0.428007          0.575536     0.422242   \n",
       "OnlineSecurity          1.000000      0.430425          0.418474     0.528391   \n",
       "TechSupport             0.528391      0.445130          0.499267     1.000000   \n",
       "Type                    0.152145      0.098884          0.137610     0.179999   \n",
       "SeniorCitizen           0.057028      0.102065          0.090686     0.092565   \n",
       "PaperlessBilling        0.000000      0.196443          0.160796     0.055929   \n",
       "InternetService         0.241421      0.233602          0.232916     0.239663   \n",
       "Dependents              0.124945      0.031533          0.010416     0.096912   \n",
       "gender                  0.018397      0.009882          0.000000     0.000000   \n",
       "\n",
       "                  StreamingTV  StreamingMovies  MultipleLines       end  \n",
       "end                  0.200198         0.222232       0.261237  1.000000  \n",
       "EndDate              0.164794         0.177561       0.209337  1.000000  \n",
       "BeginDate            0.359784         0.371863       0.428109  0.450254  \n",
       "TotalCharges         0.641488         0.643210       0.573191  0.302890  \n",
       "MultipleLines        0.392239         0.394553       1.000000  0.261237  \n",
       "OnlineBackup         0.428007         0.417170       0.311403  0.229482  \n",
       "Partner              0.193258         0.182011       0.220101  0.226688  \n",
       "MonthlyCharges       0.835340         0.833307       0.675883  0.226280  \n",
       "StreamingMovies      0.742479         1.000000       0.394553  0.222232  \n",
       "DeviceProtection     0.575536         0.589888       0.309757  0.218380  \n",
       "PaymentMethod        0.377209         0.378907       0.339313  0.214832  \n",
       "StreamingTV          1.000000         0.742479       0.392239  0.200198  \n",
       "OnlineSecurity       0.272186         0.289097       0.151886  0.132594  \n",
       "TechSupport          0.422242         0.424078       0.155739  0.103652  \n",
       "Type                 0.066961         0.069608       0.065498  0.094015  \n",
       "SeniorCitizen        0.163120         0.186141       0.221313  0.086159  \n",
       "PaperlessBilling     0.343524         0.325551       0.252972  0.083398  \n",
       "InternetService      0.272818         0.272782       0.225383  0.056621  \n",
       "Dependents           0.017331         0.058999       0.033103  0.046871  \n",
       "gender               0.000000         0.000000       0.000000  0.008581  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(phik_matrix(data.loc[:,\"BeginDate\":]).sort_values(by = 'end', ascending = False))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ecc7926",
   "metadata": {
    "hidden": true
   },
   "source": [
    " ### Промежуточный вывод\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "016f0352",
   "metadata": {
    "hidden": true
   },
   "source": [
    "После объединения в данных появились пропуски, которые были заполнены \"No\".\n",
    "\n",
    "Пустые строки в Total_Charges были заменены на 0.\n",
    "\n",
    "Дубликатов, пропусков и пустых строк в данных нет.\n",
    "\n",
    "Был обнаружен дисбаланс классов.\n",
    "\n",
    "BeginDate, TotalCharges, Partner, MonthlyCharges, PaymentMethod - Признаки, которые имею наибольшую корреляцию с целевым.\n",
    "\n",
    "Корреляция между полом и расторжением договора близка к 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7c301184",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Подготовка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3e6fe44",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Удаление ненужных признаков и создание новых"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "0311636c",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['customerID', 'BeginDate', 'EndDate', 'Type', 'PaperlessBilling',\n",
       "       'PaymentMethod', 'MonthlyCharges', 'TotalCharges', 'gender',\n",
       "       'SeniorCitizen', 'Partner', 'Dependents', 'InternetService',\n",
       "       'OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n",
       "       'StreamingTV', 'StreamingMovies', 'MultipleLines', 'end'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "c8140478",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data['EndDate'].replace('No', '2020-02-01', inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "511d7b34",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data['days'] = (pd.to_datetime(data['EndDate']) - pd.to_datetime(data['BeginDate'])).dt.days"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9cde5a4e",
   "metadata": {
    "hidden": true
   },
   "source": [
    "CustomerId уже бесполезен, BeginDate и EndDate создадут утечку, пол, судя по матрице корреляций вообще ни на что не влияет."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "13236b71",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "data.drop(['customerID', 'BeginDate', 'EndDate', 'gender'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "314aa5af",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Разделение данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "2b1b516f",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "features = data.drop('end', axis = 1)\n",
    "target = data['end']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "82fa432e",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "features_train, features_test, target_train, target_test = train_test_split(\n",
    "    features, target, random_state=RS, test_size=0.25\n",
    ")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "790e90bf",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Масштабирование "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "6cbb9040",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"
     ]
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "scaler.fit(features_train[['MonthlyCharges','TotalCharges','days']])\n",
    "features_train[['MonthlyCharges','TotalCharges', 'days']] = scaler.transform(features_train[['MonthlyCharges','TotalCharges', 'days']])\n",
    "features_test[['MonthlyCharges','TotalCharges', 'days']] = scaler.transform(features_test[['MonthlyCharges','TotalCharges', 'days']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edb53019",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Кодирование данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "eef83d5c",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Type', 'PaperlessBilling', 'PaymentMethod', 'MonthlyCharges',\n",
       "       'TotalCharges', 'SeniorCitizen', 'Partner', 'Dependents',\n",
       "       'InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n",
       "       'TechSupport', 'StreamingTV', 'StreamingMovies', 'MultipleLines', 'end',\n",
       "       'days'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "d649223d",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "features_train_f = features_train.copy()\n",
    "features_test_f = features_test.copy()\n",
    "enc = OrdinalEncoder()\n",
    "col = data.select_dtypes(include=['object']).columns\n",
    "enc.fit(features_train[col])\n",
    "features_train_f[col] = enc.transform(features_train[col])\n",
    "features_test_f[col] = enc.transform(features_test[col])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "e057efd6",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "\n",
    "col = features_train.select_dtypes(include=['object']).columns\n",
    "enc = OneHotEncoder(handle_unknown='error', sparse=False,drop='first')\n",
    "enc.fit(features_train[col])\n",
    "f_tr = enc.transform(features_train[col])\n",
    "f_te = enc.transform(features_test[col])\n",
    "features_train_l = pd.concat([pd.DataFrame(f_tr), features_train.drop(col,axis = 1).reset_index(drop = True)], axis = 1)\n",
    "features_test_l = pd.concat([pd.DataFrame(f_te), features_test.drop(col,axis = 1).reset_index()], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "bde63000",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "target_train_l = target_train.reset_index(drop = True)\n",
    "target_test_l = target_test.reset_index(drop = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd8d7243",
   "metadata": {
    "hidden": true
   },
   "source": [
    "### Промежуточный вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e3e489fb",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Признаки для обучения моделей не включают:**<br>\n",
    "* CustomerId<br>\n",
    "* BeginDate и EndDate создадут утечку, поэтому были удалены<br>\n",
    "* Gender, т.к. судя по матрице корреляций не имеет влияние на целевой признак\n",
    "\n",
    "**Целевой признак**\n",
    "* end\n",
    "\n",
    "**Данные были разделены на тренировочную и тестовую выборки(размер тестовой 0.25)**\n",
    "<br>\n",
    "\n",
    "\n",
    "**Масштабирование было применено к столбцам MonthlyCharges и TotalCharges**\n",
    "<br>\n",
    "\n",
    "\n",
    "**Категориальные признаки были закодированы**\n",
    "* OrdinalEncoder (features_train_f, features_test_f)<br>\n",
    "* OHE (features_train_l, features_test_l, target_train_l, target_test_l)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e30f6a0d",
   "metadata": {},
   "source": [
    "## Поиск лучшей модели и гиперпараметров"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8e622c7",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Catboost"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5742b29",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Создание pool"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "908014bb",
   "metadata": {
    "hidden": true
   },
   "outputs": [],
   "source": [
    "cat_f= [a for a in features_train_f.select_dtypes(include=['object']).columns]\n",
    "train_pool = Pool(features_train_f, \n",
    "                  target_train,\n",
    "                  cat_features = cat_f)\n",
    "test_pool = Pool(features_test_f,\n",
    "                  cat_features= cat_f)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "8648c8b0",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f386eb43d3fe4430a0a3ed49009b511b",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "MetricVisualizer(layout=Layout(align_self='stretch', height='500px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.42ms\tremaining: 569ms\n",
      "399:\ttest: 0.8399183\tbest: 0.8399718 (398)\ttotal: 382ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8399718443\n",
      "bestIteration = 398\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "0:\tloss: 0.8399718\tbest: 0.8399718 (0)\ttotal: 866ms\tremaining: 30.3s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.21ms\tremaining: 482ms\n",
      "399:\ttest: 0.8639195\tbest: 0.8639501 (397)\ttotal: 386ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8639500543\n",
      "bestIteration = 397\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "1:\tloss: 0.8639501\tbest: 0.8639501 (1)\ttotal: 1.26s\tremaining: 21.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 997us\tremaining: 398ms\n",
      "399:\ttest: 0.8991217\tbest: 0.8998944 (389)\ttotal: 397ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8998944163\n",
      "bestIteration = 389\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "2:\tloss: 0.8998944\tbest: 0.8998944 (2)\ttotal: 1.66s\tremaining: 18.3s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 412ms\n",
      "399:\ttest: 0.9118223\tbest: 0.9149363 (299)\ttotal: 387ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9149362672\n",
      "bestIteration = 299\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "3:\tloss: 0.9149363\tbest: 0.9149363 (3)\ttotal: 2.05s\tremaining: 16.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 773ms\n",
      "749:\ttest: 0.8583725\tbest: 0.8583725 (749)\ttotal: 718ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8583724809\n",
      "bestIteration = 749\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "4:\tloss: 0.8583725\tbest: 0.9149363 (3)\ttotal: 2.78s\tremaining: 17.2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.17ms\tremaining: 873ms\n",
      "749:\ttest: 0.8986626\tbest: 0.8987162 (748)\ttotal: 810ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8987161635\n",
      "bestIteration = 748\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "5:\tloss: 0.8987162\tbest: 0.9149363 (3)\ttotal: 3.6s\tremaining: 18s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.09ms\tremaining: 820ms\n",
      "749:\ttest: 0.9134137\tbest: 0.9135208 (746)\ttotal: 736ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9135208337\n",
      "bestIteration = 746\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "6:\tloss: 0.9135208\tbest: 0.9149363 (3)\ttotal: 4.34s\tremaining: 18s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.07ms\tremaining: 798ms\n",
      "749:\ttest: 0.9144390\tbest: 0.9151887 (723)\ttotal: 730ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.91518875\n",
      "bestIteration = 723\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "7:\tloss: 0.9151887\tbest: 0.9151887 (7)\ttotal: 5.08s\tremaining: 17.8s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.55s\n",
      "1000:\ttest: 0.8764518\tbest: 0.8765742 (982)\ttotal: 981ms\tremaining: 489ms\n",
      "1499:\ttest: 0.8957017\tbest: 0.8959312 (1496)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8959312023\n",
      "bestIteration = 1496\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "8:\tloss: 0.8959312\tbest: 0.9151887 (7)\ttotal: 6.58s\tremaining: 19.7s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.09ms\tremaining: 1.64s\n",
      "1000:\ttest: 0.9083717\tbest: 0.9084406 (999)\ttotal: 992ms\tremaining: 495ms\n",
      "1499:\ttest: 0.9128399\tbest: 0.9133908 (1457)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9133907668\n",
      "bestIteration = 1457\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "9:\tloss: 0.9133908\tbest: 0.9151887 (7)\ttotal: 8.1s\tremaining: 21.1s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.09ms\tremaining: 1.64s\n",
      "1000:\ttest: 0.9170173\tbest: 0.9176065 (946)\ttotal: 1.03s\tremaining: 514ms\n",
      "1499:\ttest: 0.9142171\tbest: 0.9180273 (1060)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9180272681\n",
      "bestIteration = 1060\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "10:\tloss: 0.9180273\tbest: 0.9180273 (10)\ttotal: 9.65s\tremaining: 21.9s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.02ms\tremaining: 1.53s\n",
      "1000:\ttest: 0.9157549\tbest: 0.9162905 (869)\ttotal: 974ms\tremaining: 486ms\n",
      "1499:\ttest: 0.9123349\tbest: 0.9174152 (1041)\ttotal: 1.45s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9174151887\n",
      "bestIteration = 1041\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "11:\tloss: 0.9174152\tbest: 0.9180273 (10)\ttotal: 11.1s\tremaining: 22.2s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.28ms\tremaining: 512ms\n",
      "399:\ttest: 0.8525730\tbest: 0.8527337 (391)\ttotal: 466ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8527336996\n",
      "bestIteration = 391\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "12:\tloss: 0.8527337\tbest: 0.9180273 (10)\ttotal: 11.6s\tremaining: 20.5s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.21ms\tremaining: 484ms\n",
      "399:\ttest: 0.8863598\tbest: 0.8863598 (399)\ttotal: 483ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8863598109\n",
      "bestIteration = 399\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "13:\tloss: 0.8863598\tbest: 0.9180273 (10)\ttotal: 12.1s\tremaining: 19s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.29ms\tremaining: 516ms\n",
      "399:\ttest: 0.9064896\tbest: 0.9064896 (399)\ttotal: 491ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9064895717\n",
      "bestIteration = 399\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "14:\tloss: 0.9064896\tbest: 0.9180273 (10)\ttotal: 12.6s\tremaining: 17.6s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.3ms\tremaining: 518ms\n",
      "399:\ttest: 0.9097489\tbest: 0.9112867 (378)\ttotal: 486ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9112867439\n",
      "bestIteration = 378\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "15:\tloss: 0.9112867\tbest: 0.9180273 (10)\ttotal: 13.1s\tremaining: 16.3s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.38ms\tremaining: 1.03s\n",
      "749:\ttest: 0.8784181\tbest: 0.8784181 (749)\ttotal: 918ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8784180808\n",
      "bestIteration = 749\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "16:\tloss: 0.8784181\tbest: 0.9180273 (10)\ttotal: 14s\tremaining: 15.6s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.36ms\tremaining: 1.02s\n",
      "749:\ttest: 0.9005065\tbest: 0.9029395 (689)\ttotal: 883ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9029395113\n",
      "bestIteration = 689\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "17:\tloss: 0.9029395\tbest: 0.9180273 (10)\ttotal: 14.9s\tremaining: 14.9s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.24ms\tremaining: 927ms\n",
      "749:\ttest: 0.9066579\tbest: 0.9095347 (526)\ttotal: 899ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9095346666\n",
      "bestIteration = 526\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "18:\tloss: 0.9095347\tbest: 0.9180273 (10)\ttotal: 15.8s\tremaining: 14.1s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.24ms\tremaining: 930ms\n",
      "749:\ttest: 0.9123579\tbest: 0.9133372 (686)\ttotal: 881ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9133372098\n",
      "bestIteration = 686\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "19:\tloss: 0.9133372\tbest: 0.9180273 (10)\ttotal: 16.7s\tremaining: 13.4s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.22ms\tremaining: 1.83s\n",
      "1000:\ttest: 0.8911264\tbest: 0.8911570 (998)\ttotal: 1.15s\tremaining: 571ms\n",
      "1499:\ttest: 0.9038882\tbest: 0.9040183 (1495)\ttotal: 1.71s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9040183012\n",
      "bestIteration = 1495\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "20:\tloss: 0.9040183\tbest: 0.9180273 (10)\ttotal: 18.4s\tremaining: 13.2s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.32ms\tremaining: 1.98s\n",
      "1000:\ttest: 0.9057092\tbest: 0.9057933 (998)\ttotal: 1.18s\tremaining: 589ms\n",
      "1499:\ttest: 0.9047222\tbest: 0.9076219 (1118)\ttotal: 1.76s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9076219186\n",
      "bestIteration = 1118\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "21:\tloss: 0.9076219\tbest: 0.9180273 (10)\ttotal: 20.2s\tremaining: 12.9s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.1ms\tremaining: 1.64s\n",
      "1000:\ttest: 0.9017154\tbest: 0.9095347 (526)\ttotal: 1.18s\tremaining: 590ms\n",
      "1499:\ttest: 0.8993129\tbest: 0.9095347 (526)\ttotal: 1.76s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9095346666\n",
      "bestIteration = 526\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "22:\tloss: 0.9095347\tbest: 0.9180273 (10)\ttotal: 22s\tremaining: 12.4s\n",
      "0:\ttest: 0.6670326\tbest: 0.6670326 (0)\ttotal: 1.22ms\tremaining: 1.83s\n",
      "1000:\ttest: 0.9110496\tbest: 0.9133372 (686)\ttotal: 1.17s\tremaining: 585ms\n",
      "1499:\ttest: 0.9118070\tbest: 0.9133372 (686)\ttotal: 1.76s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9133372098\n",
      "bestIteration = 686\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "23:\tloss: 0.9133372\tbest: 0.9180273 (10)\ttotal: 23.8s\tremaining: 11.9s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.53ms\tremaining: 610ms\n",
      "399:\ttest: 0.8618919\tbest: 0.8618919 (399)\ttotal: 556ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8618919374\n",
      "bestIteration = 399\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "24:\tloss: 0.8618919\tbest: 0.9180273 (10)\ttotal: 24.3s\tremaining: 10.7s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.48ms\tremaining: 592ms\n",
      "399:\ttest: 0.9037658\tbest: 0.9038806 (398)\ttotal: 573ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9038805833\n",
      "bestIteration = 398\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "25:\tloss: 0.9038806\tbest: 0.9180273 (10)\ttotal: 24.9s\tremaining: 9.58s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.43ms\tremaining: 572ms\n",
      "399:\ttest: 0.9046763\tbest: 0.9049135 (391)\ttotal: 530ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9049134673\n",
      "bestIteration = 391\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "26:\tloss: 0.9049135\tbest: 0.9180273 (10)\ttotal: 25.4s\tremaining: 8.48s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.44ms\tremaining: 574ms\n",
      "399:\ttest: 0.9020749\tbest: 0.9047911 (268)\ttotal: 584ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9047910514\n",
      "bestIteration = 268\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "27:\tloss: 0.9047911\tbest: 0.9180273 (10)\ttotal: 26s\tremaining: 7.44s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.48ms\tremaining: 1.11s\n",
      "749:\ttest: 0.8984560\tbest: 0.8985172 (748)\ttotal: 1.04s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.8985172377\n",
      "bestIteration = 748\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "28:\tloss: 0.8985172\tbest: 0.9180273 (10)\ttotal: 27.1s\tremaining: 6.54s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.55ms\tremaining: 1.16s\n",
      "749:\ttest: 0.9088002\tbest: 0.9095041 (740)\ttotal: 1.11s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9095040627\n",
      "bestIteration = 740\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "29:\tloss: 0.9095041\tbest: 0.9180273 (10)\ttotal: 28.2s\tremaining: 5.64s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.53ms\tremaining: 1.15s\n",
      "749:\ttest: 0.9024345\tbest: 0.9066120 (539)\ttotal: 1.08s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9066119876\n",
      "bestIteration = 539\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "30:\tloss: 0.9066120\tbest: 0.9180273 (10)\ttotal: 29.3s\tremaining: 4.72s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.59ms\tremaining: 1.19s\n",
      "749:\ttest: 0.8984407\tbest: 0.9047911 (268)\ttotal: 1.04s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9047910514\n",
      "bestIteration = 268\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "31:\tloss: 0.9047911\tbest: 0.9180273 (10)\ttotal: 30.3s\tremaining: 3.79s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.58ms\tremaining: 2.37s\n",
      "1000:\ttest: 0.9051200\tbest: 0.9054567 (990)\ttotal: 1.43s\tremaining: 712ms\n",
      "1499:\ttest: 0.9077443\tbest: 0.9089838 (1369)\ttotal: 2.15s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9089837952\n",
      "bestIteration = 1369\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "32:\tloss: 0.9089838\tbest: 0.9180273 (10)\ttotal: 32.5s\tremaining: 2.96s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.55ms\tremaining: 2.33s\n",
      "1000:\ttest: 0.9082187\tbest: 0.9095041 (740)\ttotal: 1.42s\tremaining: 706ms\n",
      "1499:\ttest: 0.9042784\tbest: 0.9095041 (740)\ttotal: 2.1s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9095040627\n",
      "bestIteration = 740\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "33:\tloss: 0.9095041\tbest: 0.9180273 (10)\ttotal: 34.6s\tremaining: 2.04s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.5ms\tremaining: 2.25s\n",
      "1000:\ttest: 0.9031843\tbest: 0.9066120 (539)\ttotal: 1.43s\tremaining: 712ms\n",
      "1499:\ttest: 0.8994430\tbest: 0.9066120 (539)\ttotal: 2.13s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9066119876\n",
      "bestIteration = 539\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "34:\tloss: 0.9066120\tbest: 0.9180273 (10)\ttotal: 36.8s\tremaining: 1.05s\n",
      "0:\ttest: 0.6845152\tbest: 0.6845152 (0)\ttotal: 1.49ms\tremaining: 2.24s\n",
      "1000:\ttest: 0.8979434\tbest: 0.9047911 (268)\ttotal: 1.42s\tremaining: 710ms\n",
      "1499:\ttest: 0.8977904\tbest: 0.9047911 (268)\ttotal: 2.11s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9047910514\n",
      "bestIteration = 268\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "35:\tloss: 0.9047911\tbest: 0.9180273 (10)\ttotal: 38.9s\tremaining: 0us\n",
      "Estimating final quality...\n",
      "Training on fold [0/5]\n",
      "0:\ttest: 0.6683324\tbest: 0.6683324 (0)\ttotal: 1.11ms\tremaining: 1.67s\n",
      "1000:\ttest: 0.9416481\tbest: 0.9416690 (998)\ttotal: 991ms\tremaining: 494ms\n",
      "1499:\ttest: 0.9463182\tbest: 0.9463739 (1494)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9463738864\n",
      "bestIteration = 1494\n",
      "\n",
      "Training on fold [1/5]\n",
      "0:\ttest: 0.6526577\tbest: 0.6526577 (0)\ttotal: 1.05ms\tremaining: 1.58s\n",
      "1000:\ttest: 0.9405145\tbest: 0.9412647 (921)\ttotal: 1s\tremaining: 501ms\n",
      "1499:\ttest: 0.9388528\tbest: 0.9412647 (921)\ttotal: 1.62s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9412647329\n",
      "bestIteration = 921\n",
      "\n",
      "Training on fold [2/5]\n",
      "0:\ttest: 0.6254706\tbest: 0.6254706 (0)\ttotal: 1ms\tremaining: 1.51s\n",
      "1000:\ttest: 0.9132398\tbest: 0.9140672 (971)\ttotal: 989ms\tremaining: 493ms\n",
      "1499:\ttest: 0.9253767\tbest: 0.9264144 (1455)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9264143932\n",
      "bestIteration = 1455\n",
      "\n",
      "Training on fold [3/5]\n",
      "0:\ttest: 0.6293375\tbest: 0.6293375 (0)\ttotal: 1.13ms\tremaining: 1.7s\n",
      "1000:\ttest: 0.9274591\tbest: 0.9278938 (979)\ttotal: 982ms\tremaining: 489ms\n",
      "1499:\ttest: 0.9301165\tbest: 0.9302427 (1496)\ttotal: 1.45s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9302426677\n",
      "bestIteration = 1496\n",
      "\n",
      "Training on fold [4/5]\n",
      "0:\ttest: 0.6695905\tbest: 0.6695905 (0)\ttotal: 944us\tremaining: 1.42s\n",
      "1000:\ttest: 0.9253697\tbest: 0.9255520 (995)\ttotal: 972ms\tremaining: 484ms\n",
      "1499:\ttest: 0.9237921\tbest: 0.9261409 (1074)\ttotal: 1.45s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.926140945\n",
      "bestIteration = 1074\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params = {\n",
    "    'verbose' : [1000],\n",
    "    'depth': [2,3,4],\n",
    "    'iterations': [400, 750, 1500],\n",
    "    'learning_rate' : [0.05, 0.1, 0.185 , 0.3]\n",
    "}\n",
    "\n",
    "model = CatBoostClassifier(random_state=RS, custom_metric = 'AUC', eval_metric='AUC')\n",
    "grid_search_result = model.grid_search(params, train_pool, plot=True, cv = 5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "17b75c9a",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "60a83de6e6a04019be70f97ff646c613",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "MetricVisualizer(layout=Layout(align_self='stretch', height='500px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.34ms\tremaining: 2.01s\n",
      "1000:\ttest: 0.9170173\tbest: 0.9176065 (946)\ttotal: 1s\tremaining: 500ms\n",
      "1499:\ttest: 0.9142171\tbest: 0.9180273 (1060)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9180272681\n",
      "bestIteration = 1060\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "0:\tloss: 0.9180273\tbest: 0.9180273 (0)\ttotal: 2s\tremaining: 2m 55s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.23ms\tremaining: 1.84s\n",
      "1000:\ttest: 0.9158926\tbest: 0.9182798 (869)\ttotal: 1.01s\tremaining: 506ms\n",
      "1499:\ttest: 0.9145690\tbest: 0.9182798 (869)\ttotal: 1.54s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9182797509\n",
      "bestIteration = 869\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "1:\tloss: 0.9182798\tbest: 0.9182798 (1)\ttotal: 3.55s\tremaining: 2m 34s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.09ms\tremaining: 1.64s\n",
      "1000:\ttest: 0.9155024\tbest: 0.9164741 (967)\ttotal: 997ms\tremaining: 497ms\n",
      "1499:\ttest: 0.9145461\tbest: 0.9167649 (1094)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9167648544\n",
      "bestIteration = 1094\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "2:\tloss: 0.9167649\tbest: 0.9182798 (1)\ttotal: 5.05s\tremaining: 2m 24s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 936us\tremaining: 1.4s\n",
      "1000:\ttest: 0.9166348\tbest: 0.9181879 (866)\ttotal: 993ms\tremaining: 495ms\n",
      "1499:\ttest: 0.9142018\tbest: 0.9181879 (866)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.918187939\n",
      "bestIteration = 866\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "3:\tloss: 0.9181879\tbest: 0.9182798 (1)\ttotal: 6.55s\tremaining: 2m 19s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.62s\n",
      "1000:\ttest: 0.9156708\tbest: 0.9165965 (922)\ttotal: 982ms\tremaining: 489ms\n",
      "1499:\ttest: 0.9146761\tbest: 0.9167572 (1349)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9167572034\n",
      "bestIteration = 1349\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "4:\tloss: 0.9167572\tbest: 0.9182798 (1)\ttotal: 8.03s\tremaining: 2m 14s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.1ms\tremaining: 1.64s\n",
      "1000:\ttest: 0.9165506\tbest: 0.9173234 (957)\ttotal: 1s\tremaining: 500ms\n",
      "1499:\ttest: 0.9147450\tbest: 0.9173234 (957)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9173233768\n",
      "bestIteration = 957\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "5:\tloss: 0.9173234\tbest: 0.9182798 (1)\ttotal: 9.58s\tremaining: 2m 12s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.63s\n",
      "1000:\ttest: 0.9148062\tbest: 0.9184251 (559)\ttotal: 1.02s\tremaining: 509ms\n",
      "1499:\ttest: 0.9161681\tbest: 0.9184251 (559)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9184251197\n",
      "bestIteration = 559\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "6:\tloss: 0.9184251\tbest: 0.9184251 (6)\ttotal: 11.1s\tremaining: 2m 10s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1ms\tremaining: 1.5s\n",
      "1000:\ttest: 0.9147373\tbest: 0.9155330 (813)\ttotal: 1.02s\tremaining: 511ms\n",
      "1499:\ttest: 0.9144313\tbest: 0.9160227 (1422)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9160227081\n",
      "bestIteration = 1422\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "7:\tloss: 0.9160227\tbest: 0.9184251 (6)\ttotal: 12.7s\tremaining: 2m 8s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 965us\tremaining: 1.45s\n",
      "1000:\ttest: 0.9120212\tbest: 0.9133602 (781)\ttotal: 1000ms\tremaining: 498ms\n",
      "1499:\ttest: 0.9111031\tbest: 0.9133602 (781)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9133601628\n",
      "bestIteration = 781\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "8:\tloss: 0.9133602\tbest: 0.9184251 (6)\ttotal: 14.2s\tremaining: 2m 6s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.14ms\tremaining: 1.71s\n",
      "1000:\ttest: 0.9164282\tbest: 0.9169255 (786)\ttotal: 993ms\tremaining: 495ms\n",
      "1499:\ttest: 0.9140564\tbest: 0.9174687 (1142)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9174687457\n",
      "bestIteration = 1142\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "9:\tloss: 0.9174687\tbest: 0.9184251 (6)\ttotal: 15.7s\tremaining: 2m 4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 939us\tremaining: 1.41s\n",
      "1000:\ttest: 0.9163900\tbest: 0.9180655 (800)\ttotal: 953ms\tremaining: 475ms\n",
      "1499:\ttest: 0.9156325\tbest: 0.9180655 (800)\ttotal: 1.44s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9180655231\n",
      "bestIteration = 800\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "10:\tloss: 0.9180655\tbest: 0.9184251 (6)\ttotal: 17.2s\tremaining: 2m 1s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.12ms\tremaining: 1.68s\n",
      "1000:\ttest: 0.9159462\tbest: 0.9170709 (803)\ttotal: 987ms\tremaining: 492ms\n",
      "1499:\ttest: 0.9136739\tbest: 0.9170709 (803)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9170708941\n",
      "bestIteration = 803\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "11:\tloss: 0.9170709\tbest: 0.9184251 (6)\ttotal: 18.7s\tremaining: 1m 59s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.04ms\tremaining: 1.55s\n",
      "1000:\ttest: 0.9169714\tbest: 0.9173310 (768)\ttotal: 1.06s\tremaining: 527ms\n",
      "1499:\ttest: 0.9140028\tbest: 0.9173310 (768)\ttotal: 1.56s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9173310278\n",
      "bestIteration = 768\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "12:\tloss: 0.9173310\tbest: 0.9184251 (6)\ttotal: 20.3s\tremaining: 1m 58s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.51s\n",
      "1000:\ttest: 0.9135744\tbest: 0.9156861 (874)\ttotal: 975ms\tremaining: 486ms\n",
      "1499:\ttest: 0.9114857\tbest: 0.9156861 (874)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9156860645\n",
      "bestIteration = 874\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "13:\tloss: 0.9156861\tbest: 0.9184251 (6)\ttotal: 21.7s\tremaining: 1m 56s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 951us\tremaining: 1.43s\n",
      "1000:\ttest: 0.9156937\tbest: 0.9168490 (719)\ttotal: 980ms\tremaining: 488ms\n",
      "1499:\ttest: 0.9138575\tbest: 0.9168490 (719)\ttotal: 1.45s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9168490153\n",
      "bestIteration = 719\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "14:\tloss: 0.9168490\tbest: 0.9184251 (6)\ttotal: 23.2s\tremaining: 1m 54s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 966us\tremaining: 1.45s\n",
      "1000:\ttest: 0.9161757\tbest: 0.9166730 (897)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9146149\tbest: 0.9170326 (1263)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9170326391\n",
      "bestIteration = 1263\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "15:\tloss: 0.9170326\tbest: 0.9184251 (6)\ttotal: 24.7s\tremaining: 1m 52s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 935us\tremaining: 1.4s\n",
      "1000:\ttest: 0.9132607\tbest: 0.9142171 (878)\ttotal: 962ms\tremaining: 480ms\n",
      "1499:\ttest: 0.9129088\tbest: 0.9163517 (1272)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9163517008\n",
      "bestIteration = 1272\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "16:\tloss: 0.9163517\tbest: 0.9184251 (6)\ttotal: 26.2s\tremaining: 1m 51s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.09ms\tremaining: 1.64s\n",
      "1000:\ttest: 0.9167725\tbest: 0.9174305 (996)\ttotal: 1.04s\tremaining: 518ms\n",
      "1499:\ttest: 0.9142171\tbest: 0.9178283 (1043)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9178283423\n",
      "bestIteration = 1043\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "17:\tloss: 0.9178283\tbest: 0.9184251 (6)\ttotal: 27.8s\tremaining: 1m 49s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.02ms\tremaining: 1.53s\n",
      "1000:\ttest: 0.9105369\tbest: 0.9113709 (931)\ttotal: 1.03s\tremaining: 514ms\n",
      "1499:\ttest: 0.9086012\tbest: 0.9118147 (1052)\ttotal: 1.55s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9118146624\n",
      "bestIteration = 1052\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "18:\tloss: 0.9118147\tbest: 0.9184251 (6)\ttotal: 29.3s\tremaining: 1m 48s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.54s\n",
      "1000:\ttest: 0.9146685\tbest: 0.9153265 (772)\ttotal: 1.07s\tremaining: 532ms\n",
      "1499:\ttest: 0.9112332\tbest: 0.9153265 (772)\ttotal: 1.55s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9153264678\n",
      "bestIteration = 772\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "19:\tloss: 0.9153265\tbest: 0.9184251 (6)\ttotal: 30.9s\tremaining: 1m 46s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.3ms\tremaining: 1.94s\n",
      "1000:\ttest: 0.9146838\tbest: 0.9165583 (678)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9125415\tbest: 0.9165583 (678)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9165582776\n",
      "bestIteration = 678\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "20:\tloss: 0.9165583\tbest: 0.9184251 (6)\ttotal: 32.4s\tremaining: 1m 44s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.51s\n",
      "1000:\ttest: 0.9104145\tbest: 0.9137810 (722)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9108965\tbest: 0.9137810 (722)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9137809674\n",
      "bestIteration = 722\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "21:\tloss: 0.9137810\tbest: 0.9184251 (6)\ttotal: 34s\tremaining: 1m 43s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 948us\tremaining: 1.42s\n",
      "1000:\ttest: 0.9151046\tbest: 0.9169255 (622)\ttotal: 1.02s\tremaining: 509ms\n",
      "1499:\ttest: 0.9119218\tbest: 0.9169255 (622)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9169255252\n",
      "bestIteration = 622\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "22:\tloss: 0.9169255\tbest: 0.9184251 (6)\ttotal: 35.5s\tremaining: 1m 41s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.02ms\tremaining: 1.53s\n",
      "1000:\ttest: 0.9132301\tbest: 0.9135820 (882)\ttotal: 964ms\tremaining: 480ms\n",
      "1499:\ttest: 0.9126716\tbest: 0.9146532 (1287)\ttotal: 1.44s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9146531805\n",
      "bestIteration = 1287\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "23:\tloss: 0.9146532\tbest: 0.9184251 (6)\ttotal: 37s\tremaining: 1m 40s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 992us\tremaining: 1.49s\n",
      "1000:\ttest: 0.9152117\tbest: 0.9192285 (856)\ttotal: 985ms\tremaining: 491ms\n",
      "1499:\ttest: 0.9145996\tbest: 0.9192285 (856)\ttotal: 1.47s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9192284739\n",
      "bestIteration = 856\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "24:\tloss: 0.9192285\tbest: 0.9192285 (24)\ttotal: 38.4s\tremaining: 1m 38s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.15ms\tremaining: 1.73s\n",
      "1000:\ttest: 0.9151275\tbest: 0.9175529 (886)\ttotal: 983ms\tremaining: 490ms\n",
      "1499:\ttest: 0.9139722\tbest: 0.9175529 (886)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9175529066\n",
      "bestIteration = 886\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "25:\tloss: 0.9175529\tbest: 0.9192285 (24)\ttotal: 40s\tremaining: 1m 36s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.04ms\tremaining: 1.56s\n",
      "1000:\ttest: 0.9171168\tbest: 0.9174228 (578)\ttotal: 1.01s\tremaining: 503ms\n",
      "1499:\ttest: 0.9125568\tbest: 0.9174228 (578)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9174228397\n",
      "bestIteration = 578\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "26:\tloss: 0.9174228\tbest: 0.9192285 (24)\ttotal: 41.5s\tremaining: 1m 35s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.02ms\tremaining: 1.53s\n",
      "1000:\ttest: 0.9142630\tbest: 0.9177518 (670)\ttotal: 984ms\tremaining: 490ms\n",
      "1499:\ttest: 0.9091215\tbest: 0.9177518 (670)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9177518324\n",
      "bestIteration = 670\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "27:\tloss: 0.9177518\tbest: 0.9192285 (24)\ttotal: 42.9s\tremaining: 1m 33s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 946us\tremaining: 1.42s\n",
      "1000:\ttest: 0.9085018\tbest: 0.9113786 (409)\ttotal: 969ms\tremaining: 483ms\n",
      "1499:\ttest: 0.9088920\tbest: 0.9113786 (409)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9113785558\n",
      "bestIteration = 409\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "28:\tloss: 0.9113786\tbest: 0.9192285 (24)\ttotal: 44.4s\tremaining: 1m 31s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.06ms\tremaining: 1.6s\n",
      "1000:\ttest: 0.9114551\tbest: 0.9172775 (550)\ttotal: 997ms\tremaining: 497ms\n",
      "1499:\ttest: 0.9088996\tbest: 0.9172775 (550)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9172774709\n",
      "bestIteration = 550\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "29:\tloss: 0.9172775\tbest: 0.9192285 (24)\ttotal: 45.9s\tremaining: 1m 30s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.04ms\tremaining: 1.56s\n",
      "1000:\ttest: 0.9149745\tbest: 0.9198865 (506)\ttotal: 984ms\tremaining: 491ms\n",
      "1499:\ttest: 0.9134214\tbest: 0.9198865 (506)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9198864593\n",
      "bestIteration = 506\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "30:\tloss: 0.9198865\tbest: 0.9198865 (30)\ttotal: 47.4s\tremaining: 1m 28s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.05ms\tremaining: 1.58s\n",
      "1000:\ttest: 0.9139722\tbest: 0.9152653 (907)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9138116\tbest: 0.9161681 (1217)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.916168077\n",
      "bestIteration = 1217\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "31:\tloss: 0.9161681\tbest: 0.9198865 (30)\ttotal: 48.9s\tremaining: 1m 27s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 918us\tremaining: 1.38s\n",
      "1000:\ttest: 0.9087007\tbest: 0.9099096 (718)\ttotal: 1s\tremaining: 500ms\n",
      "1499:\ttest: 0.9094276\tbest: 0.9099784 (1477)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9099784242\n",
      "bestIteration = 1477\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "32:\tloss: 0.9099784\tbest: 0.9198865 (30)\ttotal: 50.4s\tremaining: 1m 25s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.35ms\tremaining: 2.03s\n",
      "1000:\ttest: 0.9125721\tbest: 0.9130465 (993)\ttotal: 1.01s\tremaining: 502ms\n",
      "1499:\ttest: 0.9087696\tbest: 0.9130465 (993)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9130464721\n",
      "bestIteration = 993\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "33:\tloss: 0.9130465\tbest: 0.9198865 (30)\ttotal: 51.9s\tremaining: 1m 24s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 955us\tremaining: 1.43s\n",
      "1000:\ttest: 0.9135285\tbest: 0.9181726 (446)\ttotal: 971ms\tremaining: 484ms\n",
      "1499:\ttest: 0.9132301\tbest: 0.9181726 (446)\ttotal: 1.44s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.918172637\n",
      "bestIteration = 446\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "34:\tloss: 0.9181726\tbest: 0.9198865 (30)\ttotal: 53.4s\tremaining: 1m 22s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.07ms\tremaining: 1.6s\n",
      "1000:\ttest: 0.9197564\tbest: 0.9208428 (402)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9131918\tbest: 0.9208428 (402)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9208428333\n",
      "bestIteration = 402\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "35:\tloss: 0.9208428\tbest: 0.9208428 (35)\ttotal: 54.9s\tremaining: 1m 20s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.55s\n",
      "1000:\ttest: 0.9134979\tbest: 0.9181803 (660)\ttotal: 998ms\tremaining: 498ms\n",
      "1499:\ttest: 0.9140794\tbest: 0.9181803 (660)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.918180288\n",
      "bestIteration = 660\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "36:\tloss: 0.9181803\tbest: 0.9208428 (35)\ttotal: 56.4s\tremaining: 1m 19s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.04ms\tremaining: 1.55s\n",
      "1000:\ttest: 0.9131077\tbest: 0.9145384 (506)\ttotal: 972ms\tremaining: 485ms\n",
      "1499:\ttest: 0.9104757\tbest: 0.9145384 (506)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9145384156\n",
      "bestIteration = 506\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "37:\tloss: 0.9145384\tbest: 0.9208428 (35)\ttotal: 57.9s\tremaining: 1m 17s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.09ms\tremaining: 1.64s\n",
      "1000:\ttest: 0.9107894\tbest: 0.9112485 (723)\ttotal: 995ms\tremaining: 496ms\n",
      "1499:\ttest: 0.9122661\tbest: 0.9136432 (1265)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9136432495\n",
      "bestIteration = 1265\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "38:\tloss: 0.9136432\tbest: 0.9208428 (35)\ttotal: 59.4s\tremaining: 1m 16s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.63s\n",
      "1000:\ttest: 0.9139569\tbest: 0.9151046 (434)\ttotal: 1.02s\tremaining: 510ms\n",
      "1499:\ttest: 0.9105905\tbest: 0.9152194 (1116)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.915219354\n",
      "bestIteration = 1116\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "39:\tloss: 0.9152194\tbest: 0.9208428 (35)\ttotal: 1m\tremaining: 1m 14s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.62s\n",
      "1000:\ttest: 0.9128935\tbest: 0.9206745 (493)\ttotal: 1.01s\tremaining: 503ms\n",
      "1499:\ttest: 0.9094735\tbest: 0.9206745 (493)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9206745115\n",
      "bestIteration = 493\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "40:\tloss: 0.9206745\tbest: 0.9208428 (35)\ttotal: 1m 2s\tremaining: 1m 13s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.62s\n",
      "1000:\ttest: 0.9113326\tbest: 0.9143701 (477)\ttotal: 986ms\tremaining: 492ms\n",
      "1499:\ttest: 0.9105752\tbest: 0.9143701 (477)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9143700938\n",
      "bestIteration = 477\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "41:\tloss: 0.9143701\tbest: 0.9208428 (35)\ttotal: 1m 3s\tremaining: 1m 11s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.17ms\tremaining: 1.76s\n",
      "1000:\ttest: 0.9121896\tbest: 0.9178436 (443)\ttotal: 1000ms\tremaining: 498ms\n",
      "1499:\ttest: 0.9091827\tbest: 0.9178436 (443)\ttotal: 1.47s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9178436443\n",
      "bestIteration = 443\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "42:\tloss: 0.9178436\tbest: 0.9208428 (35)\ttotal: 1m 5s\tremaining: 1m 9s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 945us\tremaining: 1.42s\n",
      "1000:\ttest: 0.9112714\tbest: 0.9189301 (394)\ttotal: 963ms\tremaining: 480ms\n",
      "1499:\ttest: 0.9075072\tbest: 0.9189301 (394)\ttotal: 1.47s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9189300852\n",
      "bestIteration = 394\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "43:\tloss: 0.9189301\tbest: 0.9208428 (35)\ttotal: 1m 6s\tremaining: 1m 8s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.06ms\tremaining: 1.59s\n",
      "1000:\ttest: 0.9108506\tbest: 0.9169255 (466)\ttotal: 989ms\tremaining: 493ms\n",
      "1499:\ttest: 0.9107818\tbest: 0.9169255 (466)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9169255252\n",
      "bestIteration = 466\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "44:\tloss: 0.9169255\tbest: 0.9208428 (35)\ttotal: 1m 8s\tremaining: 1m 6s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.55s\n",
      "1000:\ttest: 0.9115775\tbest: 0.9156555 (474)\ttotal: 988ms\tremaining: 492ms\n",
      "1499:\ttest: 0.9091674\tbest: 0.9156555 (474)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9156554605\n",
      "bestIteration = 474\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "45:\tloss: 0.9156555\tbest: 0.9208428 (35)\ttotal: 1m 9s\tremaining: 1m 5s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.02ms\tremaining: 1.54s\n",
      "1000:\ttest: 0.9141941\tbest: 0.9203226 (531)\ttotal: 968ms\tremaining: 483ms\n",
      "1499:\ttest: 0.9096188\tbest: 0.9203226 (531)\ttotal: 1.47s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9203225658\n",
      "bestIteration = 531\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "46:\tloss: 0.9203226\tbest: 0.9208428 (35)\ttotal: 1m 11s\tremaining: 1m 3s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.52s\n",
      "1000:\ttest: 0.9127098\tbest: 0.9169485 (401)\ttotal: 1.01s\tremaining: 503ms\n",
      "1499:\ttest: 0.9089914\tbest: 0.9169485 (401)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9169484782\n",
      "bestIteration = 401\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "47:\tloss: 0.9169485\tbest: 0.9208428 (35)\ttotal: 1m 12s\tremaining: 1m 2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 994us\tremaining: 1.49s\n",
      "1000:\ttest: 0.9180961\tbest: 0.9241022 (481)\ttotal: 973ms\tremaining: 485ms\n",
      "1499:\ttest: 0.9150357\tbest: 0.9241022 (481)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.924102156\n",
      "bestIteration = 481\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "48:\tloss: 0.9241022\tbest: 0.9241022 (48)\ttotal: 1m 14s\tremaining: 1m\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.21ms\tremaining: 1.82s\n",
      "1000:\ttest: 0.9059999\tbest: 0.9164359 (509)\ttotal: 1.04s\tremaining: 521ms\n",
      "1499:\ttest: 0.9068951\tbest: 0.9164359 (509)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9164358617\n",
      "bestIteration = 509\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "49:\tloss: 0.9164359\tbest: 0.9241022 (48)\ttotal: 1m 15s\tremaining: 59.2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 951us\tremaining: 1.43s\n",
      "1000:\ttest: 0.9128858\tbest: 0.9150969 (610)\ttotal: 1s\tremaining: 500ms\n",
      "1499:\ttest: 0.9106976\tbest: 0.9150969 (610)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9150969381\n",
      "bestIteration = 610\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "50:\tloss: 0.9150969\tbest: 0.9241022 (48)\ttotal: 1m 17s\tremaining: 57.7s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.06ms\tremaining: 1.59s\n",
      "1000:\ttest: 0.9134520\tbest: 0.9199171 (277)\ttotal: 1.02s\tremaining: 509ms\n",
      "1499:\ttest: 0.9137504\tbest: 0.9199171 (277)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9199170632\n",
      "bestIteration = 277\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "51:\tloss: 0.9199171\tbest: 0.9241022 (48)\ttotal: 1m 18s\tremaining: 56.2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.13ms\tremaining: 1.69s\n",
      "1000:\ttest: 0.9147373\tbest: 0.9178360 (398)\ttotal: 1.02s\tremaining: 511ms\n",
      "1499:\ttest: 0.9137045\tbest: 0.9178360 (398)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9178359933\n",
      "bestIteration = 398\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "52:\tloss: 0.9178360\tbest: 0.9241022 (48)\ttotal: 1m 20s\tremaining: 54.7s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.62s\n",
      "1000:\ttest: 0.9137045\tbest: 0.9152729 (344)\ttotal: 1s\tremaining: 500ms\n",
      "1499:\ttest: 0.9111184\tbest: 0.9156478 (1058)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9156478095\n",
      "bestIteration = 1058\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "53:\tloss: 0.9156478\tbest: 0.9241022 (48)\ttotal: 1m 22s\tremaining: 53.2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.05ms\tremaining: 1.57s\n",
      "1000:\ttest: 0.9169714\tbest: 0.9185552 (933)\ttotal: 987ms\tremaining: 492ms\n",
      "1499:\ttest: 0.9138192\tbest: 0.9185552 (933)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9185551866\n",
      "bestIteration = 933\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "54:\tloss: 0.9185552\tbest: 0.9241022 (48)\ttotal: 1m 23s\tremaining: 51.6s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.52s\n",
      "1000:\ttest: 0.9107894\tbest: 0.9168567 (548)\ttotal: 1.04s\tremaining: 517ms\n",
      "1499:\ttest: 0.9089838\tbest: 0.9168567 (548)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9168566663\n",
      "bestIteration = 548\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "55:\tloss: 0.9168567\tbest: 0.9241022 (48)\ttotal: 1m 25s\tremaining: 50.1s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 995us\tremaining: 1.49s\n",
      "1000:\ttest: 0.9084329\tbest: 0.9183104 (437)\ttotal: 979ms\tremaining: 488ms\n",
      "1499:\ttest: 0.9089302\tbest: 0.9183104 (437)\ttotal: 1.45s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9183103549\n",
      "bestIteration = 437\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "56:\tloss: 0.9183104\tbest: 0.9241022 (48)\ttotal: 1m 26s\tremaining: 48.6s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.54s\n",
      "1000:\ttest: 0.9083105\tbest: 0.9139875 (657)\ttotal: 989ms\tremaining: 493ms\n",
      "1499:\ttest: 0.9095270\tbest: 0.9139875 (657)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9139875442\n",
      "bestIteration = 657\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "57:\tloss: 0.9139875\tbest: 0.9241022 (48)\ttotal: 1m 28s\tremaining: 47.1s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.06ms\tremaining: 1.59s\n",
      "1000:\ttest: 0.9126869\tbest: 0.9153571 (618)\ttotal: 956ms\tremaining: 477ms\n",
      "1499:\ttest: 0.9093128\tbest: 0.9153571 (618)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9153570718\n",
      "bestIteration = 618\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "58:\tloss: 0.9153571\tbest: 0.9241022 (48)\ttotal: 1m 29s\tremaining: 45.5s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.11ms\tremaining: 1.66s\n",
      "1000:\ttest: 0.9104451\tbest: 0.9143777 (737)\ttotal: 1.05s\tremaining: 523ms\n",
      "1499:\ttest: 0.9053878\tbest: 0.9143777 (737)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9143777448\n",
      "bestIteration = 737\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "59:\tloss: 0.9143777\tbest: 0.9241022 (48)\ttotal: 1m 31s\tremaining: 44s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.52s\n",
      "1000:\ttest: 0.9129317\tbest: 0.9236048 (293)\ttotal: 1.02s\tremaining: 507ms\n",
      "1499:\ttest: 0.9114015\tbest: 0.9236048 (293)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9236048415\n",
      "bestIteration = 293\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "60:\tloss: 0.9236048\tbest: 0.9241022 (48)\ttotal: 1m 32s\tremaining: 42.5s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.17ms\tremaining: 1.75s\n",
      "1000:\ttest: 0.9106976\tbest: 0.9175988 (320)\ttotal: 1.01s\tremaining: 502ms\n",
      "1499:\ttest: 0.9052501\tbest: 0.9175988 (320)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9175988126\n",
      "bestIteration = 320\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "61:\tloss: 0.9175988\tbest: 0.9241022 (48)\ttotal: 1m 34s\tremaining: 41s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.52s\n",
      "1000:\ttest: 0.9124497\tbest: 0.9142018 (978)\ttotal: 1.02s\tremaining: 507ms\n",
      "1499:\ttest: 0.9125033\tbest: 0.9152194 (1223)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.915219354\n",
      "bestIteration = 1223\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "62:\tloss: 0.9152194\tbest: 0.9241022 (48)\ttotal: 1m 35s\tremaining: 39.5s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.1ms\tremaining: 1.66s\n",
      "1000:\ttest: 0.9064819\tbest: 0.9098178 (482)\ttotal: 1.01s\tremaining: 505ms\n",
      "1499:\ttest: 0.9078744\tbest: 0.9098178 (482)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9098177534\n",
      "bestIteration = 482\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "63:\tloss: 0.9098178\tbest: 0.9241022 (48)\ttotal: 1m 37s\tremaining: 38s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.05ms\tremaining: 1.58s\n",
      "1000:\ttest: 0.9107818\tbest: 0.9146991 (491)\ttotal: 1.01s\tremaining: 506ms\n",
      "1499:\ttest: 0.9111720\tbest: 0.9146991 (491)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9146990865\n",
      "bestIteration = 491\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "64:\tloss: 0.9146991\tbest: 0.9241022 (48)\ttotal: 1m 38s\tremaining: 36.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 929us\tremaining: 1.39s\n",
      "1000:\ttest: 0.9078897\tbest: 0.9144849 (514)\ttotal: 980ms\tremaining: 488ms\n",
      "1499:\ttest: 0.9086548\tbest: 0.9144849 (514)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9144848587\n",
      "bestIteration = 514\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "65:\tloss: 0.9144849\tbest: 0.9241022 (48)\ttotal: 1m 40s\tremaining: 34.9s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.04ms\tremaining: 1.56s\n",
      "1000:\ttest: 0.9147985\tbest: 0.9190755 (776)\ttotal: 980ms\tremaining: 489ms\n",
      "1499:\ttest: 0.9111873\tbest: 0.9190755 (776)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9190754541\n",
      "bestIteration = 776\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "66:\tloss: 0.9190755\tbest: 0.9241022 (48)\ttotal: 1m 41s\tremaining: 33.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 950us\tremaining: 1.43s\n",
      "1000:\ttest: 0.9109501\tbest: 0.9160610 (288)\ttotal: 1.03s\tremaining: 513ms\n",
      "1499:\ttest: 0.9048829\tbest: 0.9160610 (288)\ttotal: 1.54s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9160609631\n",
      "bestIteration = 288\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "67:\tloss: 0.9160610\tbest: 0.9241022 (48)\ttotal: 1m 43s\tremaining: 31.9s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.55s\n",
      "1000:\ttest: 0.9090067\tbest: 0.9163440 (268)\ttotal: 999ms\tremaining: 498ms\n",
      "1499:\ttest: 0.9040948\tbest: 0.9163440 (268)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9163440498\n",
      "bestIteration = 268\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "68:\tloss: 0.9163440\tbest: 0.9241022 (48)\ttotal: 1m 44s\tremaining: 30.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.26ms\tremaining: 1.89s\n",
      "1000:\ttest: 0.9136739\tbest: 0.9208964 (398)\ttotal: 1.11s\tremaining: 552ms\n",
      "1499:\ttest: 0.9126945\tbest: 0.9208964 (398)\ttotal: 1.59s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9208963903\n",
      "bestIteration = 398\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "69:\tloss: 0.9208964\tbest: 0.9241022 (48)\ttotal: 1m 46s\tremaining: 28.9s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 926us\tremaining: 1.39s\n",
      "1000:\ttest: 0.9138116\tbest: 0.9157932 (872)\ttotal: 1.03s\tremaining: 515ms\n",
      "1499:\ttest: 0.9090833\tbest: 0.9157932 (872)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9157931784\n",
      "bestIteration = 872\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "70:\tloss: 0.9157932\tbest: 0.9241022 (48)\ttotal: 1m 47s\tremaining: 27.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.02ms\tremaining: 1.52s\n",
      "1000:\ttest: 0.9108277\tbest: 0.9164206 (444)\ttotal: 1.03s\tremaining: 516ms\n",
      "1499:\ttest: 0.9056786\tbest: 0.9164206 (444)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9164205597\n",
      "bestIteration = 444\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "71:\tloss: 0.9164206\tbest: 0.9241022 (48)\ttotal: 1m 49s\tremaining: 25.8s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.15ms\tremaining: 1.72s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 1.02s\tremaining: 507ms\n",
      "1499:\ttest: 0.9137045\tbest: 0.9266346 (541)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "72:\tloss: 0.9266346\tbest: 0.9266346 (72)\ttotal: 1m 50s\tremaining: 24.3s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 988us\tremaining: 1.48s\n",
      "1000:\ttest: 0.9158773\tbest: 0.9171474 (217)\ttotal: 1.01s\tremaining: 504ms\n",
      "1499:\ttest: 0.9118376\tbest: 0.9171474 (217)\ttotal: 1.67s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.917147404\n",
      "bestIteration = 217\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "73:\tloss: 0.9171474\tbest: 0.9266346 (72)\ttotal: 1m 52s\tremaining: 22.8s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.07ms\tremaining: 1.61s\n",
      "1000:\ttest: 0.9115316\tbest: 0.9195498 (506)\ttotal: 1.01s\tremaining: 502ms\n",
      "1499:\ttest: 0.9102309\tbest: 0.9195498 (506)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9195498156\n",
      "bestIteration = 506\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "74:\tloss: 0.9195498\tbest: 0.9266346 (72)\ttotal: 1m 54s\tremaining: 21.3s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.13ms\tremaining: 1.7s\n",
      "1000:\ttest: 0.9149669\tbest: 0.9259422 (260)\ttotal: 985ms\tremaining: 491ms\n",
      "1499:\ttest: 0.9113097\tbest: 0.9259422 (260)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9259422197\n",
      "bestIteration = 260\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "75:\tloss: 0.9259422\tbest: 0.9266346 (72)\ttotal: 1m 55s\tremaining: 19.8s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 964us\tremaining: 1.45s\n",
      "1000:\ttest: 0.9072853\tbest: 0.9121896 (461)\ttotal: 1.02s\tremaining: 508ms\n",
      "1499:\ttest: 0.9049135\tbest: 0.9121896 (461)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.912189561\n",
      "bestIteration = 461\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "76:\tloss: 0.9121896\tbest: 0.9266346 (72)\ttotal: 1m 57s\tremaining: 18.3s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 989us\tremaining: 1.48s\n",
      "1000:\ttest: 0.9129853\tbest: 0.9166883 (312)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9105829\tbest: 0.9166883 (312)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9166883445\n",
      "bestIteration = 312\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "77:\tloss: 0.9166883\tbest: 0.9266346 (72)\ttotal: 1m 58s\tremaining: 16.7s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.63s\n",
      "1000:\ttest: 0.9081651\tbest: 0.9120671 (571)\ttotal: 1.01s\tremaining: 505ms\n",
      "1499:\ttest: 0.9051736\tbest: 0.9120671 (571)\ttotal: 1.51s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9120671451\n",
      "bestIteration = 571\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "78:\tloss: 0.9120671\tbest: 0.9266346 (72)\ttotal: 2m\tremaining: 15.2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.06ms\tremaining: 1.6s\n",
      "1000:\ttest: 0.9097183\tbest: 0.9133984 (456)\ttotal: 1.03s\tremaining: 515ms\n",
      "1499:\ttest: 0.9078668\tbest: 0.9133984 (456)\ttotal: 1.53s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9133984178\n",
      "bestIteration = 456\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "79:\tloss: 0.9133984\tbest: 0.9266346 (72)\ttotal: 2m 1s\tremaining: 13.7s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 987us\tremaining: 1.48s\n",
      "1000:\ttest: 0.9112102\tbest: 0.9200471 (283)\ttotal: 982ms\tremaining: 490ms\n",
      "1499:\ttest: 0.9118223\tbest: 0.9200471 (283)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9200471301\n",
      "bestIteration = 283\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "80:\tloss: 0.9200471\tbest: 0.9266346 (72)\ttotal: 2m 3s\tremaining: 12.2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 981us\tremaining: 1.47s\n",
      "1000:\ttest: 0.9088537\tbest: 0.9114474 (372)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9036511\tbest: 0.9114474 (372)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9114474147\n",
      "bestIteration = 372\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "81:\tloss: 0.9114474\tbest: 0.9266346 (72)\ttotal: 2m 4s\tremaining: 10.7s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.52s\n",
      "1000:\ttest: 0.9090067\tbest: 0.9154795 (324)\ttotal: 996ms\tremaining: 497ms\n",
      "1499:\ttest: 0.9051736\tbest: 0.9154795 (324)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9154794877\n",
      "bestIteration = 324\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "82:\tloss: 0.9154795\tbest: 0.9266346 (72)\ttotal: 2m 6s\tremaining: 9.13s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 975us\tremaining: 1.46s\n",
      "1000:\ttest: 0.9125721\tbest: 0.9142783 (857)\ttotal: 981ms\tremaining: 489ms\n",
      "1499:\ttest: 0.9076678\tbest: 0.9142783 (857)\ttotal: 1.45s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9142782819\n",
      "bestIteration = 857\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "83:\tloss: 0.9142783\tbest: 0.9266346 (72)\ttotal: 2m 7s\tremaining: 7.61s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.43ms\tremaining: 2.14s\n",
      "1000:\ttest: 0.9127557\tbest: 0.9154718 (842)\ttotal: 965ms\tremaining: 481ms\n",
      "1499:\ttest: 0.9112332\tbest: 0.9154718 (842)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9154718367\n",
      "bestIteration = 842\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "84:\tloss: 0.9154718\tbest: 0.9266346 (72)\ttotal: 2m 9s\tremaining: 6.08s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.55s\n",
      "1000:\ttest: 0.9107741\tbest: 0.9157855 (272)\ttotal: 973ms\tremaining: 485ms\n",
      "1499:\ttest: 0.9049594\tbest: 0.9157855 (272)\ttotal: 1.47s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9157855274\n",
      "bestIteration = 272\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "85:\tloss: 0.9157855\tbest: 0.9266346 (72)\ttotal: 2m 10s\tremaining: 4.56s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.08ms\tremaining: 1.62s\n",
      "1000:\ttest: 0.9108965\tbest: 0.9125033 (827)\ttotal: 977ms\tremaining: 487ms\n",
      "1499:\ttest: 0.9081345\tbest: 0.9127634 (1135)\ttotal: 1.45s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9127633854\n",
      "bestIteration = 1135\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "86:\tloss: 0.9127634\tbest: 0.9266346 (72)\ttotal: 2m 12s\tremaining: 3.04s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.01ms\tremaining: 1.52s\n",
      "1000:\ttest: 0.9141559\tbest: 0.9160304 (417)\ttotal: 974ms\tremaining: 486ms\n",
      "1499:\ttest: 0.9059310\tbest: 0.9160304 (417)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9160303591\n",
      "bestIteration = 417\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "87:\tloss: 0.9160304\tbest: 0.9266346 (72)\ttotal: 2m 13s\tremaining: 1.52s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.06ms\tremaining: 1.59s\n",
      "1000:\ttest: 0.9098025\tbest: 0.9162752 (402)\ttotal: 1.03s\tremaining: 512ms\n",
      "1499:\ttest: 0.9063748\tbest: 0.9162752 (402)\ttotal: 1.52s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9162751909\n",
      "bestIteration = 402\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "88:\tloss: 0.9162752\tbest: 0.9266346 (72)\ttotal: 2m 15s\tremaining: 0us\n",
      "Estimating final quality...\n",
      "Training on fold [0/5]\n",
      "0:\ttest: 0.6683324\tbest: 0.6683324 (0)\ttotal: 954us\tremaining: 1.43s\n",
      "1000:\ttest: 0.9463530\tbest: 0.9473344 (919)\ttotal: 1s\tremaining: 499ms\n",
      "1499:\ttest: 0.9464992\tbest: 0.9477241 (1316)\ttotal: 1.49s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9477241091\n",
      "bestIteration = 1316\n",
      "\n",
      "Training on fold [1/5]\n",
      "0:\ttest: 0.6526577\tbest: 0.6526577 (0)\ttotal: 1.06ms\tremaining: 1.59s\n",
      "1000:\ttest: 0.9326897\tbest: 0.9419168 (587)\ttotal: 986ms\tremaining: 491ms\n",
      "1499:\ttest: 0.9309649\tbest: 0.9419168 (587)\ttotal: 1.47s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9419168016\n",
      "bestIteration = 587\n",
      "\n",
      "Training on fold [2/5]\n",
      "0:\ttest: 0.6254706\tbest: 0.6254706 (0)\ttotal: 961us\tremaining: 1.44s\n",
      "1000:\ttest: 0.9273119\tbest: 0.9298991 (825)\ttotal: 991ms\tremaining: 494ms\n",
      "1499:\ttest: 0.9250962\tbest: 0.9298991 (825)\ttotal: 1.48s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9298991046\n",
      "bestIteration = 825\n",
      "\n",
      "Training on fold [3/5]\n",
      "0:\ttest: 0.6293375\tbest: 0.6293375 (0)\ttotal: 1.08ms\tremaining: 1.62s\n",
      "1000:\ttest: 0.9302567\tbest: 0.9329561 (760)\ttotal: 993ms\tremaining: 495ms\n",
      "1499:\ttest: 0.9269122\tbest: 0.9329561 (760)\ttotal: 1.5s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9329561151\n",
      "bestIteration = 760\n",
      "\n",
      "Training on fold [4/5]\n",
      "0:\ttest: 0.6695905\tbest: 0.6695905 (0)\ttotal: 1.02ms\tremaining: 1.53s\n",
      "1000:\ttest: 0.9112976\tbest: 0.9235046 (350)\ttotal: 979ms\tremaining: 488ms\n",
      "1499:\ttest: 0.9090189\tbest: 0.9235046 (350)\ttotal: 1.46s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9235046241\n",
      "bestIteration = 350\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params = {\n",
    "    'verbose' : [1000],\n",
    "    'depth': [2],\n",
    "    'iterations': [1500],\n",
    "    'learning_rate' : [i/1000 for i in range(185,450,3)]\n",
    "}\n",
    "\n",
    "model = CatBoostClassifier(random_state=RS, custom_metric = 'AUC', eval_metric='AUC')\n",
    "grid_search_result = model.grid_search(params, train_pool, plot=True, cv = 5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "fcb38998",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "0e5a826e50ff4b989077a8f5a51d212a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "MetricVisualizer(layout=Layout(align_self='stretch', height='500px'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.42ms\tremaining: 710ms\n",
      "499:\ttest: 0.9242016\tbest: 0.9242016 (499)\ttotal: 511ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9242016189\n",
      "bestIteration = 499\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "0:\tloss: 0.9242016\tbest: 0.9242016 (0)\ttotal: 1.08s\tremaining: 20.6s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.05ms\tremaining: 580ms\n",
      "549:\ttest: 0.9252422\tbest: 0.9266346 (541)\ttotal: 530ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "1:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 1.62s\tremaining: 14.6s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 981us\tremaining: 588ms\n",
      "599:\ttest: 0.9219828\tbest: 0.9266346 (541)\ttotal: 567ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "2:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 2.2s\tremaining: 12.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.21ms\tremaining: 786ms\n",
      "649:\ttest: 0.9227097\tbest: 0.9266346 (541)\ttotal: 638ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "3:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 2.84s\tremaining: 11.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.07ms\tremaining: 751ms\n",
      "699:\ttest: 0.9222353\tbest: 0.9266346 (541)\ttotal: 667ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "4:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 3.52s\tremaining: 10.6s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 963us\tremaining: 722ms\n",
      "749:\ttest: 0.9221588\tbest: 0.9266346 (541)\ttotal: 771ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "5:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 4.3s\tremaining: 10s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 959us\tremaining: 767ms\n",
      "799:\ttest: 0.9231917\tbest: 0.9266346 (541)\ttotal: 779ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "6:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 5.08s\tremaining: 9.45s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.14ms\tremaining: 970ms\n",
      "849:\ttest: 0.9230234\tbest: 0.9266346 (541)\ttotal: 892ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "7:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 5.99s\tremaining: 8.98s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.13ms\tremaining: 1.02s\n",
      "899:\ttest: 0.9210800\tbest: 0.9266346 (541)\ttotal: 878ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "8:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 6.88s\tremaining: 8.4s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.05ms\tremaining: 995ms\n",
      "949:\ttest: 0.9212254\tbest: 0.9266346 (541)\ttotal: 936ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "9:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 7.82s\tremaining: 7.82s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.05ms\tremaining: 1.05s\n",
      "999:\ttest: 0.9177824\tbest: 0.9266346 (541)\ttotal: 992ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "10:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 8.83s\tremaining: 7.22s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 997us\tremaining: 1.05s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 992ms\tremaining: 48.6ms\n",
      "1049:\ttest: 0.9179278\tbest: 0.9266346 (541)\ttotal: 1.05s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "11:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 9.89s\tremaining: 6.59s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.09ms\tremaining: 1.19s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 1.01s\tremaining: 99.7ms\n",
      "1099:\ttest: 0.9183180\tbest: 0.9266346 (541)\ttotal: 1.11s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "12:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 11s\tremaining: 5.93s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.14ms\tremaining: 1.31s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 962ms\tremaining: 143ms\n",
      "1149:\ttest: 0.9176524\tbest: 0.9266346 (541)\ttotal: 1.1s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "13:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 12.1s\tremaining: 5.2s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.03ms\tremaining: 1.23s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 975ms\tremaining: 194ms\n",
      "1199:\ttest: 0.9166195\tbest: 0.9266346 (541)\ttotal: 1.16s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "14:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 13.3s\tremaining: 4.43s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.15ms\tremaining: 1.43s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 996ms\tremaining: 248ms\n",
      "1249:\ttest: 0.9163287\tbest: 0.9266346 (541)\ttotal: 1.24s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "15:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 14.6s\tremaining: 3.64s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.12ms\tremaining: 1.45s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 958ms\tremaining: 286ms\n",
      "1299:\ttest: 0.9165353\tbest: 0.9266346 (541)\ttotal: 1.28s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "16:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 15.9s\tremaining: 2.8s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.15ms\tremaining: 1.54s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 984ms\tremaining: 343ms\n",
      "1349:\ttest: 0.9159079\tbest: 0.9266346 (541)\ttotal: 1.33s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "17:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 17.2s\tremaining: 1.91s\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 1.06ms\tremaining: 1.48s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 964ms\tremaining: 384ms\n",
      "1399:\ttest: 0.9146991\tbest: 0.9266346 (541)\ttotal: 1.36s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "18:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 18.6s\tremaining: 978ms\n",
      "0:\ttest: 0.6179362\tbest: 0.6179362 (0)\ttotal: 959us\tremaining: 1.39s\n",
      "1000:\ttest: 0.9177977\tbest: 0.9266346 (541)\ttotal: 953ms\tremaining: 428ms\n",
      "1449:\ttest: 0.9143548\tbest: 0.9266346 (541)\ttotal: 1.38s\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9266346345\n",
      "bestIteration = 541\n",
      "\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "Metric AUC is not calculated on train by default. To calculate this metric on train, add hints=skip_train~false to metric parameters.\n",
      "19:\tloss: 0.9266346\tbest: 0.9266346 (1)\ttotal: 20s\tremaining: 0us\n",
      "Estimating final quality...\n",
      "Training on fold [0/5]\n",
      "0:\ttest: 0.6683324\tbest: 0.6683324 (0)\ttotal: 982us\tremaining: 540ms\n",
      "549:\ttest: 0.9440354\tbest: 0.9440771 (547)\ttotal: 587ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9440771158\n",
      "bestIteration = 547\n",
      "\n",
      "Training on fold [1/5]\n",
      "0:\ttest: 0.6526577\tbest: 0.6526577 (0)\ttotal: 1.01ms\tremaining: 556ms\n",
      "549:\ttest: 0.9409983\tbest: 0.9417696 (513)\ttotal: 541ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9417695603\n",
      "bestIteration = 513\n",
      "\n",
      "Training on fold [2/5]\n",
      "0:\ttest: 0.6254706\tbest: 0.6254706 (0)\ttotal: 982us\tremaining: 539ms\n",
      "549:\ttest: 0.9134011\tbest: 0.9175589 (393)\ttotal: 551ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.917558879\n",
      "bestIteration = 393\n",
      "\n",
      "Training on fold [3/5]\n",
      "0:\ttest: 0.6293375\tbest: 0.6293375 (0)\ttotal: 1.06ms\tremaining: 583ms\n",
      "549:\ttest: 0.9313715\tbest: 0.9314697 (446)\ttotal: 547ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9314696788\n",
      "bestIteration = 446\n",
      "\n",
      "Training on fold [4/5]\n",
      "0:\ttest: 0.6695905\tbest: 0.6695905 (0)\ttotal: 1.27ms\tremaining: 696ms\n",
      "549:\ttest: 0.9176570\tbest: 0.9235046 (350)\ttotal: 613ms\tremaining: 0us\n",
      "\n",
      "bestTest = 0.9235046241\n",
      "bestIteration = 350\n",
      "\n"
     ]
    }
   ],
   "source": [
    "params = {\n",
    "    'verbose' : [1000],\n",
    "    'depth': [2],\n",
    "    'iterations': [i for i in range(500,1500,50)],\n",
    "    'learning_rate' : [0.401]\n",
    "}\n",
    "\n",
    "model = CatBoostClassifier(random_state=RS, custom_metric = 'AUC', eval_metric='AUC')\n",
    "grid_search_result = model.grid_search(params, train_pool, plot=True, cv = 5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "1a441a42",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'custom_metric': 'AUC',\n",
       " 'eval_metric': 'AUC',\n",
       " 'random_state': 111223,\n",
       " 'depth': 2,\n",
       " 'verbose': 1000,\n",
       " 'iterations': 550,\n",
       " 'learning_rate': 0.401}"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.get_params()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60f794e9",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Для модели catboost с гиперпараметрами depth = 2, learning_rate = 0.401, iterarions = 550 удалось получить auc = 0.9266 на валидационной выборке"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "583a97f8",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Решающее дерево"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "dd4fcd2f",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 1440 candidates, totalling 7200 fits\n",
      "Параметры: {'criterion': 'gini', 'max_depth': 10, 'min_samples_leaf': 115, 'min_samples_split': 2}\n",
      "AUC = 0.8107071160567582\n",
      "CPU times: user 1min 31s, sys: 106 ms, total: 1min 31s\n",
      "Wall time: 1min 31s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "model_tree = DecisionTreeClassifier(random_state = RS)\n",
    "param = {\n",
    "    'criterion': ['gini', 'entropy'],\n",
    "    'max_depth': [i for i in range(1,19,3)],\n",
    "    'min_samples_split': [2,3,4,5,6, 7],\n",
    "    'min_samples_leaf': [i for i in range(10,300,15)]\n",
    "}\n",
    "grid_search = GridSearchCV(estimator=model_tree, param_grid=param, cv=5,scoring='roc_auc', verbose=1)\n",
    "grid_search.fit(features_train_f, target_train)\n",
    "print(f\"Параметры: {grid_search.best_params_}\")\n",
    "print(f\"AUC = {grid_search.best_score_}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62d5bdd9",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Для решающего дерево удалось получить auc = 0.810 на кросс-валидации**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6bbd8f2",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "90d9294f",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n",
      "Параметры: {'max_iter': 20, 'solver': 'liblinear'}\n",
      "auc = 0.7675389460653406\n"
     ]
    }
   ],
   "source": [
    "l_model = LogisticRegression(random_state=RS)\n",
    "param = {\n",
    "    'solver': ['liblinear'],\n",
    "    'max_iter': [20,30,40,50,75,100, 500, 1000, 3000]\n",
    "}\n",
    "grid_search = GridSearchCV(estimator=l_model, param_grid=param, cv=5,scoring='roc_auc', verbose=1)\n",
    "grid_search.fit(features_train_l, target_train_l)\n",
    "print(f\"Параметры: {grid_search.best_params_}\")\n",
    "print(f'auc = {grid_search.best_score_}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "262a8ab2",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Промежуточный вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e18095b",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Лучшие результаты показала моедль Catboost<br>\n",
    "Для модели catboost с гиперпараметрами depth = 2, l2_leaf_reg = 1, learning_rate = 0.185, iterarions = 670 удалось получить **auc = 0.924239** на кросс-валидации"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cf47f93",
   "metadata": {},
   "source": [
    "## Тестирование модели Catboost на тестовой выборке и интерпертация результатов"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64be2415",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "###  Тестирование модели"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "2a47b461",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0:\ttotal: 1.73ms\tremaining: 951ms\n",
      "549:\ttotal: 585ms\tremaining: 0us\n",
      "AUC на тестовых данных: 0.9145142767068997\n"
     ]
    }
   ],
   "source": [
    "params = {'custom_metric': 'AUC',\n",
    " 'eval_metric': 'AUC',\n",
    " 'random_state': 111223,\n",
    " 'depth': 2,\n",
    " 'verbose': 1000,\n",
    " 'iterations': 550,\n",
    " 'learning_rate': 0.401}\n",
    "\n",
    "\n",
    "model = CatBoostClassifier(**params)\n",
    "model.fit(train_pool)\n",
    "prob_one = model.predict_proba(test_pool)[:, 1]\n",
    "print(f'AUC на тестовых данных: {roc_auc_score(target_test, prob_one)}')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d494e12",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Анализ значимости классов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "4407aafc",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize = (10,6))\n",
    "ax.barh(features_train.columns, model.get_feature_importance())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "a580c3e8",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x396 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ex = shap.TreeExplainer(model)\n",
    "shap_v = ex(features_train_f)\n",
    "shap.plots.beeswarm(shap_v)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28321e4e",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Для определения верности клиента самый важный признак \n",
    "* **Сколько дней человек является клиентом**<br>\n",
    "\n",
    "на втором месте:\n",
    "* **TotalCharges**<br>\n",
    "\n",
    "также важны:\n",
    "* Monthly Charges\n",
    "* Type\n",
    "* Partner\n",
    "* PaymentMethod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "3f027c28",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>days</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5076</th>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.969170</td>\n",
       "      <td>-0.225970</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.607293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2767</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.671265</td>\n",
       "      <td>0.839927</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.724337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6304</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.434596</td>\n",
       "      <td>-0.557311</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.781742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5590</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>-1.501787</td>\n",
       "      <td>-0.759255</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.206060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1885</th>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.191306</td>\n",
       "      <td>-0.185935</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-0.251126</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Type  PaperlessBilling  PaymentMethod  MonthlyCharges  TotalCharges  \\\n",
       "5076   1.0               1.0            2.0        0.969170     -0.225970   \n",
       "2767   0.0               1.0            0.0        0.671265      0.839927   \n",
       "6304   0.0               1.0            0.0        0.434596     -0.557311   \n",
       "5590   0.0               1.0            3.0       -1.501787     -0.759255   \n",
       "1885   0.0               1.0            1.0        0.191306     -0.185935   \n",
       "\n",
       "      SeniorCitizen  Partner  Dependents  InternetService  OnlineSecurity  \\\n",
       "5076              0      1.0         1.0              1.0             0.0   \n",
       "2767              0      0.0         1.0              1.0             0.0   \n",
       "6304              0      0.0         0.0              1.0             0.0   \n",
       "5590              0      1.0         1.0              2.0             0.0   \n",
       "1885              0      1.0         1.0              0.0             1.0   \n",
       "\n",
       "      OnlineBackup  DeviceProtection  TechSupport  StreamingTV  \\\n",
       "5076           0.0               1.0          0.0          1.0   \n",
       "2767           0.0               1.0          1.0          0.0   \n",
       "6304           0.0               0.0          0.0          1.0   \n",
       "5590           0.0               0.0          0.0          0.0   \n",
       "1885           1.0               0.0          1.0          0.0   \n",
       "\n",
       "      StreamingMovies  MultipleLines      days  \n",
       "5076              1.0            0.0 -0.607293  \n",
       "2767              0.0            1.0  0.724337  \n",
       "6304              0.0            0.0 -0.781742  \n",
       "5590              0.0            0.0 -0.206060  \n",
       "1885              1.0            0.0 -0.251126  "
      ]
     },
     "execution_count": 220,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_test_f.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "2d19ba3a",
   "metadata": {
    "hidden": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>PaperlessBilling</th>\n",
       "      <th>PaymentMethod</th>\n",
       "      <th>MonthlyCharges</th>\n",
       "      <th>TotalCharges</th>\n",
       "      <th>SeniorCitizen</th>\n",
       "      <th>Partner</th>\n",
       "      <th>Dependents</th>\n",
       "      <th>InternetService</th>\n",
       "      <th>OnlineSecurity</th>\n",
       "      <th>OnlineBackup</th>\n",
       "      <th>DeviceProtection</th>\n",
       "      <th>TechSupport</th>\n",
       "      <th>StreamingTV</th>\n",
       "      <th>StreamingMovies</th>\n",
       "      <th>MultipleLines</th>\n",
       "      <th>days</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5076</th>\n",
       "      <td>One year</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Electronic check</td>\n",
       "      <td>0.969170</td>\n",
       "      <td>-0.225970</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>-0.607293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2767</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>0.671265</td>\n",
       "      <td>0.839927</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>0.724337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6304</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Bank transfer (automatic)</td>\n",
       "      <td>0.434596</td>\n",
       "      <td>-0.557311</td>\n",
       "      <td>0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Fiber optic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>-0.781742</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5590</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Mailed check</td>\n",
       "      <td>-1.501787</td>\n",
       "      <td>-0.759255</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>-0.206060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1885</th>\n",
       "      <td>Month-to-month</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Credit card (automatic)</td>\n",
       "      <td>0.191306</td>\n",
       "      <td>-0.185935</td>\n",
       "      <td>0</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>DSL</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>No</td>\n",
       "      <td>-0.251126</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                Type PaperlessBilling              PaymentMethod  \\\n",
       "5076        One year              Yes           Electronic check   \n",
       "2767  Month-to-month              Yes  Bank transfer (automatic)   \n",
       "6304  Month-to-month              Yes  Bank transfer (automatic)   \n",
       "5590  Month-to-month              Yes               Mailed check   \n",
       "1885  Month-to-month              Yes    Credit card (automatic)   \n",
       "\n",
       "      MonthlyCharges  TotalCharges  SeniorCitizen Partner Dependents  \\\n",
       "5076        0.969170     -0.225970              0     Yes        Yes   \n",
       "2767        0.671265      0.839927              0      No        Yes   \n",
       "6304        0.434596     -0.557311              0      No         No   \n",
       "5590       -1.501787     -0.759255              0     Yes        Yes   \n",
       "1885        0.191306     -0.185935              0     Yes        Yes   \n",
       "\n",
       "     InternetService OnlineSecurity OnlineBackup DeviceProtection TechSupport  \\\n",
       "5076     Fiber optic             No           No              Yes          No   \n",
       "2767     Fiber optic             No           No              Yes         Yes   \n",
       "6304     Fiber optic             No           No               No          No   \n",
       "5590              No             No           No               No          No   \n",
       "1885             DSL            Yes          Yes               No         Yes   \n",
       "\n",
       "     StreamingTV StreamingMovies MultipleLines      days  \n",
       "5076         Yes             Yes            No -0.607293  \n",
       "2767          No              No           Yes  0.724337  \n",
       "6304         Yes              No            No -0.781742  \n",
       "5590          No              No            No -0.206060  \n",
       "1885          No             Yes            No -0.251126  "
      ]
     },
     "execution_count": 221,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e499cf8e",
   "metadata": {
    "hidden": true
   },
   "source": [
    "Расшифровка кодировки<br>\n",
    "* Type: Больше значение - больше срок\n",
    "* Partner: 0 - False, 1 - True\n",
    "* PaymentMethod: 0 -  Bank transfer, 1 - Credit card, 2 - Electronic check, 3 - MailedCheck "
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "dfda1b40",
   "metadata": {
    "hidden": true
   },
   "source": [
    "![image.png](attachment:image.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e18b3ea",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Портрет лояльного клиента**\n",
    "* Давно является клиентом\n",
    "* В месяц платит не много\n",
    "* В сумме заплатил немного\n",
    "* Платит ежемесячно\n",
    "\n",
    "**Портрет потенциального перебежчика**\n",
    "* Среднее время или меньше является клиентом\n",
    "* При этом много заплатил\n",
    "* Много платит в месяц\n",
    "* Есть партнер"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5a21f9b",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "### Промежуточный вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c542495b",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Модель catboost с гиперпараметрами  depth = 2, learning_rate = 0.401, iterarions = 550 показала высокий результат auc score на тестовой выборке, равный 0.9145142767068997**<br>\n",
    "Данный результат показывает, что модель хорошо различает классы и у нее мало ложных срабатываний и пропусков."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "573511f6",
   "metadata": {
    "hidden": true
   },
   "source": [
    "<br>Для определения верности клиента самым важным признаком является \n",
    "* **Кол-во дней, которые человек является клиентом**<br>\n",
    "\n",
    "на втором месте:\n",
    "* **TotalCharges**<br>\n",
    "\n",
    "также важны:\n",
    "* Monthly Charges\n",
    "* Type\n",
    "* Partner\n",
    "* PaymentMethod"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "78f52638",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Портрет лояльного клиента**\n",
    "* Давно является клиентом\n",
    "* В месяц платит не много\n",
    "* В сумме заплатил немного\n",
    "* Платит ежемесячно\n",
    "\n",
    "**Портрет потенциального перебежчика**\n",
    "* Среднее время или меньше является клиентом\n",
    "* При этом много заплатил\n",
    "* Много платит в месяц\n",
    "* Есть партнер"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f64f624f",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Выводы по портретам**\n",
    "* Кто долго в компании, тем либо все равно, либо не хотят перемен.\n",
    "* Кто в месяц мало платит тот и уходить не хочет\n",
    "* Кто в сумме мало заплатил, также уходит реже\n",
    "* Возможно оплата раз в месяц дает людям возможность менять тарифы и отказываться от услуг, поэтому они реже покидают компанию\n",
    "\n",
    "По имеющимся данным тяжело определить, почему наличие брака влияет на отказ от услуг оператора.<br>\n",
    "Возможно это связано с тем, что другие операторы предлагают более выгодные тарифы для пар или же делают скидку для тех, кто оформляет более широкий спектр услуг"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "384cd9e4",
   "metadata": {
    "heading_collapsed": true
   },
   "source": [
    "## Вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05e29b03",
   "metadata": {
    "hidden": true
   },
   "source": [
    "**Про предобработку**\n",
    "* На этапе предобработки все датафреймы были объединены в один, что создало пропуски, если человек не пользовался какой-то из услуг. Эти пропуски были заменены на 'No'.<br>\n",
    "Большe аномалий, пропусков и дубликатов в данных обнаружено не было.<br>\n",
    "Был обработан только столбец Total_charges, т.к содержал пустую строку, если человек еще ничего не заплатил(заменил на 0)\n",
    "\n",
    "**Про краткий анализ данных**\n",
    "* На этапе анализа данных\n",
    "был обнаружен дисбаланс классов.<br>\n",
    "BeginDate, TotalCharges, Partner, MonthlyCharges, PaymentMethod - Признаки, которые имею наибольшую корреляцию с целевым.<br>\n",
    "Корреляция между полом и расторжением договора близка к 0\n",
    "\n",
    "Баланс классов<br>\n",
    "* Type: кол-во month-to-month превышает сумму кол-ва остальных классов<br>\n",
    "* PaperlessBilling: большая часть клиентов получает электронный расчетный лист<br>\n",
    "* PaymentMethod: наиболее популярный вариант - Electronic check, остальные варианты встречаются с одиноковой частотой<br>\n",
    "* gender: Мужчин и женщин +- одинаково<br>\n",
    "* SeniorCitizen: Тут самый большой дисбалан. Пенсионеров всего примерно 16%<br>\n",
    "* Partner: абонентов без супруга или супруги немного больше.<br>\n",
    "* Dependents: Лишь у трети абонентов есть дети<br>\n",
    "* InternetService: Среди абонентов наиболее популярный тип подклбчения интернета fiber optic(примерно 60%)<br>\n",
    "* OnlineSecurity: Блокировщик интересует лишь 37%<br>\n",
    "* OnlineBackup: Аналогично с предыдущим<br>\n",
    "* DeviceProtection: Также<br>\n",
    "* TechSupport: Аналогично<br>\n",
    "* StreamingTV: Примерно равны<br>\n",
    "* StreamingMovies: Примерно равны<br>\n",
    "* MultipleLines: Телефон подключен одновременно к несколькоим линиям у чуть меньшего числа пользователей\n",
    "\n",
    "**Про подготовку данных для обучению моделей**<br>\n",
    "**Признаки для обучения моделей не включают:**<br>\n",
    "* CustomerId<br>\n",
    "* BeginDate и EndDate создадут утечку, поэтому были удалены<br>\n",
    "* Gender, т.к. судя по матрице корреляций не имеет влияние на целевой признак\n",
    "\n",
    "**Целевой признак**\n",
    "* end\n",
    "\n",
    "**Данные были разделены на тренировочную и тестовую выборки(размер тестовой 0.25)**\n",
    "<br>\n",
    "\n",
    "\n",
    "**Масштабирование было применено к столбцам MonthlyCharges и TotalCharges**\n",
    "<br>\n",
    "\n",
    "\n",
    "**Категориальные признаки были закодированы**\n",
    "* OrdinalEncoder (features_train_f, features_test_f)<br>\n",
    "* OHE (features_train_l, features_test_l, target_train_l, target_test_l)\n",
    "\n",
    "**Про обучение моделей**<br>\n",
    "Были обучены модели:\n",
    "* Catboost<br>\n",
    "* decision_tree<br>\n",
    "* logistic_regressor<br>\n",
    "\n",
    "Для всех моделей был применен GridSearch для поиска лучших гиперпараметрах с использованием кросс-валидации<br>\n",
    "**Лучшие результаты метрики auc_roc показала модель catboost с гиперпараметрами**<br> \n",
    "* depth = 2<br>\n",
    "* learning_rate = 0.401<br>\n",
    "* iterarions = 550\n",
    "\n",
    "\n",
    "**Про тестирование catboost**<br>\n",
    "* С указанными выше гиперпараметрами на тестовой выборке auc_roc = 0.917669113673212 \n",
    "\n",
    "**Про анализ значимости классов**\n",
    "<br>Для определения верности клиента самым важным признаком является \n",
    "* **Кол-во дней, которые человек является клиентом**<br>\n",
    "\n",
    "на втором месте:\n",
    "* **TotalCharges**<br>\n",
    "\n",
    "также важны:\n",
    "* Monthly Charges\n",
    "* Type\n",
    "* Partner\n",
    "* PaymentMethod\n",
    "\n",
    "**Портрет лояльного клиента**\n",
    "* Давно является клиентом\n",
    "* В месяц платит не много\n",
    "* В сумме заплатил немного\n",
    "* Платит ежемесячно\n",
    "\n",
    "**Портрет потенциального перебежчика**\n",
    "* Среднее время или меньше является клиентом\n",
    "* При этом много заплатил\n",
    "* Много платит в месяц\n",
    "* Есть партнер\n",
    "\n",
    "**Выводы по портретам**\n",
    "* Кто долго в компании, тем либо все равно, либо не хотят перемен.\n",
    "* Кто в месяц мало платит тот и уходить не хочет\n",
    "* Кто в сумме мало заплатил, также уходит реже\n",
    "* Возможно оплата раз в месяц дает людям возможность менять тарифы и отказываться от услуг, поэтому они реже покидают компанию\n",
    "\n",
    "По имеющимся данным тяжело определить, почему наличие брака влияет на отказ от услуг оператора.<br>\n",
    "Возможно это связано с тем, что другие операторы предлагают более выгодные тарифы для пар или же делают скидку для тех, кто оформляет более широкий спектр услуг\n",
    "\n",
    "В любом случае, предоставление скидки людям из группы риска уже должно сильно наладить положение дел"
   ]
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 426,
    "start_time": "2023-12-12T18:52:19.893Z"
   },
   {
    "duration": 78,
    "start_time": "2023-12-12T19:04:01.442Z"
   },
   {
    "duration": 267,
    "start_time": "2023-12-12T19:05:03.134Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-12T19:05:35.085Z"
   },
   {
    "duration": 83,
    "start_time": "2023-12-12T19:06:08.418Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-12T19:06:17.297Z"
   },
   {
    "duration": 67,
    "start_time": "2023-12-12T19:17:08.502Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-12T19:17:10.499Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-12T19:17:27.810Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-12T19:19:58.171Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-12T19:20:30.325Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-12T19:20:52.148Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-12T19:20:52.875Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-12T19:24:24.290Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-12T19:24:34.955Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-12T19:24:36.287Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-12T19:24:44.190Z"
   },
   {
    "duration": 45,
    "start_time": "2023-12-12T19:24:45.248Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-12T19:25:51.537Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-12T19:25:55.771Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-12T19:27:31.163Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-12T19:27:31.966Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-12T19:27:57.477Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-12T19:28:06.179Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-12T19:28:08.585Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-12T19:28:25.852Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-12T19:28:35.549Z"
   },
   {
    "duration": 77,
    "start_time": "2023-12-12T19:28:39.342Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-12T19:28:41.897Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-12T19:41:50.409Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-12T19:41:57.472Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-12T19:45:12.572Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-12T19:48:40.633Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-12T19:48:49.205Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-12T19:48:52.708Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-12T19:48:59.704Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-12T19:49:05.096Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-12T19:49:09.515Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-12T19:49:38.575Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-12T19:49:44.276Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-12T19:50:01.796Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-12T19:50:05.486Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-12T19:50:19.364Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-12T19:51:07.258Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-12T19:51:11.846Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-12T19:51:54.295Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-12T19:53:23.413Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-12T19:54:08.453Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-12T19:54:17.634Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-12T19:58:35.262Z"
   },
   {
    "duration": 50,
    "start_time": "2023-12-13T12:12:12.154Z"
   },
   {
    "duration": 377,
    "start_time": "2023-12-13T12:12:18.990Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T12:12:19.369Z"
   },
   {
    "duration": 311,
    "start_time": "2023-12-13T12:12:19.374Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-13T12:12:19.687Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-13T12:12:19.723Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T12:12:35.850Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T12:12:48.981Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T12:13:01.950Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T12:13:04.284Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-13T12:13:33.985Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T12:29:20.263Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T12:29:41.075Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T12:36:34.850Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T12:36:34.983Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T12:36:40.105Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T12:37:36.378Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-13T12:37:39.771Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-13T12:40:45.918Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T12:40:48.750Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T12:40:59.192Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-13T12:43:22.983Z"
   },
   {
    "duration": 31,
    "start_time": "2023-12-13T12:43:32.688Z"
   },
   {
    "duration": 56,
    "start_time": "2023-12-13T12:44:20.547Z"
   },
   {
    "duration": 54,
    "start_time": "2023-12-13T12:44:25.093Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-13T12:47:34.917Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-13T12:49:34.036Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-13T12:49:44.750Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-13T12:49:48.781Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-13T12:50:14.547Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T12:50:19.831Z"
   },
   {
    "duration": 119,
    "start_time": "2023-12-13T12:53:13.343Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-13T12:53:50.683Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-13T12:53:50.687Z"
   },
   {
    "duration": 131,
    "start_time": "2023-12-13T12:53:50.717Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-13T12:53:50.850Z"
   },
   {
    "duration": 44,
    "start_time": "2023-12-13T12:53:50.880Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-13T12:53:50.942Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T12:53:50.971Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-13T12:53:50.997Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-13T12:53:51.029Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T12:53:51.059Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T12:53:51.087Z"
   },
   {
    "duration": 89,
    "start_time": "2023-12-13T12:53:51.097Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T12:53:51.188Z"
   },
   {
    "duration": 44,
    "start_time": "2023-12-13T12:53:51.215Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T12:53:51.261Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T12:54:06.722Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T12:54:20.840Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T12:54:35.745Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T12:54:46.690Z"
   },
   {
    "duration": 98,
    "start_time": "2023-12-13T13:04:00.808Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T13:04:16.079Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T13:06:26.202Z"
   },
   {
    "duration": 516,
    "start_time": "2023-12-13T13:06:45.788Z"
   },
   {
    "duration": 107,
    "start_time": "2023-12-13T13:06:49.345Z"
   },
   {
    "duration": 82,
    "start_time": "2023-12-13T13:07:15.075Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T13:07:42.665Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T13:07:45.682Z"
   },
   {
    "duration": 81,
    "start_time": "2023-12-13T13:07:59.660Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T13:08:41.504Z"
   },
   {
    "duration": 1512,
    "start_time": "2023-12-13T13:09:30.534Z"
   },
   {
    "duration": 1578,
    "start_time": "2023-12-13T13:09:41.827Z"
   },
   {
    "duration": 1787,
    "start_time": "2023-12-13T13:09:56.479Z"
   },
   {
    "duration": 89,
    "start_time": "2023-12-13T13:10:36.149Z"
   },
   {
    "duration": 164,
    "start_time": "2023-12-13T13:10:48.747Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-13T13:10:54.899Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T13:10:59.624Z"
   },
   {
    "duration": 82,
    "start_time": "2023-12-13T13:11:18.827Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-13T13:12:11.049Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T13:12:15.231Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-13T13:12:18.585Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T13:15:52.946Z"
   },
   {
    "duration": 44,
    "start_time": "2023-12-13T13:16:12.666Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-13T13:17:16.600Z"
   },
   {
    "duration": 31,
    "start_time": "2023-12-13T13:17:24.167Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T13:17:51.387Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T13:18:32.586Z"
   },
   {
    "duration": 36,
    "start_time": "2023-12-13T13:20:42.885Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T13:21:57.207Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T13:22:24.256Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T13:22:29.529Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T13:22:32.141Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T13:33:20.649Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T13:34:12.509Z"
   },
   {
    "duration": 48,
    "start_time": "2023-12-13T13:34:13.040Z"
   },
   {
    "duration": 138,
    "start_time": "2023-12-13T13:35:23.261Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T13:35:44.528Z"
   },
   {
    "duration": 116,
    "start_time": "2023-12-13T13:35:48.840Z"
   },
   {
    "duration": 91,
    "start_time": "2023-12-13T13:35:58.789Z"
   },
   {
    "duration": 99,
    "start_time": "2023-12-13T13:36:03.397Z"
   },
   {
    "duration": 93,
    "start_time": "2023-12-13T13:36:07.768Z"
   },
   {
    "duration": 96,
    "start_time": "2023-12-13T13:36:11.367Z"
   },
   {
    "duration": 99,
    "start_time": "2023-12-13T13:36:14.975Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T13:38:34.903Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T13:38:42.999Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-13T13:38:54.402Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T13:38:58.811Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-13T14:47:49.462Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-13T14:47:57.331Z"
   },
   {
    "duration": 2277,
    "start_time": "2023-12-13T14:52:17.752Z"
   },
   {
    "duration": 2001,
    "start_time": "2023-12-13T14:52:46.434Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T14:53:06.868Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T14:53:15.624Z"
   },
   {
    "duration": 892,
    "start_time": "2023-12-13T14:53:19.269Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T14:54:51.210Z"
   },
   {
    "duration": 198,
    "start_time": "2023-12-13T14:54:54.551Z"
   },
   {
    "duration": 277,
    "start_time": "2023-12-13T14:56:22.853Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T14:58:17.703Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T14:58:24.484Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T14:58:36.665Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T14:59:11.317Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T14:59:19.587Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T14:59:22.837Z"
   },
   {
    "duration": 115,
    "start_time": "2023-12-13T15:01:47.797Z"
   },
   {
    "duration": 97,
    "start_time": "2023-12-13T15:02:49.006Z"
   },
   {
    "duration": 101,
    "start_time": "2023-12-13T15:02:55.243Z"
   },
   {
    "duration": 93,
    "start_time": "2023-12-13T15:03:22.039Z"
   },
   {
    "duration": 408,
    "start_time": "2023-12-13T15:03:33.994Z"
   },
   {
    "duration": 126,
    "start_time": "2023-12-13T15:04:20.072Z"
   },
   {
    "duration": 1902,
    "start_time": "2023-12-13T15:04:23.287Z"
   },
   {
    "duration": 1724,
    "start_time": "2023-12-13T15:05:04.147Z"
   },
   {
    "duration": 2040,
    "start_time": "2023-12-13T15:05:14.167Z"
   },
   {
    "duration": 1827,
    "start_time": "2023-12-13T15:18:09.160Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-13T15:48:58.469Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T15:48:58.473Z"
   },
   {
    "duration": 105,
    "start_time": "2023-12-13T15:48:58.484Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T15:48:58.591Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-13T15:48:58.616Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T15:48:58.650Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T15:48:58.676Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-13T15:48:58.693Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T15:48:58.725Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T15:48:58.747Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T15:48:58.766Z"
   },
   {
    "duration": 70,
    "start_time": "2023-12-13T15:48:58.776Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T15:48:58.848Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T15:48:58.871Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T15:48:58.900Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-13T15:48:58.912Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-13T15:48:58.951Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T15:48:58.963Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T15:48:58.990Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T15:48:59.012Z"
   },
   {
    "duration": 91,
    "start_time": "2023-12-13T15:48:59.023Z"
   },
   {
    "duration": 88,
    "start_time": "2023-12-13T15:48:59.115Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T15:48:59.204Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-13T15:48:59.224Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T15:48:59.258Z"
   },
   {
    "duration": 62,
    "start_time": "2023-12-13T15:48:59.262Z"
   },
   {
    "duration": 387,
    "start_time": "2023-12-13T15:48:59.325Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T15:48:59.715Z"
   },
   {
    "duration": 1652,
    "start_time": "2023-12-13T15:48:59.724Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T16:07:43.622Z"
   },
   {
    "duration": 320,
    "start_time": "2023-12-13T16:10:24.190Z"
   },
   {
    "duration": 690,
    "start_time": "2023-12-13T16:19:55.798Z"
   },
   {
    "duration": 47,
    "start_time": "2023-12-13T21:07:13.655Z"
   },
   {
    "duration": 1499,
    "start_time": "2023-12-13T21:07:19.759Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-13T21:07:21.260Z"
   },
   {
    "duration": 313,
    "start_time": "2023-12-13T21:07:21.263Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-13T21:07:21.577Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-13T21:07:21.608Z"
   },
   {
    "duration": 45,
    "start_time": "2023-12-13T21:07:21.643Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-13T21:07:21.690Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T21:07:21.707Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-13T21:07:21.726Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T21:07:21.739Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-13T21:07:21.758Z"
   },
   {
    "duration": 76,
    "start_time": "2023-12-13T21:07:21.789Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-13T21:07:21.867Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-13T21:07:21.898Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-13T21:07:21.922Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-13T21:07:21.930Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T21:07:21.955Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T21:07:21.975Z"
   },
   {
    "duration": 41,
    "start_time": "2023-12-13T21:07:21.998Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T21:07:22.040Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-13T21:07:22.045Z"
   },
   {
    "duration": 82,
    "start_time": "2023-12-13T21:07:22.149Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T21:07:22.233Z"
   },
   {
    "duration": 42,
    "start_time": "2023-12-13T21:07:22.255Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-13T21:07:22.298Z"
   },
   {
    "duration": 70,
    "start_time": "2023-12-13T21:07:22.302Z"
   },
   {
    "duration": 95,
    "start_time": "2023-12-13T21:07:22.373Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-13T21:07:22.470Z"
   },
   {
    "duration": 1652,
    "start_time": "2023-12-13T21:07:22.483Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T21:07:24.137Z"
   },
   {
    "duration": 64,
    "start_time": "2023-12-13T21:07:30.895Z"
   },
   {
    "duration": 145,
    "start_time": "2023-12-13T21:07:35.272Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T21:07:38.025Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T21:07:40.977Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T21:07:46.694Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T21:07:50.770Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T21:07:54.943Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T21:21:17.228Z"
   },
   {
    "duration": 1444,
    "start_time": "2023-12-13T21:21:25.819Z"
   },
   {
    "duration": 2775,
    "start_time": "2023-12-13T21:21:36.551Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-13T21:21:42.948Z"
   },
   {
    "duration": 19776,
    "start_time": "2023-12-13T21:22:16.337Z"
   },
   {
    "duration": 19792,
    "start_time": "2023-12-13T21:24:06.392Z"
   },
   {
    "duration": 1660,
    "start_time": "2023-12-13T21:25:01.094Z"
   },
   {
    "duration": 1702,
    "start_time": "2023-12-13T21:25:49.262Z"
   },
   {
    "duration": 1953,
    "start_time": "2023-12-13T21:26:43.020Z"
   },
   {
    "duration": 1699,
    "start_time": "2023-12-13T21:26:51.832Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T21:43:00.452Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T21:43:17.323Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T21:46:57.936Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T21:47:02.401Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-13T22:01:33.999Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T22:01:41.857Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:03:42.025Z"
   },
   {
    "duration": 19186,
    "start_time": "2023-12-13T22:04:20.669Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T22:04:39.858Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-13T22:04:39.862Z"
   },
   {
    "duration": 110,
    "start_time": "2023-12-13T22:04:39.886Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T22:04:39.998Z"
   },
   {
    "duration": 74,
    "start_time": "2023-12-13T22:04:40.024Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-13T22:04:40.099Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T22:04:40.127Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-13T22:04:40.144Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:04:40.180Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T22:04:40.203Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T22:04:40.220Z"
   },
   {
    "duration": 59,
    "start_time": "2023-12-13T22:04:40.241Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T22:04:40.303Z"
   },
   {
    "duration": 42,
    "start_time": "2023-12-13T22:04:40.325Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T22:04:40.369Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-13T22:04:40.390Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-13T22:04:40.424Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-13T22:04:40.448Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-13T22:04:40.477Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-13T22:04:40.490Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-13T22:04:40.506Z"
   },
   {
    "duration": 82,
    "start_time": "2023-12-13T22:04:40.610Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T22:04:40.693Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T22:04:40.713Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-13T22:04:40.731Z"
   },
   {
    "duration": 68,
    "start_time": "2023-12-13T22:04:40.735Z"
   },
   {
    "duration": 106,
    "start_time": "2023-12-13T22:04:40.804Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:04:40.911Z"
   },
   {
    "duration": 1833,
    "start_time": "2023-12-13T22:04:40.920Z"
   },
   {
    "duration": 1870,
    "start_time": "2023-12-13T22:04:42.755Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:04:44.626Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:04:44.632Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T22:04:44.642Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-13T22:04:44.663Z"
   },
   {
    "duration": 51,
    "start_time": "2023-12-13T22:07:21.517Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T22:10:25.601Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T22:13:18.882Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T22:14:28.891Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-13T22:21:07.300Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T22:23:33.644Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:23:37.009Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T22:25:01.063Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:25:10.337Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:25:17.023Z"
   },
   {
    "duration": 2445,
    "start_time": "2023-12-13T22:25:27.063Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:25:29.510Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T22:25:29.516Z"
   },
   {
    "duration": 118,
    "start_time": "2023-12-13T22:25:29.530Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-13T22:25:29.650Z"
   },
   {
    "duration": 41,
    "start_time": "2023-12-13T22:25:29.686Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-13T22:25:29.728Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-13T22:25:29.758Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-13T22:25:29.789Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:25:29.828Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:25:29.851Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T22:25:29.873Z"
   },
   {
    "duration": 67,
    "start_time": "2023-12-13T22:25:29.890Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:25:29.960Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-13T22:25:29.982Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T22:25:30.016Z"
   },
   {
    "duration": 90,
    "start_time": "2023-12-13T22:25:30.034Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-13T22:25:30.125Z"
   },
   {
    "duration": 47,
    "start_time": "2023-12-13T22:25:30.166Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-13T22:25:30.215Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-13T22:25:30.249Z"
   },
   {
    "duration": 122,
    "start_time": "2023-12-13T22:25:30.284Z"
   },
   {
    "duration": 86,
    "start_time": "2023-12-13T22:25:30.408Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T22:25:30.496Z"
   },
   {
    "duration": 45,
    "start_time": "2023-12-13T22:25:30.515Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-13T22:25:30.561Z"
   },
   {
    "duration": 94,
    "start_time": "2023-12-13T22:25:30.603Z"
   },
   {
    "duration": 104,
    "start_time": "2023-12-13T22:25:30.698Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-13T22:25:30.803Z"
   },
   {
    "duration": 1714,
    "start_time": "2023-12-13T22:25:30.820Z"
   },
   {
    "duration": 1722,
    "start_time": "2023-12-13T22:25:32.536Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:25:34.260Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T22:25:34.266Z"
   },
   {
    "duration": 31,
    "start_time": "2023-12-13T22:25:34.294Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-13T22:25:34.326Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-13T22:25:34.366Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-13T22:25:34.379Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-13T22:25:34.405Z"
   },
   {
    "duration": 6676,
    "start_time": "2023-12-13T22:25:34.440Z"
   },
   {
    "duration": 7104,
    "start_time": "2023-12-13T22:26:02.456Z"
   },
   {
    "duration": 509,
    "start_time": "2023-12-13T22:26:28.382Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T22:27:11.076Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T22:27:16.924Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T22:27:44.114Z"
   },
   {
    "duration": 63,
    "start_time": "2023-12-13T22:27:57.134Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-13T22:28:19.758Z"
   },
   {
    "duration": 2469,
    "start_time": "2023-12-13T22:28:37.803Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:28:40.275Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T22:28:40.281Z"
   },
   {
    "duration": 105,
    "start_time": "2023-12-13T22:28:40.290Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-13T22:28:40.397Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-13T22:28:40.423Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-13T22:28:40.459Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-13T22:28:40.499Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T22:28:40.515Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-13T22:28:40.533Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-13T22:28:40.545Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T22:28:40.584Z"
   },
   {
    "duration": 55,
    "start_time": "2023-12-13T22:28:40.594Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-13T22:28:40.652Z"
   },
   {
    "duration": 36,
    "start_time": "2023-12-13T22:28:40.690Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T22:28:40.727Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:28:40.736Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:28:40.758Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-13T22:28:40.763Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T22:28:40.787Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:28:40.801Z"
   },
   {
    "duration": 101,
    "start_time": "2023-12-13T22:28:40.806Z"
   },
   {
    "duration": 94,
    "start_time": "2023-12-13T22:28:40.909Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T22:28:41.004Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T22:28:41.026Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T22:28:41.047Z"
   },
   {
    "duration": 76,
    "start_time": "2023-12-13T22:28:41.051Z"
   },
   {
    "duration": 116,
    "start_time": "2023-12-13T22:28:41.128Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:28:41.245Z"
   },
   {
    "duration": 1850,
    "start_time": "2023-12-13T22:28:41.254Z"
   },
   {
    "duration": 1937,
    "start_time": "2023-12-13T22:28:43.106Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:28:45.044Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-13T22:28:45.049Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T22:28:45.088Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T22:28:45.102Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T22:28:45.110Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T22:28:45.118Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T22:28:45.129Z"
   },
   {
    "duration": 85,
    "start_time": "2023-12-13T22:28:45.133Z"
   },
   {
    "duration": 2964,
    "start_time": "2023-12-13T22:29:02.733Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:29:05.699Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T22:29:05.704Z"
   },
   {
    "duration": 118,
    "start_time": "2023-12-13T22:29:05.731Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-13T22:29:05.851Z"
   },
   {
    "duration": 102,
    "start_time": "2023-12-13T22:29:05.879Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T22:29:05.982Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:29:06.007Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-13T22:29:06.030Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-13T22:29:06.053Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T22:29:06.065Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:29:06.091Z"
   },
   {
    "duration": 52,
    "start_time": "2023-12-13T22:29:06.100Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-13T22:29:06.154Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T22:29:06.193Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:29:06.218Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T22:29:06.227Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-13T22:29:06.241Z"
   },
   {
    "duration": 36,
    "start_time": "2023-12-13T22:29:06.254Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-13T22:29:06.292Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:29:06.306Z"
   },
   {
    "duration": 106,
    "start_time": "2023-12-13T22:29:06.316Z"
   },
   {
    "duration": 88,
    "start_time": "2023-12-13T22:29:06.423Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T22:29:06.513Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-13T22:29:06.532Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T22:29:06.558Z"
   },
   {
    "duration": 46,
    "start_time": "2023-12-13T22:29:06.581Z"
   },
   {
    "duration": 98,
    "start_time": "2023-12-13T22:29:06.628Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-13T22:29:06.728Z"
   },
   {
    "duration": 1596,
    "start_time": "2023-12-13T22:29:06.736Z"
   },
   {
    "duration": 1637,
    "start_time": "2023-12-13T22:29:08.334Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T22:29:09.973Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T22:29:09.981Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T22:29:09.997Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T22:29:10.012Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T22:29:10.038Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-13T22:29:10.059Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-13T22:29:10.092Z"
   },
   {
    "duration": 58,
    "start_time": "2023-12-13T22:29:10.103Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T22:30:57.772Z"
   },
   {
    "duration": 2699,
    "start_time": "2023-12-13T22:31:01.348Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:31:04.049Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-13T22:31:04.055Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-13T22:31:04.063Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-13T22:31:04.169Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-13T22:31:04.198Z"
   },
   {
    "duration": 50,
    "start_time": "2023-12-13T22:31:04.237Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T22:31:04.289Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-13T22:31:04.307Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T22:31:04.342Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-13T22:31:04.363Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T22:31:04.390Z"
   },
   {
    "duration": 76,
    "start_time": "2023-12-13T22:31:04.400Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T22:31:04.481Z"
   },
   {
    "duration": 41,
    "start_time": "2023-12-13T22:31:04.507Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:31:04.550Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-13T22:31:04.559Z"
   },
   {
    "duration": 41,
    "start_time": "2023-12-13T22:31:04.601Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T22:31:04.644Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-13T22:31:04.672Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T22:31:04.710Z"
   },
   {
    "duration": 91,
    "start_time": "2023-12-13T22:31:04.725Z"
   },
   {
    "duration": 98,
    "start_time": "2023-12-13T22:31:04.817Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-13T22:31:04.916Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:31:04.939Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-13T22:31:04.961Z"
   },
   {
    "duration": 57,
    "start_time": "2023-12-13T22:31:04.985Z"
   },
   {
    "duration": 110,
    "start_time": "2023-12-13T22:31:05.043Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T22:31:05.155Z"
   },
   {
    "duration": 1671,
    "start_time": "2023-12-13T22:31:05.164Z"
   },
   {
    "duration": 1701,
    "start_time": "2023-12-13T22:31:06.836Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:31:08.538Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:31:08.543Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T22:31:08.552Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-13T22:31:08.562Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-13T22:31:08.569Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T22:31:08.585Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:31:08.603Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T22:31:08.608Z"
   },
   {
    "duration": 60,
    "start_time": "2023-12-13T22:31:31.556Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-13T22:34:56.580Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-13T22:35:03.233Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-13T22:35:07.808Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-13T22:35:16.230Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-13T22:35:25.552Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:35:39.828Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T22:35:39.990Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:35:40.341Z"
   },
   {
    "duration": 53,
    "start_time": "2023-12-13T22:35:40.537Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:36:17.802Z"
   },
   {
    "duration": 8418,
    "start_time": "2023-12-13T22:36:17.998Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-13T22:36:26.417Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-13T22:36:26.418Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-13T22:36:26.419Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-13T22:36:26.420Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-13T22:36:26.421Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-13T22:36:26.422Z"
   },
   {
    "duration": 3043,
    "start_time": "2023-12-13T22:36:28.878Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:36:31.923Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T22:36:31.928Z"
   },
   {
    "duration": 124,
    "start_time": "2023-12-13T22:36:31.955Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-13T22:36:32.081Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-13T22:36:32.109Z"
   },
   {
    "duration": 61,
    "start_time": "2023-12-13T22:36:32.146Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T22:36:32.209Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T22:36:32.231Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-13T22:36:32.250Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T22:36:32.285Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:36:32.305Z"
   },
   {
    "duration": 70,
    "start_time": "2023-12-13T22:36:32.315Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-13T22:36:32.388Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-13T22:36:32.410Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-13T22:36:32.435Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-13T22:36:32.443Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T22:36:32.456Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-13T22:36:32.484Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T22:36:32.504Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-13T22:36:32.521Z"
   },
   {
    "duration": 113,
    "start_time": "2023-12-13T22:36:32.539Z"
   },
   {
    "duration": 88,
    "start_time": "2023-12-13T22:36:32.654Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-13T22:36:32.744Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-13T22:36:32.763Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T22:36:32.796Z"
   },
   {
    "duration": 48,
    "start_time": "2023-12-13T22:36:32.800Z"
   },
   {
    "duration": 109,
    "start_time": "2023-12-13T22:36:32.850Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T22:36:32.961Z"
   },
   {
    "duration": 1651,
    "start_time": "2023-12-13T22:36:32.982Z"
   },
   {
    "duration": 1650,
    "start_time": "2023-12-13T22:36:34.634Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:36:36.286Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-13T22:36:36.291Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T22:36:36.297Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-13T22:36:36.308Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T22:36:36.315Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-13T22:36:36.343Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-13T22:36:36.365Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-13T22:36:36.370Z"
   },
   {
    "duration": 55,
    "start_time": "2023-12-13T22:38:10.057Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T22:53:32.916Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-13T23:07:58.988Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-13T23:08:02.590Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-13T23:09:23.714Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-13T23:09:47.885Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-13T23:11:21.938Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T11:49:50.644Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T11:49:53.205Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T11:49:54.825Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T11:49:55.853Z"
   },
   {
    "duration": 3134,
    "start_time": "2023-12-14T11:50:08.707Z"
   },
   {
    "duration": 1472,
    "start_time": "2023-12-14T11:50:11.843Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T11:50:13.317Z"
   },
   {
    "duration": 312,
    "start_time": "2023-12-14T11:50:13.321Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-14T11:50:13.634Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-14T11:50:13.663Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T11:50:13.697Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T11:50:13.722Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T11:50:13.741Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-14T11:50:13.762Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T11:50:13.789Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T11:50:13.806Z"
   },
   {
    "duration": 71,
    "start_time": "2023-12-14T11:50:13.816Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-14T11:50:13.888Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-14T11:50:13.909Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T11:50:13.933Z"
   },
   {
    "duration": 42,
    "start_time": "2023-12-14T11:50:13.940Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T11:50:13.983Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-14T11:50:13.990Z"
   },
   {
    "duration": 31,
    "start_time": "2023-12-14T11:50:14.025Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T11:50:14.058Z"
   },
   {
    "duration": 96,
    "start_time": "2023-12-14T11:50:14.063Z"
   },
   {
    "duration": 92,
    "start_time": "2023-12-14T11:50:14.160Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T11:50:14.253Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T11:50:14.282Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T11:50:14.303Z"
   },
   {
    "duration": 50,
    "start_time": "2023-12-14T11:50:14.307Z"
   },
   {
    "duration": 109,
    "start_time": "2023-12-14T11:50:14.361Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T11:50:14.482Z"
   },
   {
    "duration": 1675,
    "start_time": "2023-12-14T11:50:14.491Z"
   },
   {
    "duration": 1679,
    "start_time": "2023-12-14T11:50:16.167Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T11:50:17.848Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-14T11:50:17.854Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T11:50:17.876Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T11:50:17.890Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T11:50:17.896Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T11:50:17.901Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T11:50:17.920Z"
   },
   {
    "duration": 56,
    "start_time": "2023-12-14T11:50:17.926Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T11:50:17.983Z"
   },
   {
    "duration": 65,
    "start_time": "2023-12-14T11:51:20.719Z"
   },
   {
    "duration": 106,
    "start_time": "2023-12-14T11:51:27.483Z"
   },
   {
    "duration": 2216,
    "start_time": "2023-12-14T11:52:18.322Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T11:52:34.950Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T11:52:37.402Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T11:52:47.396Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T11:53:05.789Z"
   },
   {
    "duration": 88,
    "start_time": "2023-12-14T11:53:13.488Z"
   },
   {
    "duration": 2151,
    "start_time": "2023-12-14T11:53:15.962Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T11:53:29.801Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T11:53:30.300Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T11:54:00.676Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T12:02:54.384Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T12:04:03.421Z"
   },
   {
    "duration": 241870,
    "start_time": "2023-12-14T12:04:18.177Z"
   },
   {
    "duration": 249501,
    "start_time": "2023-12-14T12:09:14.476Z"
   },
   {
    "duration": 85225,
    "start_time": "2023-12-14T12:13:26.691Z"
   },
   {
    "duration": 577954,
    "start_time": "2023-12-14T12:14:58.973Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T12:24:36.928Z"
   },
   {
    "duration": 230,
    "start_time": "2023-12-14T12:24:40.579Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T12:24:49.430Z"
   },
   {
    "duration": 929,
    "start_time": "2023-12-14T12:26:00.094Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T12:26:29.450Z"
   },
   {
    "duration": 660,
    "start_time": "2023-12-14T12:26:30.092Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T12:26:47.528Z"
   },
   {
    "duration": 4472,
    "start_time": "2023-12-14T12:26:47.698Z"
   },
   {
    "duration": 398569,
    "start_time": "2023-12-14T12:30:26.748Z"
   },
   {
    "duration": 80,
    "start_time": "2023-12-14T12:40:44.153Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T12:40:49.833Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T12:41:04.362Z"
   },
   {
    "duration": 2304,
    "start_time": "2023-12-14T12:49:13.738Z"
   },
   {
    "duration": 1244,
    "start_time": "2023-12-14T12:49:16.044Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T12:49:17.289Z"
   },
   {
    "duration": 105,
    "start_time": "2023-12-14T12:49:17.293Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-14T12:49:17.399Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-14T12:49:17.428Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-14T12:49:17.461Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T12:49:17.500Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-14T12:49:17.517Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-14T12:49:17.554Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-14T12:49:17.569Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T12:49:17.591Z"
   },
   {
    "duration": 58,
    "start_time": "2023-12-14T12:49:17.602Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T12:49:17.662Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-14T12:49:17.690Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T12:49:17.713Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T12:49:17.721Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T12:49:17.732Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T12:49:17.737Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-14T12:49:17.754Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T12:49:17.795Z"
   },
   {
    "duration": 112,
    "start_time": "2023-12-14T12:49:17.801Z"
   },
   {
    "duration": 88,
    "start_time": "2023-12-14T12:49:17.914Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T12:49:18.003Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T12:49:18.021Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T12:49:18.041Z"
   },
   {
    "duration": 68,
    "start_time": "2023-12-14T12:49:18.045Z"
   },
   {
    "duration": 102,
    "start_time": "2023-12-14T12:49:18.116Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T12:49:18.219Z"
   },
   {
    "duration": 1594,
    "start_time": "2023-12-14T12:49:18.227Z"
   },
   {
    "duration": 1705,
    "start_time": "2023-12-14T12:49:19.823Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T12:49:21.529Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T12:49:21.534Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T12:49:21.551Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-14T12:49:21.582Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-14T12:49:21.611Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T12:49:21.645Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T12:49:21.652Z"
   },
   {
    "duration": 55,
    "start_time": "2023-12-14T12:49:21.668Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T12:49:21.724Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T12:49:21.728Z"
   },
   {
    "duration": 3179,
    "start_time": "2023-12-14T12:49:21.756Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T12:49:24.937Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T12:49:24.938Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T12:49:24.938Z"
   },
   {
    "duration": 250981,
    "start_time": "2023-12-14T12:49:30.080Z"
   },
   {
    "duration": 191452,
    "start_time": "2023-12-14T13:00:52.569Z"
   },
   {
    "duration": 212,
    "start_time": "2023-12-14T13:04:08.222Z"
   },
   {
    "duration": 172518,
    "start_time": "2023-12-14T13:04:17.019Z"
   },
   {
    "duration": 720705,
    "start_time": "2023-12-14T13:07:51.449Z"
   },
   {
    "duration": 332120,
    "start_time": "2023-12-14T14:18:44.414Z"
   },
   {
    "duration": 160859,
    "start_time": "2023-12-14T14:24:19.028Z"
   },
   {
    "duration": 50434,
    "start_time": "2023-12-14T14:28:48.151Z"
   },
   {
    "duration": 164655,
    "start_time": "2023-12-14T14:29:43.147Z"
   },
   {
    "duration": 154295,
    "start_time": "2023-12-14T14:32:39.238Z"
   },
   {
    "duration": 125538,
    "start_time": "2023-12-14T14:35:39.566Z"
   },
   {
    "duration": 104781,
    "start_time": "2023-12-14T14:38:29.070Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T14:50:21.158Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T14:59:27.371Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-14T14:59:37.572Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T14:59:44.459Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-14T14:59:51.287Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T15:00:06.049Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T15:00:33.316Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T15:00:36.633Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T15:00:40.841Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T15:00:48.834Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T15:00:53.763Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T15:01:16.473Z"
   },
   {
    "duration": 58,
    "start_time": "2023-12-14T15:01:16.479Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T15:01:16.539Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T15:01:16.543Z"
   },
   {
    "duration": 127032,
    "start_time": "2023-12-14T15:01:16.556Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T15:03:23.589Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T15:03:23.590Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T15:03:23.591Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T15:03:23.593Z"
   },
   {
    "duration": 46748,
    "start_time": "2023-12-14T15:03:46.968Z"
   },
   {
    "duration": 102286,
    "start_time": "2023-12-14T15:04:41.932Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T15:08:13.661Z"
   },
   {
    "duration": 1326,
    "start_time": "2023-12-14T15:08:14.572Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-14T15:12:48.401Z"
   },
   {
    "duration": 7080,
    "start_time": "2023-12-14T15:17:37.237Z"
   },
   {
    "duration": 3269,
    "start_time": "2023-12-14T15:18:15.071Z"
   },
   {
    "duration": 9784,
    "start_time": "2023-12-14T15:19:10.378Z"
   },
   {
    "duration": 21770,
    "start_time": "2023-12-14T15:19:23.162Z"
   },
   {
    "duration": 77,
    "start_time": "2023-12-14T15:20:36.194Z"
   },
   {
    "duration": 58161,
    "start_time": "2023-12-14T15:20:41.630Z"
   },
   {
    "duration": 76,
    "start_time": "2023-12-14T15:22:25.714Z"
   },
   {
    "duration": 184114,
    "start_time": "2023-12-14T15:22:30.546Z"
   },
   {
    "duration": 12483,
    "start_time": "2023-12-14T15:29:04.538Z"
   },
   {
    "duration": 76,
    "start_time": "2023-12-14T15:29:22.618Z"
   },
   {
    "duration": 143743,
    "start_time": "2023-12-14T15:29:31.156Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T15:31:54.901Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-14T15:31:56.013Z"
   },
   {
    "duration": 90,
    "start_time": "2023-12-14T15:32:24.636Z"
   },
   {
    "duration": 6285,
    "start_time": "2023-12-14T15:32:39.886Z"
   },
   {
    "duration": 144704,
    "start_time": "2023-12-14T15:33:01.081Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T15:35:25.787Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T16:05:40.445Z"
   },
   {
    "duration": 3491,
    "start_time": "2023-12-14T18:01:05.705Z"
   },
   {
    "duration": 1552,
    "start_time": "2023-12-14T18:01:09.198Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T18:01:10.751Z"
   },
   {
    "duration": 387,
    "start_time": "2023-12-14T18:01:10.756Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T18:01:11.145Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-14T18:01:11.177Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T18:01:11.216Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T18:01:11.241Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-14T18:01:11.259Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-14T18:01:11.300Z"
   },
   {
    "duration": 65,
    "start_time": "2023-12-14T18:01:11.316Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T18:01:11.383Z"
   },
   {
    "duration": 54,
    "start_time": "2023-12-14T18:01:11.392Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-14T18:01:11.449Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-14T18:01:11.470Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T18:01:11.504Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T18:01:11.514Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T18:01:11.526Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T18:01:11.533Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T18:01:11.552Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T18:01:11.588Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-14T18:01:11.594Z"
   },
   {
    "duration": 96,
    "start_time": "2023-12-14T18:01:11.698Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T18:01:11.796Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T18:01:11.815Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T18:01:11.835Z"
   },
   {
    "duration": 68,
    "start_time": "2023-12-14T18:01:11.838Z"
   },
   {
    "duration": 104,
    "start_time": "2023-12-14T18:01:11.907Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T18:01:12.013Z"
   },
   {
    "duration": 1704,
    "start_time": "2023-12-14T18:01:12.020Z"
   },
   {
    "duration": 1675,
    "start_time": "2023-12-14T18:01:13.725Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T18:01:15.401Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T18:01:15.406Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T18:01:15.419Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T18:01:15.429Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T18:01:15.448Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T18:01:15.455Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T18:01:15.465Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T18:01:15.482Z"
   },
   {
    "duration": 53,
    "start_time": "2023-12-14T18:01:15.490Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T18:01:15.546Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T18:01:16.980Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T18:01:47.522Z"
   },
   {
    "duration": 5593,
    "start_time": "2023-12-14T18:03:09.297Z"
   },
   {
    "duration": 33588,
    "start_time": "2023-12-14T18:09:19.502Z"
   },
   {
    "duration": 3975,
    "start_time": "2023-12-14T18:09:54.434Z"
   },
   {
    "duration": 5970,
    "start_time": "2023-12-14T18:10:08.734Z"
   },
   {
    "duration": 8824,
    "start_time": "2023-12-14T18:10:58.286Z"
   },
   {
    "duration": 88511,
    "start_time": "2023-12-14T18:11:08.201Z"
   },
   {
    "duration": 8988,
    "start_time": "2023-12-14T18:12:36.714Z"
   },
   {
    "duration": 76,
    "start_time": "2023-12-14T18:31:40.120Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T18:31:49.470Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T18:31:59.855Z"
   },
   {
    "duration": 1525,
    "start_time": "2023-12-14T18:32:04.994Z"
   },
   {
    "duration": 1839,
    "start_time": "2023-12-14T18:32:15.663Z"
   },
   {
    "duration": 1599,
    "start_time": "2023-12-14T18:32:24.833Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T18:32:45.040Z"
   },
   {
    "duration": 115,
    "start_time": "2023-12-14T18:32:49.198Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T18:37:35.093Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T18:37:48.932Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-14T18:37:55.410Z"
   },
   {
    "duration": 113,
    "start_time": "2023-12-14T18:37:55.598Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T18:38:29.257Z"
   },
   {
    "duration": 117,
    "start_time": "2023-12-14T18:38:29.406Z"
   },
   {
    "duration": 67,
    "start_time": "2023-12-14T18:38:50.850Z"
   },
   {
    "duration": 131,
    "start_time": "2023-12-14T18:38:53.295Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T18:39:04.007Z"
   },
   {
    "duration": 116,
    "start_time": "2023-12-14T18:39:04.143Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-14T18:57:24.770Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T18:57:34.469Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T18:57:40.315Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T19:00:16.731Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T19:12:24.024Z"
   },
   {
    "duration": 5939,
    "start_time": "2023-12-14T19:12:40.478Z"
   },
   {
    "duration": 869,
    "start_time": "2023-12-14T19:12:52.973Z"
   },
   {
    "duration": 632,
    "start_time": "2023-12-14T19:14:39.474Z"
   },
   {
    "duration": 1345,
    "start_time": "2023-12-14T19:15:00.178Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:18:10.707Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:18:28.700Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T19:19:54.681Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T19:19:58.895Z"
   },
   {
    "duration": 171,
    "start_time": "2023-12-14T19:23:53.537Z"
   },
   {
    "duration": 1261,
    "start_time": "2023-12-14T19:24:49.030Z"
   },
   {
    "duration": 196,
    "start_time": "2023-12-14T19:37:36.898Z"
   },
   {
    "duration": 191,
    "start_time": "2023-12-14T19:37:42.282Z"
   },
   {
    "duration": 1202,
    "start_time": "2023-12-14T19:38:25.411Z"
   },
   {
    "duration": 76,
    "start_time": "2023-12-14T19:38:26.615Z"
   },
   {
    "duration": 176,
    "start_time": "2023-12-14T19:40:32.924Z"
   },
   {
    "duration": 195,
    "start_time": "2023-12-14T19:41:09.711Z"
   },
   {
    "duration": 1126,
    "start_time": "2023-12-14T19:41:14.247Z"
   },
   {
    "duration": 1649,
    "start_time": "2023-12-14T19:42:00.272Z"
   },
   {
    "duration": 854,
    "start_time": "2023-12-14T19:42:30.614Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:45:38.976Z"
   },
   {
    "duration": 4729,
    "start_time": "2023-12-14T19:46:37.221Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:46:41.952Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T19:46:41.958Z"
   },
   {
    "duration": 105,
    "start_time": "2023-12-14T19:46:41.973Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-14T19:46:42.081Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-14T19:46:42.109Z"
   },
   {
    "duration": 51,
    "start_time": "2023-12-14T19:46:42.147Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T19:46:42.199Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T19:46:42.217Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:46:42.236Z"
   },
   {
    "duration": 41,
    "start_time": "2023-12-14T19:46:42.248Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T19:46:42.290Z"
   },
   {
    "duration": 56,
    "start_time": "2023-12-14T19:46:42.301Z"
   },
   {
    "duration": 45,
    "start_time": "2023-12-14T19:46:42.358Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-14T19:46:42.405Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T19:46:42.432Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T19:46:42.440Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T19:46:42.451Z"
   },
   {
    "duration": 43,
    "start_time": "2023-12-14T19:46:42.456Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T19:46:42.501Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:46:42.515Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-14T19:46:42.521Z"
   },
   {
    "duration": 91,
    "start_time": "2023-12-14T19:46:42.625Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T19:46:42.717Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T19:46:42.737Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T19:46:42.757Z"
   },
   {
    "duration": 67,
    "start_time": "2023-12-14T19:46:42.762Z"
   },
   {
    "duration": 111,
    "start_time": "2023-12-14T19:46:42.832Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T19:46:42.945Z"
   },
   {
    "duration": 1789,
    "start_time": "2023-12-14T19:46:42.954Z"
   },
   {
    "duration": 1764,
    "start_time": "2023-12-14T19:46:44.745Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:46:46.510Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:46:46.517Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:46:46.530Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:46:46.542Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T19:46:46.548Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T19:46:46.553Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-14T19:46:46.562Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:46:46.602Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T19:46:46.608Z"
   },
   {
    "duration": 86,
    "start_time": "2023-12-14T19:46:46.625Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T19:46:46.713Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T19:46:46.733Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T19:46:46.751Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T19:47:33.151Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T19:47:44.659Z"
   },
   {
    "duration": 4797,
    "start_time": "2023-12-14T19:48:01.986Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:48:06.786Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T19:48:06.793Z"
   },
   {
    "duration": 112,
    "start_time": "2023-12-14T19:48:06.808Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T19:48:06.922Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-14T19:48:06.949Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T19:48:06.989Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T19:48:07.016Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-14T19:48:07.033Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-14T19:48:07.062Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-14T19:48:07.075Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-14T19:48:07.111Z"
   },
   {
    "duration": 83,
    "start_time": "2023-12-14T19:48:07.137Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T19:48:07.224Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-14T19:48:07.249Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:48:07.292Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-14T19:48:07.304Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T19:48:07.327Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-14T19:48:07.332Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T19:48:07.353Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T19:48:07.367Z"
   },
   {
    "duration": 116,
    "start_time": "2023-12-14T19:48:07.393Z"
   },
   {
    "duration": 92,
    "start_time": "2023-12-14T19:48:07.510Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T19:48:07.604Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T19:48:07.624Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T19:48:07.645Z"
   },
   {
    "duration": 74,
    "start_time": "2023-12-14T19:48:07.648Z"
   },
   {
    "duration": 113,
    "start_time": "2023-12-14T19:48:07.724Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T19:48:07.838Z"
   },
   {
    "duration": 1744,
    "start_time": "2023-12-14T19:48:07.847Z"
   },
   {
    "duration": 1715,
    "start_time": "2023-12-14T19:48:09.593Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:48:11.310Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T19:48:11.317Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-14T19:48:11.328Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T19:48:11.363Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T19:48:11.374Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T19:48:11.392Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T19:48:11.410Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T19:48:11.442Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-14T19:48:11.454Z"
   },
   {
    "duration": 79,
    "start_time": "2023-12-14T19:48:11.490Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-14T19:48:11.571Z"
   },
   {
    "duration": 68,
    "start_time": "2023-12-14T19:48:11.595Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T19:48:11.664Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-14T19:51:31.589Z"
   },
   {
    "duration": 43,
    "start_time": "2023-12-14T19:52:47.278Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-14T19:53:14.399Z"
   },
   {
    "duration": 4626,
    "start_time": "2023-12-14T19:53:42.755Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T19:53:47.383Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T19:53:47.389Z"
   },
   {
    "duration": 100,
    "start_time": "2023-12-14T19:53:47.398Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T19:53:47.500Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-14T19:53:47.527Z"
   },
   {
    "duration": 45,
    "start_time": "2023-12-14T19:53:47.562Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T19:53:47.608Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T19:53:47.625Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T19:53:47.643Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T19:53:47.663Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T19:53:47.694Z"
   },
   {
    "duration": 69,
    "start_time": "2023-12-14T19:53:47.704Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-14T19:53:47.776Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-14T19:53:47.804Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T19:53:47.828Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:53:47.837Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T19:53:47.849Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-14T19:53:47.874Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T19:53:47.904Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T19:53:47.923Z"
   },
   {
    "duration": 86,
    "start_time": "2023-12-14T19:53:47.949Z"
   },
   {
    "duration": 86,
    "start_time": "2023-12-14T19:53:48.037Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T19:53:48.125Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-14T19:53:48.143Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T19:53:48.167Z"
   },
   {
    "duration": 63,
    "start_time": "2023-12-14T19:53:48.171Z"
   },
   {
    "duration": 101,
    "start_time": "2023-12-14T19:53:48.235Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T19:53:48.337Z"
   },
   {
    "duration": 1745,
    "start_time": "2023-12-14T19:53:48.346Z"
   },
   {
    "duration": 1837,
    "start_time": "2023-12-14T19:53:50.092Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T19:53:51.930Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-14T19:53:51.935Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T19:53:51.957Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T19:53:51.976Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T19:53:51.981Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T19:53:51.998Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-14T19:53:52.009Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T19:53:52.047Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T19:53:52.052Z"
   },
   {
    "duration": 86,
    "start_time": "2023-12-14T19:53:52.085Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-14T19:53:52.173Z"
   },
   {
    "duration": 48,
    "start_time": "2023-12-14T19:53:52.187Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-14T19:53:52.236Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T19:54:22.692Z"
   },
   {
    "duration": 2833,
    "start_time": "2023-12-14T19:54:26.628Z"
   },
   {
    "duration": 4752,
    "start_time": "2023-12-14T19:55:26.063Z"
   },
   {
    "duration": 2178,
    "start_time": "2023-12-14T19:55:30.818Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T19:55:32.998Z"
   },
   {
    "duration": 104,
    "start_time": "2023-12-14T19:55:33.002Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-14T19:55:33.108Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-14T19:55:33.138Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T19:55:33.187Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T19:55:33.212Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-14T19:55:33.229Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-14T19:55:33.252Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-14T19:55:33.279Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T19:55:33.303Z"
   },
   {
    "duration": 65,
    "start_time": "2023-12-14T19:55:33.313Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-14T19:55:33.388Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-14T19:55:33.410Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T19:55:33.434Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T19:55:33.441Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T19:55:33.459Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T19:55:33.488Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-14T19:55:33.508Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T19:55:33.523Z"
   },
   {
    "duration": 111,
    "start_time": "2023-12-14T19:55:33.531Z"
   },
   {
    "duration": 102,
    "start_time": "2023-12-14T19:55:33.644Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T19:55:33.748Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T19:55:33.767Z"
   },
   {
    "duration": 2,
    "start_time": "2023-12-14T19:55:33.799Z"
   },
   {
    "duration": 49,
    "start_time": "2023-12-14T19:55:33.802Z"
   },
   {
    "duration": 108,
    "start_time": "2023-12-14T19:55:33.853Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T19:55:33.962Z"
   },
   {
    "duration": 1634,
    "start_time": "2023-12-14T19:55:33.970Z"
   },
   {
    "duration": 1732,
    "start_time": "2023-12-14T19:55:35.605Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T19:55:37.338Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-14T19:55:37.343Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T19:55:37.381Z"
   },
   {
    "duration": 66,
    "start_time": "2023-12-14T19:55:37.394Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-14T19:55:37.462Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-14T19:55:37.490Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-14T19:55:37.504Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T19:55:37.538Z"
   },
   {
    "duration": 52,
    "start_time": "2023-12-14T19:55:37.569Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-14T19:55:37.625Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-14T19:55:37.665Z"
   },
   {
    "duration": 525908,
    "start_time": "2023-12-14T19:55:37.700Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:04:23.609Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:04:23.610Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:04:23.611Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:04:23.612Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:04:23.613Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:04:23.614Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:04:23.615Z"
   },
   {
    "duration": 696835,
    "start_time": "2023-12-14T20:04:26.044Z"
   },
   {
    "duration": 69918,
    "start_time": "2023-12-14T20:16:02.881Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:17:12.801Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:17:12.802Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T20:17:12.803Z"
   },
   {
    "duration": 10026,
    "start_time": "2023-12-14T20:18:13.785Z"
   },
   {
    "duration": 3855,
    "start_time": "2023-12-14T20:18:29.993Z"
   },
   {
    "duration": 646993,
    "start_time": "2023-12-14T20:18:44.109Z"
   },
   {
    "duration": 25718,
    "start_time": "2023-12-14T20:35:05.679Z"
   },
   {
    "duration": 141247,
    "start_time": "2023-12-14T20:35:38.997Z"
   },
   {
    "duration": 563966,
    "start_time": "2023-12-14T20:38:20.305Z"
   },
   {
    "duration": 308327,
    "start_time": "2023-12-14T20:50:09.861Z"
   },
   {
    "duration": 108439,
    "start_time": "2023-12-14T20:56:25.923Z"
   },
   {
    "duration": 193036,
    "start_time": "2023-12-14T20:58:20.693Z"
   },
   {
    "duration": 14999,
    "start_time": "2023-12-14T21:08:44.459Z"
   },
   {
    "duration": 54,
    "start_time": "2023-12-14T21:11:56.715Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T21:12:04.527Z"
   },
   {
    "duration": 1556,
    "start_time": "2023-12-14T21:12:11.543Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T21:15:20.905Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-14T21:15:24.221Z"
   },
   {
    "duration": 37444,
    "start_time": "2023-12-14T21:16:45.500Z"
   },
   {
    "duration": 98,
    "start_time": "2023-12-14T21:17:52.243Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T21:18:07.934Z"
   },
   {
    "duration": 37709,
    "start_time": "2023-12-14T21:18:28.463Z"
   },
   {
    "duration": 64652,
    "start_time": "2023-12-14T21:20:29.657Z"
   },
   {
    "duration": 86545,
    "start_time": "2023-12-14T21:22:41.005Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-14T21:24:07.552Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T21:24:07.588Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-14T21:25:45.767Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-14T21:26:22.303Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-14T21:26:32.354Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:27:51.406Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T21:27:59.325Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:28:02.068Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:28:07.684Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T21:28:31.268Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:28:44.400Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-14T21:29:06.832Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:29:07.018Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T21:29:07.580Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:29:08.110Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-14T21:29:42.194Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T21:29:47.343Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T21:29:57.035Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-14T21:29:58.546Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T21:30:01.862Z"
   },
   {
    "duration": 50,
    "start_time": "2023-12-14T21:30:03.308Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:30:03.713Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-14T21:30:05.862Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:30:06.960Z"
   },
   {
    "duration": 50,
    "start_time": "2023-12-14T21:30:23.791Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-14T21:30:36.142Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-14T21:30:36.847Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-14T21:30:49.434Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-14T21:30:49.967Z"
   },
   {
    "duration": 43,
    "start_time": "2023-12-14T21:32:34.446Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T21:33:37.150Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T21:33:46.259Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-14T21:36:06.697Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T21:36:19.084Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-14T21:36:42.461Z"
   },
   {
    "duration": 31,
    "start_time": "2023-12-14T21:36:43.320Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T21:37:18.765Z"
   },
   {
    "duration": 183,
    "start_time": "2023-12-14T21:37:44.213Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-14T21:38:23.648Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T21:38:28.943Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T21:38:41.835Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-14T21:40:03.649Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:40:04.700Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-14T21:40:13.908Z"
   },
   {
    "duration": 8901,
    "start_time": "2023-12-14T21:40:27.202Z"
   },
   {
    "duration": 1555,
    "start_time": "2023-12-14T21:41:06.113Z"
   },
   {
    "duration": 2951,
    "start_time": "2023-12-14T21:41:16.590Z"
   },
   {
    "duration": 848,
    "start_time": "2023-12-14T21:41:23.516Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T21:41:34.945Z"
   },
   {
    "duration": 56,
    "start_time": "2023-12-14T21:48:54.695Z"
   },
   {
    "duration": 1473,
    "start_time": "2023-12-14T21:49:44.190Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-14T21:52:31.334Z"
   },
   {
    "duration": 1434,
    "start_time": "2023-12-14T21:52:36.990Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-14T21:52:45.527Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-14T21:52:57.102Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:56:14.257Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T21:56:19.785Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T21:56:54.224Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T21:56:56.234Z"
   },
   {
    "duration": 197,
    "start_time": "2023-12-14T21:57:45.180Z"
   },
   {
    "duration": 101,
    "start_time": "2023-12-14T21:57:56.422Z"
   },
   {
    "duration": 283,
    "start_time": "2023-12-14T21:58:06.761Z"
   },
   {
    "duration": 176,
    "start_time": "2023-12-14T21:58:19.205Z"
   },
   {
    "duration": 179,
    "start_time": "2023-12-14T21:58:25.831Z"
   },
   {
    "duration": 105,
    "start_time": "2023-12-14T21:58:33.730Z"
   },
   {
    "duration": 172,
    "start_time": "2023-12-14T21:58:37.292Z"
   },
   {
    "duration": 303,
    "start_time": "2023-12-14T21:58:52.670Z"
   },
   {
    "duration": 177,
    "start_time": "2023-12-14T21:59:09.511Z"
   },
   {
    "duration": 202,
    "start_time": "2023-12-14T21:59:14.593Z"
   },
   {
    "duration": 172,
    "start_time": "2023-12-14T21:59:31.223Z"
   },
   {
    "duration": 182,
    "start_time": "2023-12-14T21:59:36.636Z"
   },
   {
    "duration": 187,
    "start_time": "2023-12-14T21:59:59.795Z"
   },
   {
    "duration": 48,
    "start_time": "2023-12-14T22:00:03.497Z"
   },
   {
    "duration": 56,
    "start_time": "2023-12-14T22:00:12.137Z"
   },
   {
    "duration": 194,
    "start_time": "2023-12-14T22:00:17.373Z"
   },
   {
    "duration": 305,
    "start_time": "2023-12-14T22:00:32.666Z"
   },
   {
    "duration": 179,
    "start_time": "2023-12-14T22:00:36.677Z"
   },
   {
    "duration": 109,
    "start_time": "2023-12-14T22:01:06.797Z"
   },
   {
    "duration": 201,
    "start_time": "2023-12-14T22:01:10.309Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T22:31:53.790Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T22:32:09.981Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T22:32:17.155Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T22:32:19.768Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T22:33:47.005Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T22:33:54.820Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T22:34:14.580Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T22:35:17.365Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T22:35:20.380Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-14T22:35:28.677Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-14T22:35:50.878Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T22:35:54.527Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T22:36:45.062Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-14T22:38:04.632Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-14T22:38:04.896Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-14T22:38:13.300Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-14T22:38:15.011Z"
   },
   {
    "duration": 939,
    "start_time": "2023-12-14T22:42:30.507Z"
   },
   {
    "duration": 1586,
    "start_time": "2023-12-14T22:42:37.394Z"
   },
   {
    "duration": 4734,
    "start_time": "2023-12-14T23:29:57.475Z"
   },
   {
    "duration": 2284,
    "start_time": "2023-12-14T23:30:02.211Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-14T23:30:04.497Z"
   },
   {
    "duration": 122,
    "start_time": "2023-12-14T23:30:04.502Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-14T23:30:04.626Z"
   },
   {
    "duration": 49,
    "start_time": "2023-12-14T23:30:04.657Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T23:30:04.708Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-14T23:30:04.735Z"
   },
   {
    "duration": 43,
    "start_time": "2023-12-14T23:30:04.766Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-14T23:30:04.812Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T23:30:04.834Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-14T23:30:04.854Z"
   },
   {
    "duration": 62,
    "start_time": "2023-12-14T23:30:04.864Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-14T23:30:04.927Z"
   },
   {
    "duration": 36,
    "start_time": "2023-12-14T23:30:04.953Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T23:30:04.991Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-14T23:30:05.003Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-14T23:30:05.027Z"
   },
   {
    "duration": 45,
    "start_time": "2023-12-14T23:30:05.052Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-14T23:30:05.099Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T23:30:05.115Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-14T23:30:05.127Z"
   },
   {
    "duration": 92,
    "start_time": "2023-12-14T23:30:05.232Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-14T23:30:05.325Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T23:30:05.346Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-14T23:30:05.374Z"
   },
   {
    "duration": 63,
    "start_time": "2023-12-14T23:30:05.401Z"
   },
   {
    "duration": 96,
    "start_time": "2023-12-14T23:30:05.468Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-14T23:30:05.566Z"
   },
   {
    "duration": 1700,
    "start_time": "2023-12-14T23:30:05.588Z"
   },
   {
    "duration": 1709,
    "start_time": "2023-12-14T23:30:07.290Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-14T23:30:09.000Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-14T23:30:09.005Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-14T23:30:09.032Z"
   },
   {
    "duration": 31,
    "start_time": "2023-12-14T23:30:09.061Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-14T23:30:09.093Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-14T23:30:09.117Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-14T23:30:09.147Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-14T23:30:09.183Z"
   },
   {
    "duration": 95,
    "start_time": "2023-12-14T23:30:09.212Z"
   },
   {
    "duration": 33,
    "start_time": "2023-12-14T23:30:09.309Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-14T23:30:09.344Z"
   },
   {
    "duration": 2414,
    "start_time": "2023-12-14T23:30:09.356Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.771Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.772Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.774Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.775Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.775Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.777Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.777Z"
   },
   {
    "duration": 1,
    "start_time": "2023-12-14T23:30:11.778Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:30:11.780Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-14T23:44:11.696Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-14T23:44:29.148Z"
   },
   {
    "duration": 1596,
    "start_time": "2023-12-14T23:44:42.182Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-14T23:45:06.913Z"
   },
   {
    "duration": 313502,
    "start_time": "2023-12-14T23:45:06.920Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.424Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.425Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.426Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.427Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.428Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.429Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.431Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-14T23:50:20.432Z"
   },
   {
    "duration": 62337,
    "start_time": "2023-12-14T23:51:33.581Z"
   },
   {
    "duration": 88160,
    "start_time": "2023-12-14T23:52:35.920Z"
   },
   {
    "duration": 8912,
    "start_time": "2023-12-14T23:54:04.082Z"
   },
   {
    "duration": 1494,
    "start_time": "2023-12-14T23:54:12.995Z"
   },
   {
    "duration": 189,
    "start_time": "2023-12-14T23:54:14.491Z"
   },
   {
    "duration": 1504,
    "start_time": "2023-12-14T23:54:14.681Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-14T23:54:16.187Z"
   },
   {
    "duration": 56,
    "start_time": "2023-12-14T23:54:16.212Z"
   },
   {
    "duration": 7286,
    "start_time": "2023-12-15T15:07:06.725Z"
   },
   {
    "duration": 4699,
    "start_time": "2023-12-15T15:07:14.014Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T15:07:18.714Z"
   },
   {
    "duration": 322,
    "start_time": "2023-12-15T15:09:49.769Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-15T15:09:50.653Z"
   },
   {
    "duration": 48,
    "start_time": "2023-12-15T15:09:51.772Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-15T15:10:45.757Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-15T15:10:47.515Z"
   },
   {
    "duration": 7026,
    "start_time": "2023-12-15T17:22:41.947Z"
   },
   {
    "duration": 2519,
    "start_time": "2023-12-15T17:22:48.975Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T17:22:51.495Z"
   },
   {
    "duration": 321,
    "start_time": "2023-12-15T17:22:51.500Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-15T17:22:51.822Z"
   },
   {
    "duration": 40,
    "start_time": "2023-12-15T17:22:51.859Z"
   },
   {
    "duration": 53,
    "start_time": "2023-12-15T17:22:51.901Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-15T17:22:51.955Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-15T17:22:51.976Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-15T17:22:52.009Z"
   },
   {
    "duration": 24,
    "start_time": "2023-12-15T17:22:52.033Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-15T17:22:52.059Z"
   },
   {
    "duration": 79,
    "start_time": "2023-12-15T17:22:52.069Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-15T17:22:52.150Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-15T17:22:52.173Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-15T17:22:52.201Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-15T17:22:52.210Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T17:22:52.248Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-15T17:22:52.254Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-15T17:22:52.281Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T17:22:52.296Z"
   },
   {
    "duration": 122,
    "start_time": "2023-12-15T17:22:52.301Z"
   },
   {
    "duration": 95,
    "start_time": "2023-12-15T17:22:52.424Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-15T17:22:52.521Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-15T17:22:52.555Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T17:22:52.577Z"
   },
   {
    "duration": 70,
    "start_time": "2023-12-15T17:22:52.582Z"
   },
   {
    "duration": 116,
    "start_time": "2023-12-15T17:22:52.655Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-15T17:22:52.772Z"
   },
   {
    "duration": 1721,
    "start_time": "2023-12-15T17:22:52.782Z"
   },
   {
    "duration": 1790,
    "start_time": "2023-12-15T17:22:54.505Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T17:22:56.296Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-15T17:22:56.301Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T17:22:56.311Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-15T17:22:56.322Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T17:22:56.342Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T17:22:56.347Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-15T17:22:56.359Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T17:22:56.377Z"
   },
   {
    "duration": 70,
    "start_time": "2023-12-15T17:22:56.381Z"
   },
   {
    "duration": 170,
    "start_time": "2023-12-15T17:22:56.453Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.625Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.626Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.628Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.628Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.630Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.631Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.632Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.642Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.643Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.644Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:22:56.646Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-15T17:23:19.304Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-15T17:23:40.376Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-15T17:24:11.558Z"
   },
   {
    "duration": 42,
    "start_time": "2023-12-15T17:24:56.564Z"
   },
   {
    "duration": 5014,
    "start_time": "2023-12-15T17:33:01.797Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-15T17:33:06.814Z"
   },
   {
    "duration": 25,
    "start_time": "2023-12-15T17:33:06.820Z"
   },
   {
    "duration": 106,
    "start_time": "2023-12-15T17:33:06.846Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-15T17:33:06.955Z"
   },
   {
    "duration": 61,
    "start_time": "2023-12-15T17:33:06.986Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-15T17:33:07.048Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-15T17:33:07.077Z"
   },
   {
    "duration": 19,
    "start_time": "2023-12-15T17:33:07.096Z"
   },
   {
    "duration": 36,
    "start_time": "2023-12-15T17:33:07.117Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-15T17:33:07.155Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-15T17:33:07.177Z"
   },
   {
    "duration": 86,
    "start_time": "2023-12-15T17:33:07.189Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-15T17:33:07.279Z"
   },
   {
    "duration": 49,
    "start_time": "2023-12-15T17:33:07.303Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T17:33:07.354Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-15T17:33:07.366Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-15T17:33:07.381Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-15T17:33:07.388Z"
   },
   {
    "duration": 41,
    "start_time": "2023-12-15T17:33:07.407Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-15T17:33:07.449Z"
   },
   {
    "duration": 97,
    "start_time": "2023-12-15T17:33:07.456Z"
   },
   {
    "duration": 95,
    "start_time": "2023-12-15T17:33:07.555Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-15T17:33:07.651Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-15T17:33:07.672Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T17:33:07.702Z"
   },
   {
    "duration": 74,
    "start_time": "2023-12-15T17:33:07.706Z"
   },
   {
    "duration": 106,
    "start_time": "2023-12-15T17:33:07.782Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-15T17:33:07.890Z"
   },
   {
    "duration": 1710,
    "start_time": "2023-12-15T17:33:07.900Z"
   },
   {
    "duration": 1862,
    "start_time": "2023-12-15T17:33:09.612Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T17:33:11.475Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-15T17:33:11.480Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-15T17:33:11.502Z"
   },
   {
    "duration": 41,
    "start_time": "2023-12-15T17:33:11.541Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-15T17:33:11.584Z"
   },
   {
    "duration": 36,
    "start_time": "2023-12-15T17:33:11.609Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-15T17:33:11.647Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-15T17:33:11.683Z"
   },
   {
    "duration": 80,
    "start_time": "2023-12-15T17:33:11.710Z"
   },
   {
    "duration": 49,
    "start_time": "2023-12-15T17:33:11.794Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T17:33:11.845Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-15T17:33:11.850Z"
   },
   {
    "duration": 41190,
    "start_time": "2023-12-15T17:33:11.875Z"
   },
   {
    "duration": 70723,
    "start_time": "2023-12-15T17:33:53.067Z"
   },
   {
    "duration": 95171,
    "start_time": "2023-12-15T17:35:03.792Z"
   },
   {
    "duration": 6181,
    "start_time": "2023-12-15T17:36:38.965Z"
   },
   {
    "duration": 1536,
    "start_time": "2023-12-15T17:36:45.152Z"
   },
   {
    "duration": 199,
    "start_time": "2023-12-15T17:36:46.690Z"
   },
   {
    "duration": 1644,
    "start_time": "2023-12-15T17:36:46.891Z"
   },
   {
    "duration": 35,
    "start_time": "2023-12-15T17:36:48.537Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-15T17:36:48.574Z"
   },
   {
    "duration": 50327,
    "start_time": "2023-12-15T17:37:42.147Z"
   },
   {
    "duration": 124148,
    "start_time": "2023-12-15T17:41:34.211Z"
   },
   {
    "duration": 147515,
    "start_time": "2023-12-15T17:44:25.403Z"
   },
   {
    "duration": 33951,
    "start_time": "2023-12-15T17:50:12.151Z"
   },
   {
    "duration": 18703,
    "start_time": "2023-12-15T17:51:09.796Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:51:50.515Z"
   },
   {
    "duration": 0,
    "start_time": "2023-12-15T17:52:41.688Z"
   },
   {
    "duration": 37997,
    "start_time": "2023-12-15T17:52:42.794Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-15T17:54:45.160Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-15T17:55:00.392Z"
   },
   {
    "duration": 11,
    "start_time": "2023-12-15T17:56:37.611Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T17:56:44.098Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T17:56:48.918Z"
   },
   {
    "duration": 10321,
    "start_time": "2023-12-15T17:58:15.766Z"
   },
   {
    "duration": 31,
    "start_time": "2023-12-15T17:59:08.052Z"
   },
   {
    "duration": 8599,
    "start_time": "2023-12-15T18:01:04.985Z"
   },
   {
    "duration": 4953,
    "start_time": "2023-12-15T18:15:21.750Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-15T18:15:26.706Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-15T18:15:26.713Z"
   },
   {
    "duration": 104,
    "start_time": "2023-12-15T18:15:26.721Z"
   },
   {
    "duration": 30,
    "start_time": "2023-12-15T18:15:26.827Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-15T18:15:26.859Z"
   },
   {
    "duration": 49,
    "start_time": "2023-12-15T18:15:26.897Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-15T18:15:26.947Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-15T18:15:26.965Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-15T18:15:26.983Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-15T18:15:26.996Z"
   },
   {
    "duration": 34,
    "start_time": "2023-12-15T18:15:27.015Z"
   },
   {
    "duration": 55,
    "start_time": "2023-12-15T18:15:27.051Z"
   },
   {
    "duration": 39,
    "start_time": "2023-12-15T18:15:27.108Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-15T18:15:27.149Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T18:15:27.178Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T18:15:27.190Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-15T18:15:27.201Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-15T18:15:27.208Z"
   },
   {
    "duration": 26,
    "start_time": "2023-12-15T18:15:27.227Z"
   },
   {
    "duration": 9,
    "start_time": "2023-12-15T18:15:27.255Z"
   },
   {
    "duration": 103,
    "start_time": "2023-12-15T18:15:27.265Z"
   },
   {
    "duration": 95,
    "start_time": "2023-12-15T18:15:27.369Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-15T18:15:27.465Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-15T18:15:27.488Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T18:15:27.513Z"
   },
   {
    "duration": 49,
    "start_time": "2023-12-15T18:15:27.543Z"
   },
   {
    "duration": 119,
    "start_time": "2023-12-15T18:15:27.597Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-15T18:15:27.717Z"
   },
   {
    "duration": 1694,
    "start_time": "2023-12-15T18:15:27.726Z"
   },
   {
    "duration": 1793,
    "start_time": "2023-12-15T18:15:29.421Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T18:15:31.217Z"
   },
   {
    "duration": 304,
    "start_time": "2023-12-15T18:15:31.223Z"
   },
   {
    "duration": 78,
    "start_time": "2023-12-15T18:15:31.529Z"
   },
   {
    "duration": 70,
    "start_time": "2023-12-15T18:15:31.609Z"
   },
   {
    "duration": 28,
    "start_time": "2023-12-15T18:15:31.681Z"
   },
   {
    "duration": 135,
    "start_time": "2023-12-15T18:15:31.710Z"
   },
   {
    "duration": 240,
    "start_time": "2023-12-15T18:15:31.846Z"
   },
   {
    "duration": 205,
    "start_time": "2023-12-15T18:15:32.088Z"
   },
   {
    "duration": 56,
    "start_time": "2023-12-15T18:15:32.295Z"
   },
   {
    "duration": 45,
    "start_time": "2023-12-15T18:15:32.353Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T18:15:32.399Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T18:15:32.404Z"
   },
   {
    "duration": 49942,
    "start_time": "2023-12-15T18:15:32.415Z"
   },
   {
    "duration": 146878,
    "start_time": "2023-12-15T18:16:22.358Z"
   },
   {
    "duration": 24442,
    "start_time": "2023-12-15T18:18:49.237Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T18:19:13.681Z"
   },
   {
    "duration": 90114,
    "start_time": "2023-12-15T18:19:13.686Z"
   },
   {
    "duration": 8145,
    "start_time": "2023-12-15T18:20:43.802Z"
   },
   {
    "duration": 1294,
    "start_time": "2023-12-15T18:20:51.949Z"
   },
   {
    "duration": 201,
    "start_time": "2023-12-15T18:20:53.244Z"
   },
   {
    "duration": 1403,
    "start_time": "2023-12-15T18:20:53.447Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-15T18:20:54.851Z"
   },
   {
    "duration": 15,
    "start_time": "2023-12-15T18:20:54.873Z"
   },
   {
    "duration": 4837,
    "start_time": "2023-12-15T18:48:42.625Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-15T18:48:47.464Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-15T18:48:47.471Z"
   },
   {
    "duration": 100,
    "start_time": "2023-12-15T18:48:47.478Z"
   },
   {
    "duration": 29,
    "start_time": "2023-12-15T18:48:47.580Z"
   },
   {
    "duration": 38,
    "start_time": "2023-12-15T18:48:47.611Z"
   },
   {
    "duration": 27,
    "start_time": "2023-12-15T18:48:47.651Z"
   },
   {
    "duration": 17,
    "start_time": "2023-12-15T18:48:47.679Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-15T18:48:47.698Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-15T18:48:47.745Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-15T18:48:47.758Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T18:48:47.784Z"
   },
   {
    "duration": 87,
    "start_time": "2023-12-15T18:48:47.795Z"
   },
   {
    "duration": 22,
    "start_time": "2023-12-15T18:48:47.884Z"
   },
   {
    "duration": 37,
    "start_time": "2023-12-15T18:48:47.908Z"
   },
   {
    "duration": 7,
    "start_time": "2023-12-15T18:48:47.946Z"
   },
   {
    "duration": 12,
    "start_time": "2023-12-15T18:48:47.954Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-15T18:48:47.968Z"
   },
   {
    "duration": 16,
    "start_time": "2023-12-15T18:48:47.976Z"
   },
   {
    "duration": 13,
    "start_time": "2023-12-15T18:48:47.993Z"
   },
   {
    "duration": 5,
    "start_time": "2023-12-15T18:48:48.007Z"
   },
   {
    "duration": 114,
    "start_time": "2023-12-15T18:48:48.013Z"
   },
   {
    "duration": 98,
    "start_time": "2023-12-15T18:48:48.129Z"
   },
   {
    "duration": 32,
    "start_time": "2023-12-15T18:48:48.228Z"
   },
   {
    "duration": 20,
    "start_time": "2023-12-15T18:48:48.262Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T18:48:48.284Z"
   },
   {
    "duration": 92,
    "start_time": "2023-12-15T18:48:48.288Z"
   },
   {
    "duration": 114,
    "start_time": "2023-12-15T18:48:48.383Z"
   },
   {
    "duration": 8,
    "start_time": "2023-12-15T18:48:48.498Z"
   },
   {
    "duration": 1703,
    "start_time": "2023-12-15T18:48:48.507Z"
   },
   {
    "duration": 1683,
    "start_time": "2023-12-15T18:48:50.212Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T18:48:51.896Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-15T18:48:51.902Z"
   },
   {
    "duration": 18,
    "start_time": "2023-12-15T18:48:51.909Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-15T18:48:51.928Z"
   },
   {
    "duration": 10,
    "start_time": "2023-12-15T18:48:51.944Z"
   },
   {
    "duration": 14,
    "start_time": "2023-12-15T18:48:51.955Z"
   },
   {
    "duration": 23,
    "start_time": "2023-12-15T18:48:51.971Z"
   },
   {
    "duration": 4,
    "start_time": "2023-12-15T18:48:51.996Z"
   },
   {
    "duration": 69,
    "start_time": "2023-12-15T18:48:52.002Z"
   },
   {
    "duration": 42,
    "start_time": "2023-12-15T18:48:52.073Z"
   },
   {
    "duration": 3,
    "start_time": "2023-12-15T18:48:52.116Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-15T18:48:52.121Z"
   },
   {
    "duration": 49366,
    "start_time": "2023-12-15T18:48:52.144Z"
   },
   {
    "duration": 145526,
    "start_time": "2023-12-15T18:49:41.511Z"
   },
   {
    "duration": 24630,
    "start_time": "2023-12-15T18:52:07.039Z"
   },
   {
    "duration": 6,
    "start_time": "2023-12-15T18:52:31.670Z"
   },
   {
    "duration": 91630,
    "start_time": "2023-12-15T18:52:31.678Z"
   },
   {
    "duration": 7939,
    "start_time": "2023-12-15T18:54:03.310Z"
   },
   {
    "duration": 1244,
    "start_time": "2023-12-15T18:54:11.251Z"
   },
   {
    "duration": 190,
    "start_time": "2023-12-15T18:54:12.496Z"
   },
   {
    "duration": 1542,
    "start_time": "2023-12-15T18:54:12.688Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-15T18:54:14.232Z"
   },
   {
    "duration": 21,
    "start_time": "2023-12-15T18:54:14.255Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
